// Generated by CoffeeScript 1.10.0
(function() {
  var Method, create, define, dispatch, lookup,
    slice = [].slice;

  lookup = function(m, ax) {
    var f, i, j, len, match, ref, ref1, term, terms;
    ref = m.entries;
    for (j = 0, len = ref.length; j < len; j++) {
      ref1 = ref[j], terms = ref1[0], f = ref1[1];
      if (terms.length > ax.length) {
        continue;
      }
      match = false;
      i = 0;
      while (i < ax.length) {
        if ((term = terms[i]) == null) {
          match = false;
          break;
        }
        if (term.length === 0) {
          match = term.apply(null, ax.slice(i));
          break;
        }
        if (!(match = term(ax[i++]))) {
          break;
        }
      }
      if (match) {
        return f;
      }
    }
    return m["default"];
  };

  dispatch = function(method, ax) {
    var f;
    f = lookup(method, ax);
    return f.apply(null, ax);
  };

  create = function(options) {
    var k, m, v;
    m = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return dispatch(m, args);
    };
    m.entries = [];
    for (k in options) {
      v = options[k];
      m[k] = v;
    }
    if (m["default"] == null) {
      m["default"] = function() {
        throw new TypeError("No method matches arguments.");
      };
    }
    return m;
  };

  define = function() {
    var f, j, m, terms;
    m = arguments[0], terms = 3 <= arguments.length ? slice.call(arguments, 1, j = arguments.length - 1) : (j = 1, []), f = arguments[j++];
    return m.entries.unshift([terms, f]);
  };

  Method = {
    create: create,
    define: define,
    lookup: lookup
  };

  module.exports = {
    Method: Method
  };

}).call(this);
