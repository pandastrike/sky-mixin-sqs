"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pair = exports.pluck = exports.range = exports.shuffle = exports.fill = exports.join = exports.slice = exports.cat = exports.remove = exports.insert = exports.splice = exports.dequeue = exports.enqueue = exports.unshift = exports.shift = exports.pop = exports.push = exports.complement = exports.difference = exports.intersection = exports.union = exports.dupes = exports.uniq = exports.unique = exports.uniqueBy = exports.findLastIndexOf = exports.findIndexOf = exports.includes = exports.empty = exports.rest = exports.last = exports.nth = exports.fifth = exports.fourth = exports.third = exports.second = exports.first = void 0;

var _pandaGarden = require("panda-garden");

var _object = require("./object");

var cat,
    complement,
    dequeue,
    difference,
    dupes,
    empty,
    enqueue,
    fifth,
    fill,
    findIndexOf,
    findLastIndexOf,
    first,
    fourth,
    includes,
    insert,
    intersection,
    join,
    last,
    nth,
    pair,
    pluck,
    pop,
    push,
    random,
    range,
    remove,
    rest,
    round,
    second,
    shift,
    shuffle,
    slice,
    some,
    sort,
    splice,
    third,
    union,
    uniq,
    unique,
    uniqueBy,
    unshift,
    splice1 = [].splice,
    indexOf = [].indexOf;
exports.unshift = unshift;
exports.uniqueBy = uniqueBy;
exports.unique = unique;
exports.uniq = uniq;
exports.union = union;
exports.third = third;
exports.splice = splice;
exports.slice = slice;
exports.shuffle = shuffle;
exports.shift = shift;
exports.second = second;
exports.rest = rest;
exports.remove = remove;
exports.range = range;
exports.push = push;
exports.pop = pop;
exports.pluck = pluck;
exports.pair = pair;
exports.nth = nth;
exports.last = last;
exports.join = join;
exports.intersection = intersection;
exports.insert = insert;
exports.includes = includes;
exports.fourth = fourth;
exports.first = first;
exports.findLastIndexOf = findLastIndexOf;
exports.findIndexOf = findIndexOf;
exports.fill = fill;
exports.fifth = fifth;
exports.enqueue = enqueue;
exports.empty = empty;
exports.dupes = dupes;
exports.difference = difference;
exports.dequeue = dequeue;
exports.complement = complement;
exports.cat = cat;
exports.nth = nth = (0, _pandaGarden.curry)(function (i, ax) {
  return ax[i - 1];
});
exports.first = first = nth(1);
exports.second = second = nth(2);
exports.third = third = nth(3);
exports.fourth = fourth = nth(4);
exports.fifth = fifth = nth(5);

exports.last = last = function (arg) {
  var arg, last, rest;
  [...rest] = arg, [last] = splice1.call(rest, -1);
  return last;
};

exports.rest = rest = function ([first, ...rest]) {
  return rest;
}; // array only version of empty, not exported


exports.empty = empty = function (x) {
  return x.length === 0;
};

exports.includes = includes = Array.prototype.includes ? (0, _pandaGarden.curry)(function (a, ax) {
  return ax.includes(a);
}) : (0, _pandaGarden.curry)(function (a, ax) {
  return ax.indexOf(a) !== -1;
}); // find and findLast are defined in reactive
// with specializations for array
// curryable index variations that can use ? operator or equivalent
// ex: if (i = findIndexOf ax, a)? then ...

exports.findIndexOf = findIndexOf = (0, _pandaGarden.curry)(function (a, ax) {
  var i;

  if ((i = ax.indexOf(a)) !== -1) {
    return i;
  }
});
exports.findLastIndexOf = findLastIndexOf = (0, _pandaGarden.curry)(function (a, ax) {
  var i;

  if ((i = ax.lastIndexOf(a)) !== -1) {
    return i;
  }
}); // reactive `any` is preferred but `some` is faster

some = (0, _pandaGarden.curry)((0, _pandaGarden.binary)((0, _object.detach)(Array.prototype.some))); // Array mutators

exports.push = push = (0, _pandaGarden.curry)(function (ax, ...a) {
  ax.push(...a);
  return ax;
});
exports.pop = pop = (0, _object.detach)(Array.prototype.pop);
exports.shift = shift = (0, _object.detach)(Array.prototype.shift);
exports.unshift = unshift = (0, _object.detach)(Array.prototype.unshift);
exports.enqueue = enqueue = unshift;
exports.dequeue = dequeue = pop; // true splice without weird insertion option
// or compose-breaking return value

exports.splice = splice = (0, _pandaGarden.curry)(function (i, n, ax) {
  ax.splice(i, n);
  return ax;
});
exports.insert = insert = (0, _pandaGarden.curry)((0, _pandaGarden.ternary)(function (ax, a, i) {
  ax.splice(i, 0, a);
  return ax;
}));
exports.remove = remove = (0, _pandaGarden.curry)(function (ax, a) {
  var i;

  if ((i = ax.indexOf(a)) !== -1) {
    ax.splice(i, 1);
  }

  return ax;
});
exports.cat = cat = (0, _object.detach)(Array.prototype.concat);
exports.slice = slice = (0, _pandaGarden.curry)(function (i, j, ax) {
  return ax.slice(i, j);
});
sort = (0, _pandaGarden.curry)((0, _pandaGarden.binary)((0, _object.detach)(Array.prototype.sort)));
exports.join = join = (0, _pandaGarden.curry)((0, _pandaGarden.binary)((0, _object.detach)(Array.prototype.join)));
exports.fill = fill = (0, _pandaGarden.curry)(function (ax, a) {
  return ax.fill(a);
}); // Set operations...
// TODO: some of these could be implemented in terms of producers

exports.uniqueBy = uniqueBy = (0, _pandaGarden.curry)(function (f, ax) {
  var a, b, bx, k, len;
  bx = [];

  for (k = 0, len = ax.length; k < len; k++) {
    a = ax[k];
    b = f(a);

    if (indexOf.call(bx, b) < 0) {
      bx.push(b);
    }
  }

  return bx;
});

exports.unique = unique = exports.uniq = uniq = function (ax) {
  return Array.from(new Set(ax));
};

exports.dupes = dupes = function ([a, ...ax]) {
  var bx;

  if (empty(ax)) {
    return [];
  } else {
    bx = dupes(ax);

    if (indexOf.call(ax, a) >= 0 && !(indexOf.call(bx, a) >= 0)) {
      return [a, ...bx];
    } else {
      return bx;
    }
  }
};

exports.union = union = (0, _pandaGarden.curry)((0, _pandaGarden.compose)(unique, cat));

exports.intersection = intersection = function (first, ...rest) {
  var k, len, ref, results, x;

  if (empty(rest)) {
    return first;
  } else {
    ref = intersection(...rest);
    results = [];

    for (k = 0, len = ref.length; k < len; k++) {
      x = ref[k];

      if (indexOf.call(first, x) >= 0) {
        results.push(x);
      }
    }

    return results;
  }
};

exports.difference = difference = (0, _pandaGarden.curry)(function (ax, bx) {
  var cx;
  cx = union(ax, bx);
  return cx.filter(function (c) {
    return indexOf.call(ax, c) >= 0 && !(indexOf.call(bx, c) >= 0) || indexOf.call(bx, c) >= 0 && !(indexOf.call(ax, c) >= 0);
  });
});
exports.complement = complement = (0, _pandaGarden.curry)(function (ax, bx) {
  return ax.filter(function (c) {
    return !(indexOf.call(bx, c) >= 0);
  });
}); // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle

exports.shuffle = shuffle = function (ax) {
  var bx, i, j;
  bx = cat(ax);
  i = bx.length;

  if (!(i <= 1)) {
    while (--i > 0) {
      // the distinguishing characteristic of fisher-yates is that the random
      // value generated is bounded by the iterator index (Math.random() * i)
      // instead of the size of the array (Math.random() * bx.length)
      j = Math.floor(Math.random() * (i + 1));
      [bx[i], bx[j]] = [bx[j], bx[i]];
    }

    if (deepEqual(ax, bx)) {
      return shuffle(ax);
    } else {
      return bx;
    }
  } else {
    return bx;
  }
};

exports.range = range = (0, _pandaGarden.curry)(function (start, finish) {
  return function () {
    var results = [];

    for (var k = start; start <= finish ? k <= finish : k >= finish; start <= finish ? k++ : k--) {
      results.push(k);
    }

    return results;
  }.apply(this);
});
({
  random,
  round
} = Math);

exports.pluck = pluck = function (ax) {
  return ax[round(random() * (ax.length - 1))];
};

exports.pair = pair = (0, _pandaGarden.curry)(function (a, b) {
  return [a, b];
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/dyoder/repos/panda-parchment/src/array.coffee