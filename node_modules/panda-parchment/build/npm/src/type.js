"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEmpty = exports.length = exports.size = exports.isFunction = exports.isAsyncFunction = exports.isGeneratorFunction = exports.isRegularFunction = exports.isPromise = exports.isDate = exports.isRegExp = exports.isArray = exports.isObject = exports.isString = exports.isBuffer = exports.isFloat = exports.isInteger = exports.isFinite = exports.isNaN = exports.isNumber = exports.isBoolean = exports.isUndefined = exports.isDefined = exports.instanceOf = exports.Type = exports.isKind = exports.isType = exports.isTransitivePrototype = exports.isPrototype = exports.prototype = void 0;

var _pandaGarden = require("panda-garden");

var _pandaGenerics = require("panda-generics");

var GeneratorFunction, Type, hasByteLength, hasLength, hasSize, instanceOf, isArray, isAsyncFunction, isBoolean, isBuffer, isDate, isDefined, isDerived, isEmpty, isError, isFinite, isFloat, isFunction, isGeneratorFunction, isInteger, isKind, isNaN, isNumber, isObject, isPromise, isPrototype, isRegExp, isRegularFunction, isString, isTransitivePrototype, isType, isUndefined, length, prototype, size;
exports.size = size;
exports.prototype = prototype;
exports.length = length;
exports.isUndefined = isUndefined;
exports.isType = isType;
exports.isTransitivePrototype = isTransitivePrototype;
exports.isString = isString;
exports.isRegularFunction = isRegularFunction;
exports.isRegExp = isRegExp;
exports.isPrototype = isPrototype;
exports.isPromise = isPromise;
exports.isObject = isObject;
exports.isNumber = isNumber;
exports.isNaN = isNaN;
exports.isKind = isKind;
exports.isInteger = isInteger;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isFunction = isFunction;
exports.isFloat = isFloat;
exports.isFinite = isFinite;
exports.isEmpty = isEmpty;
exports.isDefined = isDefined;
exports.isDate = isDate;
exports.isBuffer = isBuffer;
exports.isBoolean = isBoolean;
exports.isAsyncFunction = isAsyncFunction;
exports.isArray = isArray;
exports.instanceOf = instanceOf;
exports.Type = Type;

exports.prototype = prototype = function (value) {
  if (value != null) {
    return Object.getPrototypeOf(value);
  }
};

exports.isPrototype = isPrototype = (0, _pandaGarden.curry)(function (p, value) {
  return p != null && p === prototype(value);
});
exports.isType = isType = (0, _pandaGarden.curry)(function (type, value) {
  return isPrototype(type != null ? type.prototype : void 0, value);
});
exports.isTransitivePrototype = isTransitivePrototype = (0, _pandaGarden.curry)(function (p, value) {
  var q;
  return p != null && (p === (q = prototype(value)) || q != null && isTransitivePrototype(p, q));
});
exports.isKind = isKind = (0, _pandaGarden.curry)(function (type, value) {
  return isTransitivePrototype(type != null ? type.prototype : void 0, value);
}); // TODO: is this correct? to check generally for a derived type
// needs tests ....

isDerived = (0, _pandaGarden.curry)(function (type, value) {
  return isKind(type, value.prototype);
});
exports.isNumber = isNumber = isType(Number);

exports.isNaN = isNaN = function (n) {
  return Number.isNaN(n);
};

exports.isFinite = isFinite = function (n) {
  return Number.isFinite(n);
};

exports.isInteger = isInteger = function (n) {
  return Number.isInteger(n);
};

exports.isFloat = isFloat = function (n) {
  return n === +n && n !== (n | 0);
};

exports.isBoolean = isBoolean = isType(Boolean);
exports.isDate = isDate = isType(Date);
exports.isRegExp = isRegExp = isType(RegExp);
exports.isString = isString = isType(String);
exports.isBuffer = isBuffer = isType(Buffer);
exports.isRegularFunction = isRegularFunction = isType(Function);
exports.isObject = isObject = isType(Object);
exports.isArray = isArray = isType(Array);
isError = isType(Error);

exports.isDefined = isDefined = function (x) {
  return x != null;
};

exports.isUndefined = isUndefined = function (x) {
  return x == null;
};

GeneratorFunction = function* () {
  return yield null;
}.constructor;

exports.isGeneratorFunction = isGeneratorFunction = isType(GeneratorFunction);
exports.isPromise = isPromise = isType(Promise);
exports.isAsyncFunction = isAsyncFunction = isType(async function () {
  return await null;
}.constructor);
exports.isFunction = isFunction = isKind(Function);
exports.instanceOf = instanceOf = (0, _pandaGarden.curry)(function (t, x) {
  return x instanceof t;
});
exports.Type = Type = {
  create: function (type) {
    if (type != null) {
      return new type();
    }
  },
  define: function (parent = Object) {
    return class extends parent {};
  }
};
exports.size = size = exports.length = length = _pandaGenerics.Method.create({
  default: function (x) {
    throw new TypeError(`size: not valid for type ${x.constructor}`);
  }
});

hasLength = function (x) {
  return x.length != null;
};

hasByteLength = function (x) {
  return x.byteLength != null;
};

hasSize = function (x) {
  return x.size != null;
};

_pandaGenerics.Method.define(size, hasByteLength, function (x) {
  return x.byteLength;
});

_pandaGenerics.Method.define(size, isObject, function (x) {
  return keys(x).length;
});

_pandaGenerics.Method.define(size, hasSize, function (x) {
  return x.size;
});

_pandaGenerics.Method.define(size, hasLength, function (x) {
  return x.length;
});

exports.isEmpty = isEmpty = function (x) {
  return size(x) === 0;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9keW9kZXIvcmVwb3MvcGFuZGEtcGFyY2htZW50L3NyYy90eXBlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBREEsSUFBQSxpQkFBQSxFQUFBLElBQUEsRUFBQSxhQUFBLEVBQUEsU0FBQSxFQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUEsT0FBQSxFQUFBLGVBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUEsbUJBQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxXQUFBLEVBQUEsUUFBQSxFQUFBLGlCQUFBLEVBQUEsUUFBQSxFQUFBLHFCQUFBLEVBQUEsTUFBQSxFQUFBLFdBQUEsRUFBQSxNQUFBLEVBQUEsU0FBQSxFQUFBLElBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQSxvQkFBQSxTQUFBLEdBQVksVUFBQSxLQUFBLEVBQUE7QUFBVyxNQUFHLEtBQUEsSUFBSCxJQUFBLEVBQUE7V0FBZSxNQUFNLENBQU4sY0FBQSxDQUFmLEtBQWUsQzs7QUFBMUIsQ0FBWjs7QUFFQSxzQkFBQSxXQUFBLEdBQWMsd0JBQU0sVUFBQSxDQUFBLEVBQUEsS0FBQSxFQUFBO1NBQWMsQ0FBQSxJQUFBLElBQUEsSUFBTSxDQUFBLEtBQUssU0FBQSxDQUFBLEtBQUEsQztBQUEvQixDQUFBLENBQWQ7QUFFQSxpQkFBQSxNQUFBLEdBQVMsd0JBQU0sVUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBO1NBQWlCLFdBQUEsQ0FBQSxJQUFBLElBQUEsSUFBQSxHQUFZLElBQUksQ0FBRSxTQUFsQixHQUFrQixLQUFsQixDQUFBLEVBQUEsS0FBQSxDO0FBQXZCLENBQUEsQ0FBVDtBQUVBLGdDQUFB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QVksQztBQUFuQixDQUFWIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjdXJyeX0gZnJvbSBcInBhbmRhLWdhcmRlblwiXG5pbXBvcnQge01ldGhvZH0gZnJvbSBcInBhbmRhLWdlbmVyaWNzXCJcblxucHJvdG90eXBlID0gKHZhbHVlKSAtPiBpZiB2YWx1ZT8gdGhlbiBPYmplY3QuZ2V0UHJvdG90eXBlT2YgdmFsdWVcblxuaXNQcm90b3R5cGUgPSBjdXJyeSAocCwgdmFsdWUpIC0+IHA/ICYmIHAgPT0gcHJvdG90eXBlIHZhbHVlXG5cbmlzVHlwZSA9IGN1cnJ5ICh0eXBlLCB2YWx1ZSkgLT4gaXNQcm90b3R5cGUgdHlwZT8ucHJvdG90eXBlLCB2YWx1ZVxuXG5pc1RyYW5zaXRpdmVQcm90b3R5cGUgPSBjdXJyeSAocCwgdmFsdWUpIC0+XG4gIHA/ICYmIChwID09IChxID0gcHJvdG90eXBlIHZhbHVlKSB8fCAocT8gJiYgaXNUcmFuc2l0aXZlUHJvdG90eXBlIHAsIHEpKVxuXG5pc0tpbmQgPSBjdXJyeSAodHlwZSwgdmFsdWUpIC0+IGlzVHJhbnNpdGl2ZVByb3RvdHlwZSB0eXBlPy5wcm90b3R5cGUsIHZhbHVlXG5cbiMgVE9ETzogaXMgdGhpcyBjb3JyZWN0PyB0byBjaGVjayBnZW5lcmFsbHkgZm9yIGEgZGVyaXZlZCB0eXBlXG4jIG5lZWRzIHRlc3RzIC4uLi5cbmlzRGVyaXZlZCA9IGN1cnJ5ICh0eXBlLCB2YWx1ZSkgLT4gaXNLaW5kIHR5cGUsIHZhbHVlOjpcblxuaXNOdW1iZXIgPSBpc1R5cGUgTnVtYmVyXG5cbmlzTmFOID0gKG4pIC0+IE51bWJlci5pc05hTiBuXG5cbmlzRmluaXRlID0gKG4pIC0+IE51bWJlci5pc0Zpbml0ZSBuXG5cbmlzSW50ZWdlciA9IChuKSAtPiBOdW1iZXIuaXNJbnRlZ2VyIG5cblxuaXNGbG9hdCA9IChuKSAtPiBuID09ICtuICYmIG4gIT0gKG58MClcblxuaXNCb29sZWFuID0gaXNUeXBlIEJvb2xlYW5cblxuaXNEYXRlID0gaXNUeXBlIERhdGVcblxuaXNSZWdFeHAgPSBpc1R5cGUgUmVnRXhwXG5cbmlzU3RyaW5nID0gaXNUeXBlIFN0cmluZ1xuXG5pc0J1ZmZlciA9IGlzVHlwZSBCdWZmZXJcblxuaXNSZWd1bGFyRnVuY3Rpb24gPSBpc1R5cGUgRnVuY3Rpb25cblxuaXNPYmplY3QgPSBpc1R5cGUgT2JqZWN0XG5cbmlzQXJyYXkgPSBpc1R5cGUgQXJyYXlcblxuaXNFcnJvciA9IGlzVHlwZSBFcnJvclxuXG5pc0RlZmluZWQgPSAoeCkgLT4geD9cblxuaXNVbmRlZmluZWQgPSAoeCkgLT4gIXg/XG5cbkdlbmVyYXRvckZ1bmN0aW9uID0gKC0+IHlpZWxkIG51bGwpLmNvbnN0cnVjdG9yXG5cbmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBpc1R5cGUgR2VuZXJhdG9yRnVuY3Rpb25cblxuaXNQcm9taXNlID0gaXNUeXBlIFByb21pc2VcblxuaXNBc3luY0Z1bmN0aW9uID0gaXNUeXBlICgtPiBhd2FpdCBudWxsKS5jb25zdHJ1Y3RvclxuXG5pc0Z1bmN0aW9uID0gaXNLaW5kIEZ1bmN0aW9uXG5cbmluc3RhbmNlT2YgPSBjdXJyeSAodCwgeCkgLT4geCBpbnN0YW5jZW9mIHRcblxuVHlwZSA9XG4gIGNyZWF0ZTogKHR5cGUpIC0+IGlmIHR5cGU/IHRoZW4gbmV3IHR5cGVcbiAgZGVmaW5lOiAocGFyZW50ID0gT2JqZWN0KSAtPiBjbGFzcyBleHRlbmRzIHBhcmVudFxuXG5zaXplID0gbGVuZ3RoID0gTWV0aG9kLmNyZWF0ZSBkZWZhdWx0OiAoeCkgLT5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvciBcInNpemU6IG5vdCB2YWxpZCBmb3IgdHlwZSAje3guY29uc3RydWN0b3J9XCJcblxuaGFzTGVuZ3RoID0gKHgpIC0+IHgubGVuZ3RoP1xuaGFzQnl0ZUxlbmd0aCA9ICh4KSAtPiB4LmJ5dGVMZW5ndGg/XG5oYXNTaXplID0gKHgpIC0+IHguc2l6ZT9cblxuTWV0aG9kLmRlZmluZSBzaXplLCBoYXNCeXRlTGVuZ3RoLCAoeCkgLT4geC5ieXRlTGVuZ3RoXG5NZXRob2QuZGVmaW5lIHNpemUsIGlzT2JqZWN0LCAoeCkgLT4gKGtleXMgeCkubGVuZ3RoXG5NZXRob2QuZGVmaW5lIHNpemUsIGhhc1NpemUsICh4KSAtPiB4LnNpemVcbk1ldGhvZC5kZWZpbmUgc2l6ZSwgaGFzTGVuZ3RoLCAoeCkgLT4geC5sZW5ndGhcblxuaXNFbXB0eSA9ICh4KSAtPiAoc2l6ZSB4KSA9PSAwXG5cbmV4cG9ydCB7cHJvdG90eXBlLCBpc1Byb3RvdHlwZSwgaXNUcmFuc2l0aXZlUHJvdG90eXBlLFxuICBpc1R5cGUsIGlzS2luZCwgVHlwZSwgaW5zdGFuY2VPZiwgaXNEZWZpbmVkLCBpc1VuZGVmaW5lZCxcbiAgaXNCb29sZWFuLCBpc051bWJlciwgaXNOYU4sIGlzRmluaXRlLCBpc0ludGVnZXIsIGlzRmxvYXQsIGlzQnVmZmVyLFxuICBpc1N0cmluZywgaXNPYmplY3QsIGlzQXJyYXksIGlzUmVnRXhwLCBpc0RhdGUsIGlzUHJvbWlzZSxcbiAgaXNSZWd1bGFyRnVuY3Rpb24sIGlzR2VuZXJhdG9yRnVuY3Rpb24sIGlzQXN5bmNGdW5jdGlvbiwgaXNGdW5jdGlvbixcbiAgc2l6ZSwgbGVuZ3RoLCBpc0VtcHR5fVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=/Users/dyoder/repos/panda-parchment/src/type.coffee