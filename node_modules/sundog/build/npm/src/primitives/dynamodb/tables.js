"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pandaGarden = require("panda-garden");

var _pandaParchment = require("panda-parchment");

var _pandaRiver = require("panda-river");

var _privateUtils = require("../private-utils");

var _queries = _interopRequireDefault(require("./queries"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//===========================================================================
// Tables
//===========================================================================
var DynamoDB,
    indexOf = [].indexOf;

DynamoDB = function (db) {
  var _areIndexesReady, _isTableReady, keysFilter, scan, tableCreate, tableDel, tableEmpty, tableGet, tableUpdate, tableWaitForDeleted, tableWaitForReady;

  ({
    scan
  } = (0, _queries.default)(db));

  tableGet = async function (name) {
    var Table, e;

    try {
      ({
        Table
      } = await db.describeTable({
        TableName: name
      }));
      return Table;
    } catch (error) {
      e = error;
      return (0, _privateUtils.notFound)(e, 400, "ResourceNotFoundException");
    }
  };

  tableCreate = async function (name, keys, attributes, throughput, options = {}) {
    var TableDescription, p;
    p = {
      TableName: name,
      KeySchema: keys,
      AttributeDefinitions: attributes,
      ProvisionedThroughput: throughput
    };
    ({
      TableDescription
    } = await db.createTable((0, _pandaParchment.merge)(p, options)));
    return TableDescription;
  };

  tableUpdate = async function (name, attributes, throughput, options = {}) {
    var TableDescription, p;
    p = {
      TableName: name,
      AttributeDefinitions: attributes
    };

    if (throughput) {
      p.ProvisionedThroughput = throughput;
    }

    ({
      TableDescription
    } = await db.updateTable((0, _pandaParchment.merge)(p, options)));
    return TableDescription;
  };

  tableDel = async function (name) {
    var e;

    try {
      return await db.deleteTable({
        TableName: name
      });
    } catch (error) {
      e = error;
      return (0, _privateUtils.notFound)(e);
    }
  };

  _isTableReady = async function (name) {
    var TableStatus;

    while (true) {
      ({
        TableStatus
      } = await tableGet(name));

      if (!TableStatus) {
        throw new Error(`Cannot find table ${name}`);
      } else if (TableStatus !== "ACTIVE") {
        await (0, _pandaParchment.sleep)(5000);
      } else {
        return true;
      }
    }
  };

  _areIndexesReady = async function (name) {
    var indexes, statuses;

    while (true) {
      ({
        GlobalSecondaryIndexes: indexes
      } = await tableGet(name));

      if (!indexes) {
        return true;
      }

      statuses = (0, _pandaRiver.collect)((0, _pandaRiver.project)("IndexStatus", indexes));

      if ((0, _pandaParchment.empty)((0, _pandaParchment.difference)(statuses, ["ACTIVE"]))) {
        return true;
      } else {
        await (0, _pandaParchment.sleep)(5000);
      }
    }
  }; // The optional second parameter allows the developer to also wait on all global secondary indexes to also be ready.


  tableWaitForReady = async function (name, indexWait) {
    var checks;
    checks = [_isTableReady(name)];

    if (indexWait) {
      checks.push(_areIndexesReady(name));
    }

    return await Promise.all(checks);
  };

  tableWaitForDeleted = async function (name) {
    var TableStatus;

    while (true) {
      ({
        TableStatus
      } = await tableGet(name));

      if (!TableStatus) {
        return true;
      } else {
        await (0, _pandaParchment.sleep)(5000);
      }
    }
  }; // TODO: make this more efficient by throttling to X connections at once. AWS
  // only supports N requests per second from an account, and I don't want this
  // to violate that limit, but we can do better than one at a time.


  keysFilter = (0, _pandaGarden.curry)(function (keys, item) {
    var f;

    f = function (key) {
      return indexOf.call(keys, key) >= 0;
    };

    return (0, _pandaParchment.pick)(f, item);
  });

  tableEmpty = async function (name) {
    var Items, KeySchema, filter, i, j, len, results;
    ({
      KeySchema
    } = await tableGet(name));
    filter = keysFilter((0, _pandaRiver.collect)((0, _pandaRiver.project)("AttributeName", KeySchema)));
    ({
      Items
    } = await scan(name));
    results = [];

    for (j = 0, len = Items.length; j < len; j++) {
      i = Items[j];
      results.push((await del(name, filter(i))));
    }

    return results;
  };

  return {
    tableGet,
    tableCreate,
    tableUpdate,
    tableDel,
    tableWaitForReady,
    tableWaitForDeleted,
    keysFilter,
    tableEmpty
  };
};

var _default = DynamoDB;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/sundog/src/primitives/dynamodb/tables.coffee