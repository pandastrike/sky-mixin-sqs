"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getKey = exports.wrap = exports.parse = exports.to = exports.default = void 0;

var _pandaGarden = require("panda-garden");

var _pandaParchment = require("panda-parchment");

//===========================================================================
// Type Helpers
//===========================================================================
// DynamoDB includes type information mapped into its data strctures.
// It expects data to be input that way, and includes it when fetched.
// These helpers write and parse that type system.
var _mark, _parse, _transform, getKey, isSet, parse, to, wrap;

exports.wrap = wrap;
exports.to = to;
exports.parse = parse;
exports.getKey = getKey;
isSet = (0, _pandaParchment.isType)(Set);

_transform = function (f) {
  return function (x) {
    var k, out, v;

    if ((0, _pandaParchment.isObject)(x)) {
      out = {};

      for (k in x) {
        v = x[k];
        out[k] = _mark("anonymousDynamodbValue", f(v));
      }

      return _mark("namedDynamodbValue", out);
    } else if (x == null) {
      throw new Error("sundog::dynamodb::to Cannot type cast value that is undefined.");
    } else {
      return _mark("anonymousDynamodbValue", f(x));
    }
  };
};

_mark = function (name, object) {
  return Object.defineProperty(object, "name", {
    value: name
  });
};

exports.to = to = {
  S: _transform(function (s) {
    return {
      S: s.toString()
    };
  }),
  N: _transform(function (n) {
    return {
      N: n.toString()
    };
  }),
  B: _transform(function (b) {
    return {
      B: b.toString("base64")
    };
  }),
  SS: _transform(function (a) {
    var i;

    if (isSet(a)) {
      a = Array.from(a);
    }

    return {
      SS: function () {
        var j, len, results;
        results = [];

        for (j = 0, len = a.length; j < len; j++) {
          i = a[j];
          results.push(i.toString());
        }

        return results;
      }()
    };
  }),
  NS: _transform(function (a) {
    var i;

    if (isSet(a)) {
      a = Array.from(a);
    }

    return {
      NS: function () {
        var j, len, results;
        results = [];

        for (j = 0, len = a.length; j < len; j++) {
          i = a[j];
          results.push(i.toString());
        }

        return results;
      }()
    };
  }),
  BS: _transform(function (a) {
    var i;

    if (isSet(a)) {
      a = Array.from(a);
    }

    return {
      BS: function () {
        var j, len, results;
        results = [];

        for (j = 0, len = a.length; j < len; j++) {
          i = a[j];
          results.push(i.toString("base64"));
        }

        return results;
      }()
    };
  }),
  M: _transform(function (m) {
    return {
      M: m
    };
  }),
  L: _transform(function (l) {
    return {
      L: l
    };
  }),
  NULL: _transform(function (n) {
    return {
      NULL: n
    };
  }),
  BOOL: _transform(function (b) {
    return {
      BOOL: b
    };
  }),
  // Extension of DynamoDB types to stringify objects. *Must always be named.*
  JSON: _transform(function (o) {
    return {
      S: JSON.stringify(o)
    };
  })
}; // This handles parsing on the data types native to DynamoDB, including recursive parsing on Maps.

_parse = function (attributes) {
  var dataType, i, name, result, typeObj, v;
  result = {};

  for (name in attributes) {
    typeObj = attributes[name];
    dataType = (0, _pandaParchment.first)((0, _pandaParchment.keys)(typeObj));
    v = (0, _pandaParchment.first)((0, _pandaParchment.values)(typeObj));

    result[name] = function () {
      var j, len, results;

      switch (dataType) {
        case "S":
        case "BOOL":
          return v;

        case "N":
          return Number(v);

        case "B":
          return Buffer.from(v, "base64");

        case "SS":
          return new Set(v);

        case "NS":
          return new Set(function () {
            var j, len, results;
            results = [];

            for (j = 0, len = v.length; j < len; j++) {
              i = v[j];
              results.push(Number(i));
            }

            return results;
          }());

        case "BS":
          return new Set(function () {
            var j, len, results;
            results = [];

            for (j = 0, len = v.length; j < len; j++) {
              i = v[j];
              results.push(Buffer.from(i, "base64"));
            }

            return results;
          }());

        case "NULL":
          if (v) {
            return null;
          } else {
            return void 0;
          }

          break;

        case "L":
          results = [];

          for (j = 0, len = v.length; j < len; j++) {
            i = v[j];
            results.push(parse(i));
          }

          return results;

        case "M":
          return parse(v);

        default:
          throw new Error(`Unable to parse object for DynamoDB attribute type. ${dataType}`);
      }
    }();
  }

  return result;
}; // This wraps _parse to extend parsing to data types we define.


exports.parse = parse = (0, _pandaGarden.curry)(function (types, data) {
  var name, result, type, value;
  result = _parse(data);

  for (name in result) {
    value = result[name];
    type = types[name];

    result[name] = function () {
      switch (type) {
        // NoOps on the base types
        case "S":
        case "N":
        case "BOOL":
        case "SS":
        case "L":
        case "B":
        case "NS":
        case "BS":
        case "NULL":
        case "M":
          return value;
        // Extensions

        case "JSON":
          return JSON.parse(value);

        default:
          throw new Error(`For ${name}, ${type} is not a known DynamoDB type or sundog extension.`);
      }
    }();
  }

  return result;
}); // Accept an incoming object to store in DynamoDB, rejecting fields that do not have a defined type or are not suitable for DynamoDB.
// From their docs:
// > Attribute values cannot be null. String and Binary type attributes must have lengths greater than zero. Set type attributes cannot be empty.

exports.wrap = wrap = (0, _pandaGarden.curry)(function (types, data) {
  var name, out, type, value;
  out = [];

  for (name in data) {
    value = data[name];

    if ((type = types[name]) != null && value != null) {
      switch (type) {
        case "S":
        case "SS":
        case "NS":
        case "BS":
        case "L":
        case "B":
          if (!(0, _pandaParchment.empty)(value)) {
            out.push(to[type]({
              [name]: value
            }));
          }

          break;

        case "N":
          if (!Number.isNaN(value)) {
            out.push(to[type]({
              [name]: value
            }));
          }

          break;

        case "BOOL":
        case "NULL":
          if ((0, _pandaParchment.isBoolean)(value)) {
            out.push(to[type]({
              [name]: value
            }));
          }

          break;

        case "M":
          if ((0, _pandaParchment.isObject)(value) && !(0, _pandaParchment.empty)((0, _pandaParchment.keys)(value))) {
            out.push(to[type]({
              [name]: value
            }));
          }

          break;

        case "JSON":
          if (!(0, _pandaParchment.empty)(JSON.stringify(value))) {
            out.push(to[type]({
              [name]: value
            }));
          }

          break;

        default:
          throw new Error(`Unable to wrap field '${name}'. Unknown DyanmoDB data type, '${type}'`);
      }
    }
  }

  return (0, _pandaParchment.merge)(...out);
}); // Given data and a model definition, return the key for this object.

exports.getKey = getKey = (0, _pandaGarden.curry)(function (definition, data) {
  var f, key, partition, sort;
  key = {};
  [partition, sort] = definition.key;

  if (sort != null) {
    // If there is a sort key, data must be an object and wrap both.
    f = to[definition.types[partition]];
    (0, _pandaParchment.include)(key, f({
      [partition]: data[partition]
    }));
    f = to[definition.types[sort]];
    (0, _pandaParchment.include)(key, f({
      [sort]: data[sort]
    }));
  } else {
    // With no sort key, it's possible we've been given just a value to be wrapped as the partition key.
    f = to[definition.types[partition]];

    if ((0, _pandaParchment.isObject)(data)) {
      (0, _pandaParchment.include)(key, f({
        [partition]: data[partition]
      }));
    } else {
      (0, _pandaParchment.include)(key, f({
        [partition]: data
      }));
    }
  }

  return key;
});
var _default = {
  to,
  parse,
  wrap,
  getKey
};
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/sundog/src/primitives/dynamodb/helpers/types.coffee