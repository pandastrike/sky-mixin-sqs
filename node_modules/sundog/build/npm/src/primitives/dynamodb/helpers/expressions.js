"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dropEx = exports.numberEx = exports.updateEx = exports.qv = exports.parseConditional = exports.default = void 0;

var _pandaGarden = require("panda-garden");

var _pandaGenerics = require("panda-generics");

var _pandaParchment = require("panda-parchment");

var _types = require("./types");

// Expression helpers make it easier to write the arcane string DSL that DynamoDB wants to achieve complex operations.
var DELIMITER,
    _qv,
    dropEx,
    numberEx,
    parseConditional,
    qv,
    updateEx,
    indexOf = [].indexOf;

exports.updateEx = updateEx;
exports.qv = qv;
exports.parseConditional = parseConditional;
exports.numberEx = numberEx;
exports.dropEx = dropEx;
DELIMITER = "<###SUNDOGDYNAMODB###>";

exports.parseConditional = parseConditional = function (ex, count = 0) {
  var Values, re, result;

  if (!ex) {
    return {
      result: false,
      values: false,
      count
    };
  }

  Values = {};
  re = new RegExp(`${DELIMITER}.+?${DELIMITER}`, "g");
  result = ex.replace(re, function (match) {
    var obj, placeholder;
    [, obj] = match.split(DELIMITER);
    placeholder = `:param${count}`;
    count++;
    Values[placeholder] = JSON.parse(obj);
    return placeholder; // Return placeholder to the expression we are processing.
  });
  return {
    result,
    values: Values,
    count
  };
}; // qv produces query strings with delimited values Sundog can parse.


_qv = function (o) {
  var delimit;

  delimit = function (s) {
    return `${DELIMITER}${s}${DELIMITER}`;
  }; // Determine if this is a DynamoDB value, and whether is anonymous or named.


  if (o.name === "anonymousDynamodbValue") {
    return delimit(JSON.stringify(o));
  } else if (o.name === "namedDynamodbValue") {
    return delimit(JSON.stringify((0, _pandaParchment.first)((0, _pandaParchment.values)(o))));
  } else {
    throw new Error(`Unable to create stringified query value for unrecongied object ${JSON.stringify(o)}`);
  }
};

exports.qv = qv = _pandaGenerics.Method.create({
  default: function (...args) {
    console.error("sundog:dynamodb:qv, unable to match to method on", args);
    throw new Error();
  }
});

_pandaGenerics.Method.define(qv, _pandaParchment.isFunction, function (f) {
  return function (x) {
    return _qv(f(x));
  };
});

_pandaGenerics.Method.define(qv, _pandaParchment.isObject, function (o) {
  return _qv(o);
});

exports.numberEx = numberEx = function (field, amount) {
  return `ADD ${field} ${qv(_types.to.N(amount))}`;
}; // Always pass qv a named element here to ensure JSON extended type works here.


exports.updateEx = updateEx = (0, _pandaGarden.curry)(function ({
  key,
  types
}, data) {
  var chunks, f, k, type, v;
  chunks = [];

  for (k in data) {
    v = data[k];

    if (!(indexOf.call(key, k) < 0)) {
      continue;
    }

    if (v == null) {
      continue;
    }

    type = types[k];

    if (!type) {
      throw new Error(`${k} does not have a type defined.`);
    }

    f = _types.to[type];

    if (f == null) {
      throw new Error(`bad type: ${type}`);
    }

    switch (type) {
      case "S":
      case "SS":
      case "L":
      case "B":
      case "NS":
      case "BS":
        if ((0, _pandaParchment.empty)(v)) {
          continue;
        }

        break;

      case "N":
        if (Number.isNaN(v)) {
          continue;
        }

        break;

      case "BOOL":
      case "NULL":
        if (!isBoolean(v)) {
          continue;
        }

        break;

      case "M":
        if (!((0, _pandaParchment.isObject)(v) && !(0, _pandaParchment.empty)(keys(v)))) {
          continue;
        }

        break;

      case "JSON":
        if ((0, _pandaParchment.empty)(JSON.stringify(v))) {
          continue;
        }

        break;

      case "SET":
        if (!isType(Set, v)) {
          continue;
        }

        break;

      default:
        throw new Error("bad update type conversion");
    }

    chunks.push(`${k} = ${qv(f({
      k: v
    }))}`);
  }

  if (!(0, _pandaParchment.empty)(chunks)) {
    return `SET ${chunks.join(", ")}`;
  } else {
    return "";
  }
});

exports.dropEx = dropEx = function (drop) {
  if (drop && !(0, _pandaParchment.empty)(drop)) {
    return ` REMOVE ${drop.join(", ") // The leading space is important!!
    }`;
  } else {
    return "";
  }
};

var _default = {
  parseConditional,
  qv,
  updateEx,
  numberEx,
  dropEx
};
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/sundog/src/primitives/dynamodb/helpers/expressions.coffee