"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pandaParchment = require("panda-parchment");

var _pandaRiver = require("panda-river");

var _privateUtils = require("./private-utils");

var _lift = require("../lift");

var cloudformationPrimitive;

cloudformationPrimitive = function (SDK) {
  return function (configuration) {
    var cfo, create, deleteWait, destroy, get, list, output, publishWait, update, validStatuses;
    cfo = (0, _lift.applyConfiguration)(configuration, SDK.CloudFormation);

    get = async function (StackName) {
      try {
        return (0, _pandaParchment.first)((await cfo.describeStacks({
          StackName
        })).Stacks);
      } catch (error) {
        return false;
      }
    };

    output = async function (OutputKey, StackName) {
      var data, outputs;
      data = await cfo.describeStacks({
        StackName
      });
      outputs = (0, _pandaRiver.collect)((0, _privateUtils.where)({
        OutputKey
      }, data.Stacks[0].Outputs));
      return outputs[0].OutputValue;
    }; // Confirm the stack is viable and online.


    publishWait = async function (name) {
      var StackStatus, StackStatusReason;

      while (true) {
        ({
          StackStatus,
          StackStatusReason
        } = await get(name));

        switch (StackStatus) {
          case "CREATE_IN_PROGRESS":
          case "UPDATE_IN_PROGRESS":
          case "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS":
            await (0, _pandaParchment.sleep)(5000);
            break;

          case "CREATE_COMPLETE":
          case "UPDATE_COMPLETE":
            return true;

          default:
            throw new Error(`Stack creation failed. ${StackStatus} ${StackStatusReason}`);
        }
      }
    }; // Confirm the stack is fully and properly deleted.


    deleteWait = async function (name) {
      var StackStatus, StackStatusReason;

      while (true) {
        ({
          StackStatus,
          StackStatusReason
        } = await get(name));

        if (!StackStatus) {
          return true;
        }

        switch (StackStatus) {
          case "DELETE_IN_PROGRESS":
            await (0, _pandaParchment.sleep)(5000);
            break;

          case "DELETE_COMPLETE":
            return true;

          default:
            throw new Error(`Stack deletion failed. ${StackStatus} ${StackStatusReason}`);
        }
      }
    };

    create = async function (stack) {
      await cfo.createStack(stack);
      return await publishWait(stack.StackName);
    };

    update = async function (stack) {
      await cfo.updateStack(stack);
      return await publishWait(stack.StackName);
    };

    destroy = async function (StackName) {
      if (!(await get(StackName))) {
        return;
      }

      await cfo.deleteStack({
        StackName
      });
      return await deleteWait(StackName);
    };

    list = async function (current = [], token) {
      var NextToken, StackSummaries, params;
      params = {
        StackStatusFilter: validStatuses
      };

      if (token) {
        params.NextToken = token;
      }

      ({
        NextToken,
        StackSummaries
      } = await cfo.listStacks(params));

      if (NextToken) {
        return await list((0, _pandaParchment.cat)(current, StackSummaries), NextToken);
      } else {
        return (0, _pandaParchment.cat)(current, StackSummaries);
      }
    };

    validStatuses = ["CREATE_IN_PROGRESS", "CREATE_COMPLETE", "ROLLBACK_IN_PROGRESS", "ROLLBACK_FAILED", "ROLLBACK_COMPLETE", "DELETE_IN_PROGRESS", "UPDATE_IN_PROGRESS", "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS", "UPDATE_COMPLETE", "UPDATE_ROLLBACK_IN_PROGRESS", "UPDATE_ROLLBACK_FAILED", "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS", "UPDATE_ROLLBACK_COMPLETE"];
    return {
      get,
      output,
      publishWait,
      deleteWait,
      create,
      update,
      delete: destroy,
      list,
      validStatuses
    };
  };
};

var _default = cloudformationPrimitive;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9zdW5kb2cvc3JjL3ByaW1pdGl2ZXMvY2xvdWRmb3JtYXRpb24uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFIQSxJQUFBLHVCQUFBOztBQUtBLHVCQUFBLEdBQTBCLFVBQUEsR0FBQSxFQUFBO1NBQ3hCLFVBQUEsYUFBQSxFQUFBO0FBQ0UsUUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBLFVBQUEsRUFBQSxPQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsV0FBQSxFQUFBLE1BQUEsRUFBQSxhQUFBO0FBQUEsSUFBQSxHQUFBLEdBQU0sOEJBQUEsYUFBQSxFQUFrQyxHQUFHLENBQXJDLGNBQUEsQ0FBTjs7QUFFQSxJQUFBLEdBQUEsR0FBTSxnQkFBQSxTQUFBLEVBQUE7QUFDSixVQUFBO2VBQ0UsMkJBQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBSCxjQUFBLENBQW1CO0FBQTFCLFVBQUE7QUFBMEIsU0FBbkIsQ0FBUCxFQURSLE1BQ0UsQztBQURGLE9BQUEsQ0FBQSxPQUFBLEtBQUEsRUFBQTtlQUFBLEs7O0FBREksS0FBTjs7QUFNQSxJQUFBLE1BQUEsR0FBUyxnQkFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBO0FBQ1AsVUFBQSxJQUFBLEVBQUEsT0FBQTtBQUFBLE1BQUEsSUFBQSxHQUFPLE1BQU0sR0FBRyxDQUFILGNBQUEsQ0FBbUI7QUFBekIsUUFBQTtBQUF5QixPQUFuQixDQUFiO0FBQ0EsTUFBQSxPQUFBLEdBQVUseUJBQVEseUJBQU07QUFBTixRQUFBO0FBQU0sT0FBTixFQUFtQixJQUFJLENBQUMsTUFBTCxDQUFZLENBQVosRUFBM0IsT0FBUSxDQUFSLENBQVY7YUFDQSxPQUFRLENBQUEsQ0FBQSxDQUFSLENBQVcsVztBQVhiLEtBUUEsQ0FURixDOzs7QUFlRSxJQUFBLFdBQUEsR0FBYyxnQkFBQSxJQUFBLEVBQUE7QUFDWixVQUFB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O1dBR0E7QUFBQSxNQUFBLEdBQUE7QUFBQSxNQUFBLE1BQUE7QUFBQSxNQUFBLFdBQUE7QUFBQSxNQUFBLFVBQUE7QUFBQSxNQUFBLE1BQUE7QUFBQSxNQUFBLE1BQUE7QUFPRSxNQUFBLE1BQUEsRUFQRixPQUFBO0FBQUEsTUFBQSxJQUFBO0FBU0UsTUFBQTtBQVRGLEs7QUFyRUYsRztBQUR3QixDQUExQjs7ZUFrRmUsdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2ZpcnN0LCBzbGVlcCwgY2F0fSBmcm9tIFwicGFuZGEtcGFyY2htZW50XCJcbmltcG9ydCB7Y29sbGVjdH0gZnJvbSBcInBhbmRhLXJpdmVyXCJcbmltcG9ydCB7d2hlcmV9IGZyb20gXCIuL3ByaXZhdGUtdXRpbHNcIlxuaW1wb3J0IHthcHBseUNvbmZpZ3VyYXRpb259IGZyb20gXCIuLi9saWZ0XCJcblxuY2xvdWRmb3JtYXRpb25QcmltaXRpdmUgPSAoU0RLKSAtPlxuICAoY29uZmlndXJhdGlvbikgLT5cbiAgICBjZm8gPSBhcHBseUNvbmZpZ3VyYXRpb24gY29uZmlndXJhdGlvbiwgU0RLLkNsb3VkRm9ybWF0aW9uXG5cbiAgICBnZXQgPSAoU3RhY2tOYW1lKSAtPlxuICAgICAgdHJ5XG4gICAgICAgIGZpcnN0IChhd2FpdCBjZm8uZGVzY3JpYmVTdGFja3Moe1N0YWNrTmFtZX0pKS5TdGFja3NcbiAgICAgIGNhdGNoXG4gICAgICAgIGZhbHNlXG5cbiAgICBvdXRwdXQgPSAoT3V0cHV0S2V5LCBTdGFja05hbWUpIC0+XG4gICAgICBkYXRhID0gYXdhaXQgY2ZvLmRlc2NyaWJlU3RhY2tzIHtTdGFja05hbWV9XG4gICAgICBvdXRwdXRzID0gY29sbGVjdCB3aGVyZSB7T3V0cHV0S2V5fSwgZGF0YS5TdGFja3NbMF0uT3V0cHV0c1xuICAgICAgb3V0cHV0c1swXS5PdXRwdXRWYWx1ZVxuXG4gICAgIyBDb25maXJtIHRoZSBzdGFjayBpcyB2aWFibGUgYW5kIG9ubGluZS5cbiAgICBwdWJsaXNoV2FpdCA9IChuYW1lKSAtPlxuICAgICAgd2hpbGUgdHJ1ZVxuICAgICAgICB7U3RhY2tTdGF0dXMsIFN0YWNrU3RhdHVzUmVhc29ufSA9IGF3YWl0IGdldCBuYW1lXG4gICAgICAgIHN3aXRjaCBTdGFja1N0YXR1c1xuICAgICAgICAgIHdoZW4gXCJDUkVBVEVfSU5fUFJPR1JFU1NcIiwgXCJVUERBVEVfSU5fUFJPR1JFU1NcIiwgXCJVUERBVEVfQ09NUExFVEVfQ0xFQU5VUF9JTl9QUk9HUkVTU1wiXG4gICAgICAgICAgICBhd2FpdCBzbGVlcCA1MDAwXG4gICAgICAgICAgd2hlbiBcIkNSRUFURV9DT01QTEVURVwiLCBcIlVQREFURV9DT01QTEVURVwiXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciBcIlwiXCJcbiAgICAgICAgICAgIFN0YWNrIGNyZWF0aW9uIGZhaWxlZC4gI3tTdGFja1N0YXR1c30gI3tTdGFja1N0YXR1c1JlYXNvbn1cbiAgICAgICAgICAgIFwiXCJcIlxuXG4gICAgIyBDb25maXJtIHRoZSBzdGFjayBpcyBmdWxseSBhbmQgcHJvcGVybHkgZGVsZXRlZC5cbiAgICBkZWxldGVXYWl0ID0gKG5hbWUpIC0+XG4gICAgICB3aGlsZSB0cnVlXG4gICAgICAgIHtTdGFja1N0YXR1cywgU3RhY2tTdGF0dXNSZWFzb259ID0gYXdhaXQgZ2V0IG5hbWVcbiAgICAgICAgcmV0dXJuIHRydWUgaWYgIVN0YWNrU3RhdHVzXG4gICAgICAgIHN3aXRjaCBTdGFja1N0YXR1c1xuICAgICAgICAgIHdoZW4gXCJERUxFVEVfSU5fUFJPR1JFU1NcIlxuICAgICAgICAgICAgYXdhaXQgc2xlZXAgNTAwMFxuICAgICAgICAgIHdoZW4gXCJERUxFVEVfQ09NUExFVEVcIlxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IgXCJcIlwiXG4gICAgICAgICAgICBTdGFjayBkZWxldGlvbiBmYWlsZWQuICN7U3RhY2tTdGF0dXN9ICN7U3RhY2tTdGF0dXNSZWFzb259XG4gICAgICAgICAgICBcIlwiXCJcblxuICAgIGNyZWF0ZSA9IChzdGFjaykgLT5cbiAgICAgIGF3YWl0IGNmby5jcmVhdGVTdGFjayBzdGFja1xuICAgICAgYXdhaXQgcHVibGlzaFdhaXQgc3RhY2suU3RhY2tOYW1lXG5cbiAgICB1cGRhdGUgPSAoc3RhY2spIC0+XG4gICAgICBhd2FpdCBjZm8udXBkYXRlU3RhY2sgc3RhY2tcbiAgICAgIGF3YWl0IHB1Ymxpc2hXYWl0IHN0YWNrLlN0YWNrTmFtZVxuXG4gICAgZGVzdHJveSA9IChTdGFja05hbWUpIC0+XG4gICAgICByZXR1cm4gaWYgIShhd2FpdCBnZXQgU3RhY2tOYW1lKVxuICAgICAgYXdhaXQgY2ZvLmRlbGV0ZVN0YWNrIHtTdGFja05hbWV9XG4gICAgICBhd2FpdCBkZWxldGVXYWl0IFN0YWNrTmFtZVxuXG4gICAgbGlzdCA9IChjdXJyZW50PVtdLCB0b2tlbikgLT5cbiAgICAgIHBhcmFtcyA9IFN0YWNrU3RhdHVzRmlsdGVyOiB2YWxpZFN0YXR1c2VzXG4gICAgICBwYXJhbXMuTmV4dFRva2VuID0gdG9rZW4gaWYgdG9rZW5cblxuICAgICAge05leHRUb2tlbiwgU3RhY2tTdW1tYXJpZXN9ID0gYXdhaXQgY2ZvLmxpc3RTdGFja3MgcGFyYW1zXG4gICAgICBpZiBOZXh0VG9rZW5cbiAgICAgICAgYXdhaXQgbGlzdCBjYXQoY3VycmVudCwgU3RhY2tTdW1tYXJpZXMpLCBOZXh0VG9rZW5cbiAgICAgIGVsc2VcbiAgICAgICAgY2F0IGN1cnJlbnQsIFN0YWNrU3VtbWFyaWVzXG5cbiAgICB2YWxpZFN0YXR1c2VzID0gWyBcIkNSRUFURV9JTl9QUk9HUkVTU1wiLCBcIkNSRUFURV9DT01QTEVURVwiLCBcIlJPTExCQUNLX0lOX1BST0dSRVNTXCIsIFwiUk9MTEJBQ0tfRkFJTEVEXCIsIFwiUk9MTEJBQ0tfQ09NUExFVEVcIiwgXCJERUxFVEVfSU5fUFJPR1JFU1NcIiwgXCJVUERBVEVfSU5fUFJPR1JFU1NcIiwgXCJVUERBVEVfQ09NUExFVEVfQ0xFQU5VUF9JTl9QUk9HUkVTU1wiLCBcIlVQREFURV9DT01QTEVURVwiLCBcIlVQREFURV9ST0xMQkFDS19JTl9QUk9HUkVTU1wiLCBcIlVQREFURV9ST0xMQkFDS19GQUlMRURcIiwgXCJVUERBVEVfUk9MTEJBQ0tfQ09NUExFVEVfQ0xFQU5VUF9JTl9QUk9HUkVTU1wiLCBcIlVQREFURV9ST0xMQkFDS19DT01QTEVURVwiXVxuXG5cbiAgICB7XG4gICAgICBnZXRcbiAgICAgIG91dHB1dFxuICAgICAgcHVibGlzaFdhaXRcbiAgICAgIGRlbGV0ZVdhaXRcbiAgICAgIGNyZWF0ZVxuICAgICAgdXBkYXRlXG4gICAgICBkZWxldGU6IGRlc3Ryb3lcbiAgICAgIGxpc3RcbiAgICAgIHZhbGlkU3RhdHVzZXNcbiAgICB9XG5cbmV4cG9ydCBkZWZhdWx0IGNsb3VkZm9ybWF0aW9uUHJpbWl0aXZlXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=/Users/david/repos/sundog/src/primitives/cloudformation.coffee