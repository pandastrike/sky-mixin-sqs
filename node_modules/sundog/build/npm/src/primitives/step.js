"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pandaParchment = require("panda-parchment");

var _lift = require("../lift");

// Primitives for the service StepFunctions.
var stepPrimitive;

stepPrimitive = function (SDK) {
  return function (configuration) {
    var list, listExes, lookup, start, step, stop, stopAll;
    step = (0, _lift.applyConfiguration)(configuration, SDK.StepFunctions);

    start = function (arn, input, name) {
      return step.startExecution({
        stateMachineArn: arn,
        input: input ? (0, _pandaParchment.toJSON)(input) : void 0,
        name: name
      });
    };

    stop = function (arn, options) {
      return step.stopExecution((0, _pandaParchment.merge)({
        executionArn: arn
      }, options));
    };

    listExes = async function (arn, status, current = [], next) {
      var executions, nextToken;
      ({
        nextToken,
        executions
      } = await step.listExecutions({
        stateMachineArn: arn,
        statusFilter: status,
        maxResults: 1000,
        nextToken: next
      }));
      current = (0, _pandaParchment.cat)(current, executions);

      if (nextToken) {
        return listExes(arn, status, current, nextToken);
      } else {
        return current;
      }
    };

    list = async function (current = [], next) {
      var nextToken, stateMachines;
      ({
        nextToken,
        stateMachines
      } = await step.listStateMachines({
        maxResults: 1000,
        nextToken: next
      }));
      current = (0, _pandaParchment.cat)(current, stateMachines);

      if (nextToken) {
        return list(current, nextToken);
      } else {
        return current;
      }
    };

    lookup = async function (name) {
      var i, len, machine, machines;
      machines = await list();

      for (i = 0, len = machines.length; i < len; i++) {
        machine = machines[i];

        if (machine.name === name) {
          return machine;
        }
      }

      return false;
    };

    stopAll = async function (name) {
      var executionArn, expressions, i, len, results, stateMachineArn;
      ({
        stateMachineArn
      } = await lookup(name));
      expressions = await listExes(stateMachineArn, "RUNNING");
      results = [];

      for (i = 0, len = expressions.length; i < len; i++) {
        ({
          executionArn
        } = expressions[i]);
        results.push((await stop(executionArn)));
      }

      return results;
    };

    return {
      start,
      stop,
      list,
      lookup,
      listExes,
      stopAll
    };
  };
};

var _default = stepPrimitive;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9zdW5kb2cvc3JjL3ByaW1pdGl2ZXMvc3RlcC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOztBQUNBOztBQUZBO0FBQUEsSUFBQSxhQUFBOztBQUlBLGFBQUEsR0FBZ0IsVUFBQSxHQUFBLEVBQUE7U0FDZCxVQUFBLGFBQUEsRUFBQTtBQUNFLFFBQUEsSUFBQSxFQUFBLFFBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQTtBQUFBLElBQUEsSUFBQSxHQUFPLDhCQUFBLGFBQUEsRUFBa0MsR0FBRyxDQUFyQyxhQUFBLENBQVA7O0FBRUEsSUFBQSxLQUFBLEdBQVEsVUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQTthQUNOLElBQUksQ0FBSixjQUFBLENBQ0U7QUFBQSxRQUFBLGVBQUEsRUFBQSxHQUFBO0FBQ0EsUUFBQSxLQUFBLEVBQVUsS0FBSCxHQUFjLDRCQUFkLEtBQWMsQ0FBZCxHQUFnQyxLQUR2QyxDQUFBO0FBRUEsUUFBQSxJQUFBLEVBQU07QUFGTixPQURGLEM7QUFETSxLQUFSOztBQU1BLElBQUEsSUFBQSxHQUFPLFVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQTthQUNMLElBQUksQ0FBSixhQUFBLENBQW1CLDJCQUFNO0FBQUMsUUFBQSxZQUFBLEVBQWM7QUFBZixPQUFOLEVBQW5CLE9BQW1CLENBQW5CLEM7QUFESyxLQUFQOztBQUdBLElBQUEsUUFBQSxHQUFXLGdCQUFBLEdBQUEsRUFBQSxNQUFBLEVBQWMsT0FBQSxHQUFkLEVBQUEsRUFBQSxJQUFBLEVBQUE7QUFDVCxVQUFBLFVBQUEsRUFBQSxTQUFBO0FBQUEsT0FBQTtBQUFBLFFBQUEsU0FBQTtBQUFBLFFBQUE7QUFBQSxVQUEwQixNQUFNLElBQUksQ0FBSixjQUFBLENBQW9CO0FBQ2xELFFBQUEsZUFBQSxFQURrRCxHQUFBO0FBRWxELFFBQUEsWUFBQSxFQUZrRCxNQUFBO0FBR2xELFFBQUEsVUFBQSxFQUhrRCxJQUFBO0FBSWxELFFBQUEsU0FBQSxFQUFXO0FBSnVDLE9BQXBCLENBQWhDO0FBT0EsTUFBQSxPQUFBLEdBQVUseUJBQUEsT0FBQSxFQUFBLFVBQUEsQ0FBVjs7QUFDQSxVQUFBLFNBQUEsRUFBQTtlQUNFLFFBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFERixTQUNFLEM7QUFERixPQUFBLE1BQUE7ZUFBQSxPOztBQVRTLEtBQVg7O0FBZUEsSUFBQSxJQUFBLEdBQU8sZ0JBQUMsT0FBQSxHQUFELEVBQUEsRUFBQSxJQUFBLEVBQUE7QUFDTCxVQUFBLFNBQUEsRUFBQSxhQUFBO0FBQUEsT0FBQTtBQUFBLFFBQUEsU0FBQTtBQUFBLFFBQUE7QUFBQSxVQUE2QixNQUFNLElBQUksQ0FBSixpQkFBQSxDQUNqQztBQUFBLFFBQUEsVUFBQSxFQUFBLElBQUE7QUFDQSxRQUFBLFNBQUEsRUFBVztBQURYLE9BRGlDLENBQW5DO0FBSUEsTUFBQSxPQUFBLEdBQVUseUJBQUEsT0FBQSxFQUFBLGFBQUEsQ0FBVjs7QUFDQSxVQUFBLFNBQUEsRUFBQTtlQUNFLElBQUEsQ0FBQSxPQUFBLEVBREYsU0FDRSxDO0FBREYsT0FBQSxNQUFBO2VBQUEsTzs7QUFOSyxLQUFQOztBQVdBLElBQUEsTUFBQSxHQUFTLGdCQUFBLElBQUEsRUFBQTtBQUNQLFVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsUUFBQTtBQUFBLE1BQUEsUUFBQSxHQUFXLE1BQU0sSUFBTixFQUFYOztBQUNBLFdBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxHQUFBLEdBQUEsUUFBQSxDQUFBLE1BQUEsRUFBQSxDQUFBLEdBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBOzs7QUFDRSxZQUFrQixPQUFPLENBQVAsSUFBQSxLQUFsQixJQUFBLEVBQUE7QUFBQSxpQkFBQSxPQUFBOztBQURGOzthQUdBLEs7QUFMTyxLQUFUOztBQU9BLElBQUEsT0FBQSxHQUFVLGdCQUFBLElBQUEsRUFBQTtBQUNSLFVBQUEsWUFBQSxFQUFBLFdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxlQUFBO0FBQUEsT0FBQTtBQUFBLFFBQUE7QUFBQSxVQUFvQixNQUFNLE1BQUEsQ0FBMUIsSUFBMEIsQ0FBMUI7QUFDQSxNQUFBLFdBQUEsR0FBYyxNQUFNLFFBQUEsQ0FBQSxlQUFBLEVBQU4sU0FBTSxDQUFwQjtBQUNBLE1BQUEsT0FBQSxHQUFBLEVBQUE7O0FBQUEsV0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLEdBQUEsR0FBQSxXQUFBLENBQUEsTUFBQSxFQUFBLENBQUEsR0FBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUE7U0FBSTtBQUFBLFVBQUE7QUFBQSxZQUFBLFdBQUEsQ0FBQSxDQUFBLEM7Z0JBQ0YsSSxFQUFBLE1BQU0sSUFBQSxDQUFOLFlBQU0sQztBQURSOzs7QUFIUSxLQUFWOztXQU9BO0FBQUEsTUFBQSxLQUFBO0FBQUEsTUFBQSxJQUFBO0FBQUEsTUFBQSxJQUFBO0FBQUEsTUFBQSxNQUFBO0FBQUEsTUFBQSxRQUFBO0FBQUEsTUFBQTtBQUFBLEs7QUFwREYsRztBQURjLENBQWhCOztlQXdEZSxhIiwic291cmNlc0NvbnRlbnQiOlsiIyBQcmltaXRpdmVzIGZvciB0aGUgc2VydmljZSBTdGVwRnVuY3Rpb25zLlxuaW1wb3J0IHt0b0pTT04sIG1lcmdlLCBjYXR9IGZyb20gXCJwYW5kYS1wYXJjaG1lbnRcIlxuaW1wb3J0IHthcHBseUNvbmZpZ3VyYXRpb259IGZyb20gXCIuLi9saWZ0XCJcblxuc3RlcFByaW1pdGl2ZSA9IChTREspIC0+XG4gIChjb25maWd1cmF0aW9uKSAtPlxuICAgIHN0ZXAgPSBhcHBseUNvbmZpZ3VyYXRpb24gY29uZmlndXJhdGlvbiwgU0RLLlN0ZXBGdW5jdGlvbnNcblxuICAgIHN0YXJ0ID0gKGFybiwgaW5wdXQsIG5hbWUpIC0+XG4gICAgICBzdGVwLnN0YXJ0RXhlY3V0aW9uXG4gICAgICAgIHN0YXRlTWFjaGluZUFybjogYXJuXG4gICAgICAgIGlucHV0OiBpZiBpbnB1dCB0aGVuIHRvSlNPTiBpbnB1dCBlbHNlIHVuZGVmaW5lZFxuICAgICAgICBuYW1lOiBuYW1lXG5cbiAgICBzdG9wID0gKGFybiwgb3B0aW9ucykgLT5cbiAgICAgIHN0ZXAuc3RvcEV4ZWN1dGlvbiBtZXJnZSB7ZXhlY3V0aW9uQXJuOiBhcm59LCBvcHRpb25zXG5cbiAgICBsaXN0RXhlcyA9IChhcm4sIHN0YXR1cywgY3VycmVudD1bXSwgbmV4dCkgLT5cbiAgICAgIHtuZXh0VG9rZW4sIGV4ZWN1dGlvbnN9ID0gYXdhaXQgc3RlcC5saXN0RXhlY3V0aW9ucyB7XG4gICAgICAgIHN0YXRlTWFjaGluZUFybjogYXJuXG4gICAgICAgIHN0YXR1c0ZpbHRlcjogc3RhdHVzXG4gICAgICAgIG1heFJlc3VsdHM6IDEwMDBcbiAgICAgICAgbmV4dFRva2VuOiBuZXh0XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnQgPSBjYXQgY3VycmVudCwgZXhlY3V0aW9uc1xuICAgICAgaWYgbmV4dFRva2VuXG4gICAgICAgIGxpc3RFeGVzIGFybiwgc3RhdHVzLCBjdXJyZW50LCBuZXh0VG9rZW5cbiAgICAgIGVsc2VcbiAgICAgICAgY3VycmVudFxuXG5cbiAgICBsaXN0ID0gKGN1cnJlbnQ9W10sIG5leHQpIC0+XG4gICAgICB7bmV4dFRva2VuLCBzdGF0ZU1hY2hpbmVzfSA9IGF3YWl0IHN0ZXAubGlzdFN0YXRlTWFjaGluZXNcbiAgICAgICAgbWF4UmVzdWx0czogMTAwMFxuICAgICAgICBuZXh0VG9rZW46IG5leHRcblxuICAgICAgY3VycmVudCA9IGNhdCBjdXJyZW50LCBzdGF0ZU1hY2hpbmVzXG4gICAgICBpZiBuZXh0VG9rZW5cbiAgICAgICAgbGlzdCBjdXJyZW50LCBuZXh0VG9rZW5cbiAgICAgIGVsc2VcbiAgICAgICAgY3VycmVudFxuXG4gICAgbG9va3VwID0gKG5hbWUpIC0+XG4gICAgICBtYWNoaW5lcyA9IGF3YWl0IGxpc3QoKVxuICAgICAgZm9yIG1hY2hpbmUgaW4gbWFjaGluZXNcbiAgICAgICAgcmV0dXJuIG1hY2hpbmUgaWYgbWFjaGluZS5uYW1lID09IG5hbWVcblxuICAgICAgZmFsc2VcblxuICAgIHN0b3BBbGwgPSAobmFtZSkgLT5cbiAgICAgIHtzdGF0ZU1hY2hpbmVBcm59ID0gYXdhaXQgbG9va3VwIG5hbWVcbiAgICAgIGV4cHJlc3Npb25zID0gYXdhaXQgbGlzdEV4ZXMgc3RhdGVNYWNoaW5lQXJuLCBcIlJVTk5JTkdcIlxuICAgICAgZm9yIHtleGVjdXRpb25Bcm59IGluIGV4cHJlc3Npb25zXG4gICAgICAgIGF3YWl0IHN0b3AgZXhlY3V0aW9uQXJuXG5cblxuICAgIHtzdGFydCwgc3RvcCwgbGlzdCwgbG9va3VwLCBsaXN0RXhlcywgc3RvcEFsbH1cblxuXG5leHBvcnQgZGVmYXVsdCBzdGVwUHJpbWl0aXZlXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=/Users/david/repos/sundog/src/primitives/step.coffee