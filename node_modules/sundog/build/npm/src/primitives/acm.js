"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pandaParchment = require("panda-parchment");

var _pandaRiver = require("panda-river");

var _privateUtils = require("./private-utils");

var _url = require("../helpers/url");

var _lift = require("../lift");

var acmPrimitive,
    indexOf = [].indexOf;

acmPrimitive = function (SDK) {
  return function (configuration) {
    var acm, apex, fetch, getCertList, match, wild;
    acm = (0, _lift.applyConfiguration)(configuration, SDK.ACM);

    wild = function (name) {
      return (0, _url.regularlyQualify)("*." + (0, _url.root)(name));
    };

    apex = function (name) {
      return (0, _url.regularlyQualify)((0, _url.root)(name));
    };

    getCertList = async function () {
      var data;
      data = await acm.listCertificates({
        CertificateStatuses: ["ISSUED"]
      });
      return data.CertificateSummaryList;
    }; // Look for certs that contain wildcard permissions


    match = async function (name, list) {
      var alternates, cert, certs, data, i, len, ref;
      certs = (0, _pandaRiver.collect)((0, _privateUtils.where)({
        DomainName: wild(name)
      }, list));

      if (!(0, _pandaParchment.empty)(certs)) {
        // Found what we need.
        return certs[0].CertificateArn;
      } // No primary wildcard cert.  Look for apex.


      certs = (0, _pandaRiver.collect)((0, _privateUtils.where)({
        DomainName: apex(name)
      }, list));

      for (i = 0, len = certs.length; i < len; i++) {
        cert = certs[i];
        data = await acm.describeCertificate({
          CertificateArn: cert.CertificateArn
        });
        alternates = data.Certificate.SubjectAlternativeNames;

        if (ref = wild(name), indexOf.call(alternates, ref) >= 0) {
          return cert.CertificateArn;
        }
      }

      return false; // Failed to find wildcard cert among alternate names.
    };

    fetch = async function (name) {
      var e;

      try {
        return await match(name, (await getCertList()));
      } catch (error) {
        e = error;
        console.error(`Unexpected response while searching TLS certs. ${e}`);
        throw new Error();
      }
    };

    return {
      fetch
    };
  };
};

var _default = acmPrimitive;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9zdW5kb2cvc3JjL3ByaW1pdGl2ZXMvYWNtLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBSkEsSUFBQSxZQUFBO0FBQUEsSUFBQSxPQUFBLEdBQUEsR0FBQSxPQUFBOztBQU1BLFlBQUEsR0FBZSxVQUFBLEdBQUEsRUFBQTtTQUNiLFVBQUEsYUFBQSxFQUFBO0FBQ0UsUUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxXQUFBLEVBQUEsS0FBQSxFQUFBLElBQUE7QUFBQSxJQUFBLEdBQUEsR0FBTSw4QkFBQSxhQUFBLEVBQWtDLEdBQUcsQ0FBckMsR0FBQSxDQUFOOztBQUVBLElBQUEsSUFBQSxHQUFPLFVBQUEsSUFBQSxFQUFBO2FBQVUsMkJBQWlCLE9BQU8sZUFBeEIsSUFBd0IsQ0FBeEIsQztBQUFWLEtBQVA7O0FBQ0EsSUFBQSxJQUFBLEdBQU8sVUFBQSxJQUFBLEVBQUE7YUFBVSwyQkFBaUIsZUFBakIsSUFBaUIsQ0FBakIsQztBQUFWLEtBQVA7O0FBRUEsSUFBQSxXQUFBLEdBQWMsa0JBQUE7QUFDWixVQUFBLElBQUE7QUFBQSxNQUFBLElBQUEsR0FBTyxNQUFNLEdBQUcsQ0FBSCxnQkFBQSxDQUFxQjtBQUFBLFFBQUEsbUJBQUEsRUFBcUIsQ0FBQSxRQUFBO0FBQXJCLE9BQXJCLENBQWI7YUFDQSxJQUFJLENBQUMsc0I7QUFQUCxLQUtBLENBTkYsQzs7O0FBV0UsSUFBQSxLQUFBLEdBQVEsZ0JBQUEsSUFBQSxFQUFBLElBQUEsRUFBQTtBQUNOLFVBQUEsVUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQTtBQUFBLE1BQUEsS0FBQSxHQUFRLHlCQUFRLHlCQUFNO0FBQUMsUUFBQSxVQUFBLEVBQVksSUFBQSxDQUFBLElBQUE7QUFBYixPQUFOLEVBQVIsSUFBUSxDQUFSLENBQVI7O0FBQ0EsVUFBa0MsQ0FBQywyQkFBbkMsS0FBbUMsQ0FBbkMsRUFBQTtBQUFBO0FBQUEsZUFBTyxLQUFNLENBQUEsQ0FBQSxDQUFOLENBQVAsY0FBQTtBQURBLE9BRE0sQzs7O0FBS04sTUFBQSxLQUFBLEdBQVEseUJBQVEseUJBQU07QUFBQyxRQUFBLFVBQUEsRUFBWSxJQUFBLENBQUEsSUFBQTtBQUFiLE9BQU4sRUFBUixJQUFRLENBQVIsQ0FBUjs7QUFDQSxXQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsR0FBQSxHQUFBLEtBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxHQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQTs7QUFDRSxRQUFBLElBQUEsR0FBTyxNQUFNLEdBQUcsQ0FBSCxtQkFBQSxDQUF3QjtBQUFDLFVBQUEsY0FBQSxFQUFnQixJQUFJLENBQUM7QUFBdEIsU0FBeEIsQ0FBYjtBQUNBLFFBQUEsVUFBQSxHQUFhLElBQUksQ0FBQyxXQUFMLENBQWlCLHVCQUE5Qjs7QUFDQSxZQUFBLEdBQUEsR0FBOEIsSUFBQSxDQUFBLElBQUEsQ0FBOUIsRUFBOEIsT0FBQSxDQUFBLElBQUEsQ0FBQSxVQUFBLEVBQUEsR0FBQSxLQUE5QixDQUFBLEVBQUE7QUFBQSxpQkFBTyxJQUFJLENBQVgsY0FBQTs7QUFIRjs7YUFOTSxLLENBQUEsQ0FBQTtBQUFBLEtBQVI7O0FBYUEsSUFBQSxLQUFBLEdBQVEsZ0JBQUEsSUFBQSxFQUFBO0FBQ04sVUFBQSxDQUFBOztBQUFBLFVBQUE7QUFDRSxlQUFBLE1BQU0sS0FBQSxDQUFBLElBQUEsR0FBWSxNQUFNLFdBRDFCLEVBQ1EsRUFBTjtBQURGLE9BQUEsQ0FBQSxPQUFBLEtBQUEsRUFBQTtBQUVNLFFBQUEsQ0FBQSxHQUFBLEtBQUE7QUFDSixRQUFBLE9BQU8sQ0FBUCxLQUFBLENBQWMsa0RBQUEsQ0FBZCxFQUFBO0FBQ0EsY0FBTSxJQUpSLEtBSVEsRUFBTjs7QUFMSSxLQUFSOztXQU9BO0FBQUEsTUFBQTtBQUFBLEs7QUEvQkYsRztBQURhLENBQWY7O2VBbUNlLFkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2VtcHR5LCBpc1N0cmluZ30gZnJvbSBcInBhbmRhLXBhcmNobWVudFwiXG5pbXBvcnQge2NvbGxlY3R9IGZyb20gXCJwYW5kYS1yaXZlclwiXG5pbXBvcnQge3doZXJlfSBmcm9tIFwiLi9wcml2YXRlLXV0aWxzXCJcbmltcG9ydCB7cm9vdCwgcmVndWxhcmx5UXVhbGlmeX0gZnJvbSBcIi4uL2hlbHBlcnMvdXJsXCJcbmltcG9ydCB7YXBwbHlDb25maWd1cmF0aW9ufSBmcm9tIFwiLi4vbGlmdFwiXG5cbmFjbVByaW1pdGl2ZSA9IChTREspIC0+XG4gIChjb25maWd1cmF0aW9uKSAtPlxuICAgIGFjbSA9IGFwcGx5Q29uZmlndXJhdGlvbiBjb25maWd1cmF0aW9uLCBTREsuQUNNXG5cbiAgICB3aWxkID0gKG5hbWUpIC0+IHJlZ3VsYXJseVF1YWxpZnkgXCIqLlwiICsgcm9vdCBuYW1lXG4gICAgYXBleCA9IChuYW1lKSAtPiByZWd1bGFybHlRdWFsaWZ5IHJvb3QgbmFtZVxuXG4gICAgZ2V0Q2VydExpc3QgPSAtPlxuICAgICAgZGF0YSA9IGF3YWl0IGFjbS5saXN0Q2VydGlmaWNhdGVzIENlcnRpZmljYXRlU3RhdHVzZXM6IFsgXCJJU1NVRURcIiBdXG4gICAgICBkYXRhLkNlcnRpZmljYXRlU3VtbWFyeUxpc3RcblxuICAgICMgTG9vayBmb3IgY2VydHMgdGhhdCBjb250YWluIHdpbGRjYXJkIHBlcm1pc3Npb25zXG4gICAgbWF0Y2ggPSAobmFtZSwgbGlzdCkgLT5cbiAgICAgIGNlcnRzID0gY29sbGVjdCB3aGVyZSB7RG9tYWluTmFtZTogd2lsZCBuYW1lfSwgbGlzdFxuICAgICAgcmV0dXJuIGNlcnRzWzBdLkNlcnRpZmljYXRlQXJuIGlmICFlbXB0eSBjZXJ0cyAjIEZvdW5kIHdoYXQgd2UgbmVlZC5cblxuICAgICAgIyBObyBwcmltYXJ5IHdpbGRjYXJkIGNlcnQuICBMb29rIGZvciBhcGV4LlxuICAgICAgY2VydHMgPSBjb2xsZWN0IHdoZXJlIHtEb21haW5OYW1lOiBhcGV4IG5hbWV9LCBsaXN0XG4gICAgICBmb3IgY2VydCBpbiBjZXJ0c1xuICAgICAgICBkYXRhID0gYXdhaXQgYWNtLmRlc2NyaWJlQ2VydGlmaWNhdGUge0NlcnRpZmljYXRlQXJuOiBjZXJ0LkNlcnRpZmljYXRlQXJufVxuICAgICAgICBhbHRlcm5hdGVzID0gZGF0YS5DZXJ0aWZpY2F0ZS5TdWJqZWN0QWx0ZXJuYXRpdmVOYW1lc1xuICAgICAgICByZXR1cm4gY2VydC5DZXJ0aWZpY2F0ZUFybiBpZiB3aWxkKG5hbWUpIGluIGFsdGVybmF0ZXNcblxuICAgICAgZmFsc2UgIyBGYWlsZWQgdG8gZmluZCB3aWxkY2FyZCBjZXJ0IGFtb25nIGFsdGVybmF0ZSBuYW1lcy5cblxuICAgIGZldGNoID0gKG5hbWUpIC0+XG4gICAgICB0cnlcbiAgICAgICAgYXdhaXQgbWF0Y2ggbmFtZSwgYXdhaXQgZ2V0Q2VydExpc3QoKVxuICAgICAgY2F0Y2ggZVxuICAgICAgICBjb25zb2xlLmVycm9yIFwiVW5leHBlY3RlZCByZXNwb25zZSB3aGlsZSBzZWFyY2hpbmcgVExTIGNlcnRzLiAje2V9XCJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKClcblxuICAgIHtmZXRjaH1cblxuXG5leHBvcnQgZGVmYXVsdCBhY21QcmltaXRpdmVcbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=/Users/david/repos/sundog/src/primitives/acm.coffee