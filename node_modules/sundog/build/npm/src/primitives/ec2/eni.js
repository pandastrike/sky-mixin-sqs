"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pandaParchment = require("panda-parchment");

var _pandaRiver = require("panda-river");

var _privateUtils = require("../private-utils");

var _lift = require("../../lift");

var eniPrimitive;

eniPrimitive = function (SDK) {
  return function (configuration) {
    var Delete, detach, ec2, get, list, purge, waitFor, waitForAvailable, waitForInUse;
    ec2 = (0, _lift.applyConfiguration)(configuration, SDK.EC2);

    list = async function (subnetIDs) {
      var NetworkInterfaces;
      ({
        NetworkInterfaces
      } = await ec2.describeNetworkInterfaces({
        Filters: [{
          Name: "subnet-id",
          Values: subnetIDs
        }]
      }));
      return NetworkInterfaces;
    };

    get = async function (id) {
      var NetworkInterfaces, e;

      try {
        ({
          NetworkInterfaces
        } = await ec2.describeNetworkInterfaces({
          NetworkInterfaceIds: [id]
        }));
        return (0, _pandaParchment.first)(NetworkInterfaces);
      } catch (error) {
        e = error;
        return false;
      }
    };

    waitFor = function (status) {
      return async function (id) {
        var subnet;

        while (true) {
          await (0, _pandaParchment.sleep)(10000);
          subnet = await get(id);

          if (subnet.Status === status) {
            return;
          }
        }
      };
    };

    waitForAvailable = waitFor("available");
    waitForInUse = waitFor("in-use");

    detach = async function (id, attachmentID) {
      await ec2.detachNetworkInterface({
        AttachmentId: attachmentID,
        Force: true
      });
      return await waitForAvailable(id);
    };

    Delete = async function (id) {
      return await ec2.deleteNetworkInterface({
        NetworkInterfaceId: id
      });
    };

    purge = async function (subnetIDs, test) {
      var ENIs, attachedENIs, e; // Collect any ENIs that meet your test specs.

      ENIs = await list(subnetIDs);
      ENIs = (0, _pandaRiver.collect)((0, _pandaRiver.select)(test, ENIs)); // Detach any attached ENIs

      attachedENIs = (0, _pandaRiver.collect)((0, _privateUtils.where)({
        Status: "in-use"
      }, ENIs));
      await Promise.all(function () {
        var i, len, results;
        results = [];

        for (i = 0, len = attachedENIs.length; i < len; i++) {
          e = attachedENIs[i];
          results.push(detach(e.NetworkInterfaceId, e.Attachment.AttachmentId));
        }

        return results;
      }()); // Destroy all the ENIs

      return await Promise.all(function () {
        var i, len, results;
        results = [];

        for (i = 0, len = ENIs.length; i < len; i++) {
          e = ENIs[i];
          results.push(Delete(e.NetworkInterfaceId));
        }

        return results;
      }());
    };

    return {
      purge
    };
  };
};

var _default = eniPrimitive;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9zdW5kb2cvc3JjL3ByaW1pdGl2ZXMvZWMyL2VuaS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUhBLElBQUEsWUFBQTs7QUFLQSxZQUFBLEdBQWUsVUFBQSxHQUFBLEVBQUE7U0FDYixVQUFBLGFBQUEsRUFBQTtBQUNFLFFBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLGdCQUFBLEVBQUEsWUFBQTtBQUFBLElBQUEsR0FBQSxHQUFNLDhCQUFBLGFBQUEsRUFBa0MsR0FBRyxDQUFyQyxHQUFBLENBQU47O0FBRUEsSUFBQSxJQUFBLEdBQU8sZ0JBQUEsU0FBQSxFQUFBO0FBQ0wsVUFBQSxpQkFBQTtBQUFBLE9BQUE7QUFBQSxRQUFBO0FBQUEsVUFBc0IsTUFBTSxHQUFHLENBQUgseUJBQUEsQ0FDMUI7QUFBQSxRQUFBLE9BQUEsRUFBUyxDQUNQO0FBQUEsVUFBQSxJQUFBLEVBQUEsV0FBQTtBQUNBLFVBQUEsTUFBQSxFQUFRO0FBRFIsU0FETztBQUFULE9BRDBCLENBQTVCO2FBS0EsaUI7QUFOSyxLQUFQOztBQVFBLElBQUEsR0FBQSxHQUFNLGdCQUFBLEVBQUEsRUFBQTtBQUNKLFVBQUEsaUJBQUEsRUFBQSxDQUFBOztBQUFBLFVBQUE7QUFDRSxTQUFBO0FBQUEsVUFBQTtBQUFBLFlBQXNCLE1BQU0sR0FBRyxDQUFILHlCQUFBLENBQzFCO0FBQUEsVUFBQSxtQkFBQSxFQUFxQixDQUFBLEVBQUE7QUFBckIsU0FEMEIsQ0FBNUI7ZUFFQSwyQkFIRixpQkFHRSxDO0FBSEYsT0FBQSxDQUFBLE9BQUEsS0FBQSxFQUFBO0FBSU0sUUFBQSxDQUFBLEdBQUEsS0FBQTtlQUpOLEs7O0FBREksS0FBTjs7QUFRQSxJQUFBLE9BQUEsR0FBVSxVQUFBLE1BQUEsRUFBQTthQUNSLGdCQUFBLEVBQUEsRUFBQTtBQUNFLFlBQUEsTUFBQTs7QUFBQSxlQUFBLElBQUEsRUFBQTtBQUNFLGdCQUFNLDJCQUFBLEtBQUEsQ0FBTjtBQUNBLFVBQUEsTUFBQSxHQUFTLE1BQU0sR0FBQSxDQUFOLEVBQU0sQ0FBZjs7QUFDQSxjQUFHLE1BQU0sQ0FBTixNQUFBLEtBQUgsTUFBQSxFQUFBO0FBQUE7O0FBSEY7QUFERixPO0FBRFEsS0FBVjs7QUFRQSxJQUFBLGdCQUFBLEdBQW1CLE9BQUEsQ0FBQSxXQUFBLENBQW5CO0FBQ0EsSUFBQSxZQUFBLEdBQWUsT0FBQSxDQUFBLFFBQUEsQ0FBZjs7QUFFQSxJQUFBLE1BQUEsR0FBUyxnQkFBQSxFQUFBLEVBQUEsWUFBQSxFQUFBO0FBQ1AsWUFBTSxHQUFHLENBQUgsc0JBQUEsQ0FDSjtBQUFBLFFBQUEsWUFBQSxFQUFBLFlBQUE7QUFDQSxRQUFBLEtBQUEsRUFBTztBQURQLE9BREksQ0FBTjtBQUlBLGFBQUEsTUFBTSxnQkFBQSxDQUFOLEVBQU0sQ0FBTjtBQUxPLEtBQVQ7O0FBT0EsSUFBQSxNQUFBLEdBQVMsZ0JBQUEsRUFBQSxFQUFBO0FBQ1AsYUFBQSxNQUFNLEdBQUcsQ0FBSCxzQkFBQSxDQUNKO0FBQUEsUUFBQSxrQkFBQSxFQUFvQjtBQUFwQixPQURJLENBQU47QUFETyxLQUFUOztBQUlBLElBQUEsS0FBQSxHQUFRLGdCQUFBLFNBQUEsRUFBQSxJQUFBLEVBQUE7QUFFTixVQUFBLElBQUEsRUFBQSxZQUFBLEVBQUEsQ0FBQSxDQUZNLEM7O0FBRU4sTUFBQSxJQUFBLEdBQU8sTUFBTSxJQUFBLENBQU4sU0FBTSxDQUFiO0FBQ0EsTUFBQSxJQUFBLEdBQU8seUJBQVEsd0JBQUEsSUFBQSxFQURmLElBQ2UsQ0FBUixDQUFQLENBSE0sQzs7QUFNTixNQUFBLFlBQUEsR0FBZSx5QkFBUSx5QkFBTTtBQUFBLFFBQUEsTUFBQSxFQUFRO0FBQVIsT0FBTixFQUFSLElBQVEsQ0FBUixDQUFmO0FBQ0EsWUFBTSxPQUFPLENBQVAsR0FBQSxDQUFBLFlBQUE7O0FBQW9FLFFBQUEsT0FBQSxHQUFBLEVBQUE7O0FBQUEsYUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLEdBQUEsR0FBQSxZQUFBLENBQUEsTUFBQSxFQUFBLENBQUEsR0FBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUE7O3VCQUF2RCxNQUFBLENBQU8sQ0FBQyxDQUFSLGtCQUFBLEVBQTZCLENBQUMsQ0FBQyxVQUFGLENBQTdCLFlBQUEsQztBQUF1RDs7O0FBTDFFLE9BS00sRUFBQSxDQUFOLENBUE0sQzs7QUFVTixhQUFBLE1BQU0sT0FBTyxDQUFQLEdBQUEsQ0FBQSxZQUFBOztBQUF5QyxRQUFBLE9BQUEsR0FBQSxFQUFBOztBQUFBLGFBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxHQUFBLEdBQUEsSUFBQSxDQUFBLE1BQUEsRUFBQSxDQUFBLEdBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBOzt1QkFBNUIsTUFBQSxDQUFPLENBQUMsQ0FBUixrQkFBQSxDO0FBQTRCOzs7QUFBL0MsT0FBTSxFQUFBLENBQU47QUFWTSxLQUFSOztXQWFBO0FBQUEsTUFBQTtBQUFBLEs7QUF0REYsRztBQURhLENBQWY7O2VBeURlLFkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3NsZWVwLCBmaXJzdH0gZnJvbSBcInBhbmRhLXBhcmNobWVudFwiXG5pbXBvcnQge2NvbGxlY3QsIHNlbGVjdCwgcHJvamVjdH0gZnJvbSBcInBhbmRhLXJpdmVyXCJcbmltcG9ydCB7d2hlcmV9IGZyb20gXCIuLi9wcml2YXRlLXV0aWxzXCJcbmltcG9ydCB7YXBwbHlDb25maWd1cmF0aW9ufSBmcm9tIFwiLi4vLi4vbGlmdFwiXG5cbmVuaVByaW1pdGl2ZSA9IChTREspIC0+XG4gIChjb25maWd1cmF0aW9uKSAtPlxuICAgIGVjMiA9IGFwcGx5Q29uZmlndXJhdGlvbiBjb25maWd1cmF0aW9uLCBTREsuRUMyXG5cbiAgICBsaXN0ID0gKHN1Ym5ldElEcykgLT5cbiAgICAgIHtOZXR3b3JrSW50ZXJmYWNlc30gPSBhd2FpdCBlYzIuZGVzY3JpYmVOZXR3b3JrSW50ZXJmYWNlc1xuICAgICAgICBGaWx0ZXJzOiBbXG4gICAgICAgICAgTmFtZTogXCJzdWJuZXQtaWRcIlxuICAgICAgICAgIFZhbHVlczogc3VibmV0SURzXG4gICAgICAgIF1cbiAgICAgIE5ldHdvcmtJbnRlcmZhY2VzXG5cbiAgICBnZXQgPSAoaWQpIC0+XG4gICAgICB0cnlcbiAgICAgICAge05ldHdvcmtJbnRlcmZhY2VzfSA9IGF3YWl0IGVjMi5kZXNjcmliZU5ldHdvcmtJbnRlcmZhY2VzXG4gICAgICAgICAgTmV0d29ya0ludGVyZmFjZUlkczogWyBpZCBdXG4gICAgICAgIGZpcnN0IE5ldHdvcmtJbnRlcmZhY2VzXG4gICAgICBjYXRjaCBlXG4gICAgICAgIGZhbHNlXG5cbiAgICB3YWl0Rm9yID0gKHN0YXR1cykgLT5cbiAgICAgIChpZCkgLT5cbiAgICAgICAgd2hpbGUgdHJ1ZVxuICAgICAgICAgIGF3YWl0IHNsZWVwIDEwMDAwXG4gICAgICAgICAgc3VibmV0ID0gYXdhaXQgZ2V0IGlkXG4gICAgICAgICAgaWYgc3VibmV0LlN0YXR1cyA9PSBzdGF0dXNcbiAgICAgICAgICAgIHJldHVyblxuXG4gICAgd2FpdEZvckF2YWlsYWJsZSA9IHdhaXRGb3IgXCJhdmFpbGFibGVcIlxuICAgIHdhaXRGb3JJblVzZSA9IHdhaXRGb3IgXCJpbi11c2VcIlxuXG4gICAgZGV0YWNoID0gKGlkLCBhdHRhY2htZW50SUQpIC0+XG4gICAgICBhd2FpdCBlYzIuZGV0YWNoTmV0d29ya0ludGVyZmFjZVxuICAgICAgICBBdHRhY2htZW50SWQ6IGF0dGFjaG1lbnRJRFxuICAgICAgICBGb3JjZTogdHJ1ZVxuXG4gICAgICBhd2FpdCB3YWl0Rm9yQXZhaWxhYmxlIGlkXG5cbiAgICBEZWxldGUgPSAoaWQpIC0+XG4gICAgICBhd2FpdCBlYzIuZGVsZXRlTmV0d29ya0ludGVyZmFjZVxuICAgICAgICBOZXR3b3JrSW50ZXJmYWNlSWQ6IGlkXG5cbiAgICBwdXJnZSA9IChzdWJuZXRJRHMsIHRlc3QpIC0+XG4gICAgICAjIENvbGxlY3QgYW55IEVOSXMgdGhhdCBtZWV0IHlvdXIgdGVzdCBzcGVjcy5cbiAgICAgIEVOSXMgPSBhd2FpdCBsaXN0IHN1Ym5ldElEc1xuICAgICAgRU5JcyA9IGNvbGxlY3Qgc2VsZWN0IHRlc3QsIEVOSXNcblxuICAgICAgIyBEZXRhY2ggYW55IGF0dGFjaGVkIEVOSXNcbiAgICAgIGF0dGFjaGVkRU5JcyA9IGNvbGxlY3Qgd2hlcmUgU3RhdHVzOiBcImluLXVzZVwiLCBFTklzXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbCAoZGV0YWNoIGUuTmV0d29ya0ludGVyZmFjZUlkLCBlLkF0dGFjaG1lbnQuQXR0YWNobWVudElkIGZvciBlIGluIGF0dGFjaGVkRU5JcylcblxuICAgICAgIyBEZXN0cm95IGFsbCB0aGUgRU5Jc1xuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwgKERlbGV0ZSBlLk5ldHdvcmtJbnRlcmZhY2VJZCBmb3IgZSBpbiBFTklzKVxuXG5cbiAgICB7cHVyZ2V9XG5cbmV4cG9ydCBkZWZhdWx0IGVuaVByaW1pdGl2ZVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=/Users/david/repos/sundog/src/primitives/ec2/eni.coffee