"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pandaParchment = require("panda-parchment");

var _lift = require("../lift");

var lambdaPrimitive;

lambdaPrimitive = function (SDK) {
  return function (configuration) {
    var Delete, asyncInvoke, invoke, lambda, list, update, updateConfig;
    lambda = (0, _lift.applyConfiguration)(configuration, SDK.Lambda);

    update = async function (name, bucket, key, options = {}) {
      return await lambda.updateFunctionCode((0, _pandaParchment.merge)({
        FunctionName: name,
        Publish: false,
        S3Bucket: bucket,
        S3Key: key
      }, options));
    };

    updateConfig = async function (FunctionName, config) {
      return await lambda.updateFunctionConfiguration((0, _pandaParchment.merge)({
        FunctionName
      }, config));
    };

    list = async function (fns = [], marker) {
      var Functions, NextMarker, params;
      params = {
        MaxItems: 100
      };

      if (marker) {
        params.Marker = marker;
      }

      ({
        NextMarker,
        Functions
      } = await lambda.listFunctions(params));
      fns = (0, _pandaParchment.cat)(fns, Functions);

      if (NextMarker) {
        return await list(fns, NextMarker);
      } else {
        return fns;
      }
    };

    Delete = async function (name) {
      return await lambda.deleteFunction({
        FunctionName: name
      });
    };

    invoke = async function (FunctionName, input, options) {
      var params;
      params = {
        FunctionName,
        Payload: JSON.stringify(input)
      };
      params = (0, _pandaParchment.merge)(params, options);
      return await lambda.invoke(params);
    };

    asyncInvoke = function (name, input, options) {
      options = (0, _pandaParchment.merge)(options, {
        InvocationType: "Event"
      });
      return invoke(name, input, options);
    };

    return {
      update,
      updateConfig,
      list,
      delete: Delete,
      invoke,
      asyncInvoke
    };
  };
};

var _default = lambdaPrimitive;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9zdW5kb2cvc3JjL3ByaW1pdGl2ZXMvbGFtYmRhLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBREEsSUFBQSxlQUFBOztBQUdBLGVBQUEsR0FBa0IsVUFBQSxHQUFBLEVBQUE7U0FDaEIsVUFBQSxhQUFBLEVBQUE7QUFDRSxRQUFBLE1BQUEsRUFBQSxXQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLFlBQUE7QUFBQSxJQUFBLE1BQUEsR0FBUyw4QkFBQSxhQUFBLEVBQWtDLEdBQUcsQ0FBckMsTUFBQSxDQUFUOztBQUVBLElBQUEsTUFBQSxHQUFTLGdCQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFvQixPQUFBLEdBQXBCLEVBQUEsRUFBQTtBQUNQLGFBQUEsTUFBTSxNQUFNLENBQU4sa0JBQUEsQ0FBMEIsMkJBQzlCO0FBQUEsUUFBQSxZQUFBLEVBQUEsSUFBQTtBQUNBLFFBQUEsT0FBQSxFQURBLEtBQUE7QUFFQSxRQUFBLFFBQUEsRUFGQSxNQUFBO0FBR0EsUUFBQSxLQUFBLEVBQU87QUFIUCxPQUQ4QixFQUFoQyxPQUFnQyxDQUExQixDQUFOO0FBRE8sS0FBVDs7QUFTQSxJQUFBLFlBQUEsR0FBZSxnQkFBQSxZQUFBLEVBQUEsTUFBQSxFQUFBO0FBQ2IsYUFBQSxNQUFNLE1BQU0sQ0FBTiwyQkFBQSxDQUFtQywyQkFBTTtBQUFOLFFBQUE7QUFBTSxPQUFOLEVBQXpDLE1BQXlDLENBQW5DLENBQU47QUFEYSxLQUFmOztBQUdBLElBQUEsSUFBQSxHQUFPLGdCQUFDLEdBQUEsR0FBRCxFQUFBLEVBQUEsTUFBQSxFQUFBO0FBQ0wsVUFBQSxTQUFBLEVBQUEsVUFBQSxFQUFBLE1BQUE7QUFBQSxNQUFBLE1BQUEsR0FBUztBQUFDLFFBQUEsUUFBQSxFQUFVO0FBQVgsT0FBVDs7QUFDQSxVQUFBLE1BQUEsRUFBQTtBQUFBLFFBQUEsTUFBTSxDQUFOLE1BQUEsR0FBQSxNQUFBOzs7QUFFQSxPQUFBO0FBQUEsUUFBQSxVQUFBO0FBQUEsUUFBQTtBQUFBLFVBQTBCLE1BQU0sTUFBTSxDQUFOLGFBQUEsQ0FBaEMsTUFBZ0MsQ0FBaEM7QUFDQSxNQUFBLEdBQUEsR0FBTSx5QkFBQSxHQUFBLEVBQUEsU0FBQSxDQUFOOztBQUNBLFVBQUEsVUFBQSxFQUFBO0FBQ0UsZUFBQSxNQUFNLElBQUEsQ0FBQSxHQUFBLEVBRFIsVUFDUSxDQUFOO0FBREYsT0FBQSxNQUFBO2VBQUEsRzs7QUFOSyxLQUFQOztBQVdBLElBQUEsTUFBQSxHQUFTLGdCQUFBLElBQUEsRUFBQTtBQUFVLGFBQUEsTUFBTSxNQUFNLENBQU4sY0FBQSxDQUFzQjtBQUFBLFFBQUEsWUFBQSxFQUFjO0FBQWQsT0FBdEIsQ0FBTjtBQUFWLEtBQVQ7O0FBRUEsSUFBQSxNQUFBLEdBQVMsZ0JBQUEsWUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUE7QUFDUCxVQUFBLE1BQUE7QUFBQSxNQUFBLE1BQUEsR0FBUztBQUFBLFFBQUEsWUFBQTtBQUVQLFFBQUEsT0FBQSxFQUFTLElBQUksQ0FBSixTQUFBLENBQUEsS0FBQTtBQUZGLE9BQVQ7QUFJQSxNQUFBLE1BQUEsR0FBUywyQkFBQSxNQUFBLEVBQUEsT0FBQSxDQUFUO0FBQ0EsYUFBQSxNQUFNLE1BQU0sQ0FBTixNQUFBLENBQU4sTUFBTSxDQUFOO0FBTk8sS0FBVDs7QUFRQSxJQUFBLFdBQUEsR0FBYyxVQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBO0FBQ1osTUFBQSxPQUFBLEdBQVUsMkJBQUEsT0FBQSxFQUFlO0FBQUMsUUFBQSxjQUFBLEVBQWdCO0FBQWpCLE9BQWYsQ0FBVjthQUNBLE1BQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLE9BQUEsQztBQUZZLEtBQWQ7O1dBS0E7QUFBQSxNQUFBLE1BQUE7QUFBQSxNQUFBLFlBQUE7QUFBQSxNQUFBLElBQUE7QUFBNkIsTUFBQSxNQUFBLEVBQTdCLE1BQUE7QUFBQSxNQUFBLE1BQUE7QUFBb0QsTUFBQTtBQUFwRCxLO0FBekNGLEc7QUFEZ0IsQ0FBbEI7O2VBNkNlLGUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NhdCwgbWVyZ2V9IGZyb20gXCJwYW5kYS1wYXJjaG1lbnRcIlxuaW1wb3J0IHthcHBseUNvbmZpZ3VyYXRpb259IGZyb20gXCIuLi9saWZ0XCJcblxubGFtYmRhUHJpbWl0aXZlID0gKFNESykgLT5cbiAgKGNvbmZpZ3VyYXRpb24pIC0+XG4gICAgbGFtYmRhID0gYXBwbHlDb25maWd1cmF0aW9uIGNvbmZpZ3VyYXRpb24sIFNESy5MYW1iZGFcblxuICAgIHVwZGF0ZSA9IChuYW1lLCBidWNrZXQsIGtleSwgb3B0aW9ucz17fSkgLT5cbiAgICAgIGF3YWl0IGxhbWJkYS51cGRhdGVGdW5jdGlvbkNvZGUgbWVyZ2VcbiAgICAgICAgRnVuY3Rpb25OYW1lOiBuYW1lXG4gICAgICAgIFB1Ymxpc2g6IGZhbHNlXG4gICAgICAgIFMzQnVja2V0OiBidWNrZXRcbiAgICAgICAgUzNLZXk6IGtleVxuICAgICAgICAsXG4gICAgICAgIG9wdGlvbnNcblxuICAgIHVwZGF0ZUNvbmZpZyA9IChGdW5jdGlvbk5hbWUsIGNvbmZpZykgLT5cbiAgICAgIGF3YWl0IGxhbWJkYS51cGRhdGVGdW5jdGlvbkNvbmZpZ3VyYXRpb24gbWVyZ2Uge0Z1bmN0aW9uTmFtZX0sIGNvbmZpZ1xuXG4gICAgbGlzdCA9IChmbnM9W10sIG1hcmtlcikgLT5cbiAgICAgIHBhcmFtcyA9IHtNYXhJdGVtczogMTAwfVxuICAgICAgcGFyYW1zLk1hcmtlciA9IG1hcmtlciBpZiBtYXJrZXJcblxuICAgICAge05leHRNYXJrZXIsIEZ1bmN0aW9uc30gPSBhd2FpdCBsYW1iZGEubGlzdEZ1bmN0aW9ucyBwYXJhbXNcbiAgICAgIGZucyA9IGNhdCBmbnMsIEZ1bmN0aW9uc1xuICAgICAgaWYgTmV4dE1hcmtlclxuICAgICAgICBhd2FpdCBsaXN0IGZucywgTmV4dE1hcmtlclxuICAgICAgZWxzZVxuICAgICAgICBmbnNcblxuICAgIERlbGV0ZSA9IChuYW1lKSAtPiBhd2FpdCBsYW1iZGEuZGVsZXRlRnVuY3Rpb24gRnVuY3Rpb25OYW1lOiBuYW1lXG5cbiAgICBpbnZva2UgPSAoRnVuY3Rpb25OYW1lLCBpbnB1dCwgb3B0aW9ucykgLT5cbiAgICAgIHBhcmFtcyA9IHtcbiAgICAgICAgRnVuY3Rpb25OYW1lXG4gICAgICAgIFBheWxvYWQ6IEpTT04uc3RyaW5naWZ5IGlucHV0XG4gICAgICB9XG4gICAgICBwYXJhbXMgPSBtZXJnZSBwYXJhbXMsIG9wdGlvbnNcbiAgICAgIGF3YWl0IGxhbWJkYS5pbnZva2UgcGFyYW1zXG5cbiAgICBhc3luY0ludm9rZSA9IChuYW1lLCBpbnB1dCwgb3B0aW9ucykgLT5cbiAgICAgIG9wdGlvbnMgPSBtZXJnZSBvcHRpb25zLCB7SW52b2NhdGlvblR5cGU6IFwiRXZlbnRcIn1cbiAgICAgIGludm9rZSBuYW1lLCBpbnB1dCwgb3B0aW9uc1xuXG5cbiAgICB7dXBkYXRlLCB1cGRhdGVDb25maWcsIGxpc3QsIGRlbGV0ZTpEZWxldGUsIGludm9rZSwgYXN5bmNJbnZva2V9XG5cblxuZXhwb3J0IGRlZmF1bHQgbGFtYmRhUHJpbWl0aXZlXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=/Users/david/repos/sundog/src/primitives/lambda.coffee