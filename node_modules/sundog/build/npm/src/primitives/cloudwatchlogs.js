"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pandaParchment = require("panda-parchment");

var _lift = require("../lift");

// Primitives for the service CloudWatch Logs.  The main entities are groups and streams.
// This follows the naming convention that methods that work on groups will be
// prefixed "group*", whereas streams methods will have no prefix.
var cloudwatchPrimitive;

cloudwatchPrimitive = function (SDK) {
  return function (configuration) {
    var create, exists, groupList, latest, logs, tail;
    logs = (0, _lift.applyConfiguration)(configuration, SDK.CloudWatchLogs); // Returns data on a group or groups given an input prefix.

    groupList = async function (prefix, current = [], token) {
      var logGroups, nextToken, params;
      params = {
        logGroupNamePrefix: prefix
      };

      if (token) {
        params.nextToken = token;
      }

      ({
        logGroups,
        nextToken
      } = await logs.describeLogGroups(params));
      current = (0, _pandaParchment.cat)(current, logGroups);

      if (nextToken) {
        return await groupList(prefix, current, nextToken);
      } else {
        return current;
      }
    };

    latest = async function (name) {
      var logStreams, params;
      params = {
        logGroupName: name,
        orderBy: "LastEventTime",
        descending: true,
        limit: 1
      };
      ({
        logStreams
      } = await logs.describeLogStreams(params));

      if ((0, _pandaParchment.empty)(logStreams)) {
        return void 0;
      } else {
        return logStreams[0];
      }
    };

    tail = async function (group, stream, time, current = [], token = false) {
      var events, nextForwardToken, params;
      params = {
        logGroupName: group,
        logStreamName: stream,
        startTime: time,
        startFromHead: true
      };

      if (token) {
        params.nextToken = token;
      }

      ({
        events,
        nextForwardToken
      } = await logs.getLogEvents(params));
      current = (0, _pandaParchment.cat)(current, events);

      if (nextForwardToken !== token) {
        return await tail(group, stream, time, current, nextForwardToken);
      } else {
        return current;
      }
    };

    exists = async function (name) {
      var logGroups;
      ({
        logGroups
      } = await logs.describeLogGroups({
        limit: 1,
        logGroupNamePrefix: name
      }));

      if ((0, _pandaParchment.empty)(logGroups)) {
        return false;
      } else {
        return true;
      }
    };

    create = async function (name) {
      return await logs.createLogGroup({
        logGroupName: name
      });
    }; // Return exposed functions.


    return {
      groupList,
      latest,
      tail,
      exists,
      create
    };
  };
};

var _default = cloudwatchPrimitive;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9zdW5kb2cvc3JjL3ByaW1pdGl2ZXMvY2xvdWR3YXRjaGxvZ3MuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFJQTs7QUFDQTs7QUFMQTs7O0FBQUEsSUFBQSxtQkFBQTs7QUFPQSxtQkFBQSxHQUFzQixVQUFBLEdBQUEsRUFBQTtTQUNwQixVQUFBLGFBQUEsRUFBQTtBQUNFLFFBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBO0FBQUEsSUFBQSxJQUFBLEdBQU8sOEJBQUEsYUFBQSxFQUFrQyxHQUFHLENBQTVDLGNBQU8sQ0FBUCxDQURGLEM7O0FBSUUsSUFBQSxTQUFBLEdBQVksZ0JBQUEsTUFBQSxFQUFTLE9BQUEsR0FBVCxFQUFBLEVBQUEsS0FBQSxFQUFBO0FBQ1YsVUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLE1BQUE7QUFBQSxNQUFBLE1BQUEsR0FBUztBQUFBLFFBQUEsa0JBQUEsRUFBb0I7QUFBcEIsT0FBVDs7QUFDQSxVQUFBLEtBQUEsRUFBQTtBQUFBLFFBQUEsTUFBTSxDQUFOLFNBQUEsR0FBQSxLQUFBOzs7QUFDQSxPQUFBO0FBQUEsUUFBQSxTQUFBO0FBQUEsUUFBQTtBQUFBLFVBQXlCLE1BQU0sSUFBSSxDQUFKLGlCQUFBLENBQS9CLE1BQStCLENBQS9CO0FBQ0EsTUFBQSxPQUFBLEdBQVUseUJBQUEsT0FBQSxFQUFBLFNBQUEsQ0FBVjs7QUFDQSxVQUFBLFNBQUEsRUFBQTtBQUNFLGVBQUEsTUFBTSxTQUFBLENBQUEsTUFBQSxFQUFBLE9BQUEsRUFEUixTQUNRLENBQU47QUFERixPQUFBLE1BQUE7ZUFBQSxPOztBQUxVLEtBQVo7O0FBVUEsSUFBQSxNQUFBLEdBQVMsZ0JBQUEsSUFBQSxFQUFBO0FBQ1AsVUFBQSxVQUFBLEVBQUEsTUFBQTtBQUFBLE1BQUEsTUFBQSxHQUNFO0FBQUEsUUFBQSxZQUFBLEVBQUEsSUFBQTtBQUNBLFFBQUEsT0FBQSxFQURBLGVBQUE7QUFFQSxRQUFBLFVBQUEsRUFGQSxJQUFBO0FBR0EsUUFBQSxLQUFBLEVBQU87QUFIUCxPQURGO0FBTUEsT0FBQTtBQUFBLFFBQUE7QUFBQSxVQUFlLE1BQU0sSUFBSSxDQUFKLGtCQUFBLENBQXJCLE1BQXFCLENBQXJCOztBQUNBLFVBQUcsMkJBQUgsVUFBRyxDQUFILEVBQUE7ZUFDRSxLQURGLEM7QUFBQSxPQUFBLE1BQUE7ZUFHRSxVQUFXLENBSGIsQ0FHYSxDOztBQVhOLEtBQVQ7O0FBYUEsSUFBQSxJQUFBLEdBQU8sZ0JBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQXNCLE9BQUEsR0FBdEIsRUFBQSxFQUFrQyxLQUFBLEdBQWxDLEtBQUEsRUFBQTtBQUNMLFVBQUEsTUFBQSxFQUFBLGdCQUFBLEVBQUEsTUFBQTtBQUFBLE1BQUEsTUFBQSxHQUNFO0FBQUEsUUFBQSxZQUFBLEVBQUEsS0FBQTtBQUNBLFFBQUEsYUFBQSxFQURBLE1BQUE7QUFFQSxRQUFBLFNBQUEsRUFGQSxJQUFBO0FBR0EsUUFBQSxhQUFBLEVBQWU7QUFIZixPQURGOztBQUtBLFVBQUEsS0FBQSxFQUFBO0FBQUEsUUFBQSxNQUFNLENBQU4sU0FBQSxHQUFBLEtBQUE7OztBQUVBLE9BQUE7QUFBQSxRQUFBLE1BQUE7QUFBQSxRQUFBO0FBQUEsVUFBNkIsTUFBTSxJQUFJLENBQUosWUFBQSxDQUFuQyxNQUFtQyxDQUFuQztBQUNBLE1BQUEsT0FBQSxHQUFVLHlCQUFBLE9BQUEsRUFBQSxNQUFBLENBQVY7O0FBQ0EsVUFBRyxnQkFBQSxLQUFILEtBQUEsRUFBQTtBQUNFLGVBQUEsTUFBTSxJQUFBLENBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQURSLGdCQUNRLENBQU47QUFERixPQUFBLE1BQUE7ZUFBQSxPOztBQVZLLEtBQVA7O0FBZUEsSUFBQSxNQUFBLEdBQVMsZ0JBQUEsSUFBQSxFQUFBO0FBQ1AsVUFBQSxTQUFBO0FBQUEsT0FBQTtBQUFBLFFBQUE7QUFBQSxVQUFjLE1BQU0sSUFBSSxDQUFKLGlCQUFBLENBQ2xCO0FBQUEsUUFBQSxLQUFBLEVBQUEsQ0FBQTtBQUNBLFFBQUEsa0JBQUEsRUFBb0I7QUFEcEIsT0FEa0IsQ0FBcEI7O0FBSUEsVUFBRywyQkFBSCxTQUFHLENBQUgsRUFBQTtlQUFBLEs7QUFBQSxPQUFBLE1BQUE7ZUFBQSxJOztBQUxPLEtBQVQ7O0FBVUEsSUFBQSxNQUFBLEdBQVMsZ0JBQUEsSUFBQSxFQUFBO0FBQ1AsYUFBQSxNQUFNLElBQUksQ0FBSixjQUFBLENBQW9CO0FBQUEsUUFBQSxZQUFBLEVBQWM7QUFBZCxPQUFwQixDQUFOO0FBcERGLEtBbURBLENBcERGLEM7OztXQXdERTtBQUFBLE1BQUEsU0FBQTtBQUFBLE1BQUEsTUFBQTtBQUFBLE1BQUEsSUFBQTtBQUFBLE1BQUEsTUFBQTtBQUFBLE1BQUE7QUFBQSxLO0FBeERGLEc7QUFEb0IsQ0FBdEI7O2VBMkRlLG1CIiwic291cmNlc0NvbnRlbnQiOlsiIyBQcmltaXRpdmVzIGZvciB0aGUgc2VydmljZSBDbG91ZFdhdGNoIExvZ3MuICBUaGUgbWFpbiBlbnRpdGllcyBhcmUgZ3JvdXBzIGFuZCBzdHJlYW1zLlxuIyBUaGlzIGZvbGxvd3MgdGhlIG5hbWluZyBjb252ZW50aW9uIHRoYXQgbWV0aG9kcyB0aGF0IHdvcmsgb24gZ3JvdXBzIHdpbGwgYmVcbiMgcHJlZml4ZWQgXCJncm91cCpcIiwgd2hlcmVhcyBzdHJlYW1zIG1ldGhvZHMgd2lsbCBoYXZlIG5vIHByZWZpeC5cblxuaW1wb3J0IHtjYXQsIGVtcHR5fSBmcm9tIFwicGFuZGEtcGFyY2htZW50XCJcbmltcG9ydCB7YXBwbHlDb25maWd1cmF0aW9ufSBmcm9tIFwiLi4vbGlmdFwiXG5cbmNsb3Vkd2F0Y2hQcmltaXRpdmUgPSAoU0RLKSAtPlxuICAoY29uZmlndXJhdGlvbikgLT5cbiAgICBsb2dzID0gYXBwbHlDb25maWd1cmF0aW9uIGNvbmZpZ3VyYXRpb24sIFNESy5DbG91ZFdhdGNoTG9nc1xuXG4gICAgIyBSZXR1cm5zIGRhdGEgb24gYSBncm91cCBvciBncm91cHMgZ2l2ZW4gYW4gaW5wdXQgcHJlZml4LlxuICAgIGdyb3VwTGlzdCA9IChwcmVmaXgsIGN1cnJlbnQ9W10sIHRva2VuKSAtPlxuICAgICAgcGFyYW1zID0gbG9nR3JvdXBOYW1lUHJlZml4OiBwcmVmaXhcbiAgICAgIHBhcmFtcy5uZXh0VG9rZW4gPSB0b2tlbiBpZiB0b2tlblxuICAgICAge2xvZ0dyb3VwcywgbmV4dFRva2VufSA9IGF3YWl0IGxvZ3MuZGVzY3JpYmVMb2dHcm91cHMgcGFyYW1zXG4gICAgICBjdXJyZW50ID0gY2F0IGN1cnJlbnQsIGxvZ0dyb3Vwc1xuICAgICAgaWYgbmV4dFRva2VuXG4gICAgICAgIGF3YWl0IGdyb3VwTGlzdCBwcmVmaXgsIGN1cnJlbnQsIG5leHRUb2tlblxuICAgICAgZWxzZVxuICAgICAgICBjdXJyZW50XG5cbiAgICBsYXRlc3QgPSAobmFtZSkgLT5cbiAgICAgIHBhcmFtcyA9XG4gICAgICAgIGxvZ0dyb3VwTmFtZTogbmFtZVxuICAgICAgICBvcmRlckJ5OiBcIkxhc3RFdmVudFRpbWVcIlxuICAgICAgICBkZXNjZW5kaW5nOiB0cnVlXG4gICAgICAgIGxpbWl0OiAxXG5cbiAgICAgIHtsb2dTdHJlYW1zfSA9IGF3YWl0IGxvZ3MuZGVzY3JpYmVMb2dTdHJlYW1zIHBhcmFtc1xuICAgICAgaWYgZW1wdHkgbG9nU3RyZWFtc1xuICAgICAgICB1bmRlZmluZWRcbiAgICAgIGVsc2VcbiAgICAgICAgbG9nU3RyZWFtc1swXVxuXG4gICAgdGFpbCA9IChncm91cCwgc3RyZWFtLCB0aW1lLCBjdXJyZW50PVtdLCB0b2tlbj1mYWxzZSkgLT5cbiAgICAgIHBhcmFtcyA9XG4gICAgICAgIGxvZ0dyb3VwTmFtZTogZ3JvdXBcbiAgICAgICAgbG9nU3RyZWFtTmFtZTogc3RyZWFtXG4gICAgICAgIHN0YXJ0VGltZTogdGltZVxuICAgICAgICBzdGFydEZyb21IZWFkOiB0cnVlXG4gICAgICBwYXJhbXMubmV4dFRva2VuID0gdG9rZW4gaWYgdG9rZW5cblxuICAgICAge2V2ZW50cywgbmV4dEZvcndhcmRUb2tlbn0gPSBhd2FpdCBsb2dzLmdldExvZ0V2ZW50cyBwYXJhbXNcbiAgICAgIGN1cnJlbnQgPSBjYXQgY3VycmVudCwgZXZlbnRzXG4gICAgICBpZiBuZXh0Rm9yd2FyZFRva2VuICE9IHRva2VuXG4gICAgICAgIGF3YWl0IHRhaWwgZ3JvdXAsIHN0cmVhbSwgdGltZSwgY3VycmVudCwgbmV4dEZvcndhcmRUb2tlblxuICAgICAgZWxzZVxuICAgICAgICBjdXJyZW50XG5cbiAgICBleGlzdHMgPSAobmFtZSkgLT5cbiAgICAgIHtsb2dHcm91cHN9ID0gYXdhaXQgbG9ncy5kZXNjcmliZUxvZ0dyb3Vwc1xuICAgICAgICBsaW1pdDogMVxuICAgICAgICBsb2dHcm91cE5hbWVQcmVmaXg6IG5hbWVcblxuICAgICAgaWYgZW1wdHkgbG9nR3JvdXBzXG4gICAgICAgIGZhbHNlXG4gICAgICBlbHNlXG4gICAgICAgIHRydWVcblxuICAgIGNyZWF0ZSA9IChuYW1lKSAtPlxuICAgICAgYXdhaXQgbG9ncy5jcmVhdGVMb2dHcm91cCBsb2dHcm91cE5hbWU6IG5hbWVcblxuICAgICMgUmV0dXJuIGV4cG9zZWQgZnVuY3Rpb25zLlxuICAgIHtncm91cExpc3QsIGxhdGVzdCwgdGFpbCwgZXhpc3RzLCBjcmVhdGV9XG5cbmV4cG9ydCBkZWZhdWx0IGNsb3Vkd2F0Y2hQcmltaXRpdmVcbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=/Users/david/repos/sundog/src/primitives/cloudwatchlogs.coffee