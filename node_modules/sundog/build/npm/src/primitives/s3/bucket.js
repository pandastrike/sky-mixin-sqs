"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pandaParchment = require("panda-parchment");

var _pandaRiver = require("panda-river");

var _privateUtils = require("../private-utils");

// Primitives for the service S3.  The main entities are buckets and objects.
// This follows the naming convention that methods that work on buckets will be
// prefixed "bucket*", whereas object methods will have no prefix.
var Section;

Section = function (s3, fns) {
  var bucketCreate, bucketDelete, bucketEmpty, bucketExists, bucketHead, bucketSetACL, bucketSetCORS, bucketSetWebsite, bucketTouch, buildCORSRule;

  bucketHead = bucketExists = async function (name) {
    var e;

    try {
      return await s3.headBucket({
        Bucket: name
      });
    } catch (error) {
      e = error;
      return (0, _privateUtils.notFound)(e);
    }
  };

  bucketTouch = async function (name) {
    if (await bucketExists(name)) {
      return true;
    }

    await s3.createBucket({
      Bucket: name
    });
    return await (0, _pandaParchment.sleep)(20000); // race condition with S3 API.  Wait to be available.
  };

  bucketCreate = async function (name, options = {}) {
    return await s3.create((0, _pandaParchment.merge)({
      Bucket: name
    }, options));
  }; // Sets the access control permissions on the whole bucket.


  bucketSetACL = async function (name, value) {
    return await s3.putBucketAcl({
      Bucket: name,
      ACL: value
    });
  };

  buildCORSRule = function ({
    allowedHeaders = ["*"],
    allowedMethods = ["GET"],
    allowedOrigins = ["*"],
    exposedHeaders = [""],
    maxAge
  }) {
    return {
      AllowedHeaders: allowedHeaders,
      AllowedMethods: allowedMethods,
      AllowedOrigins: allowedOrigins,
      ExposeHeaders: exposedHeaders,
      MaxAgeSeconds: maxAge
    };
  }; // Set Cross Origin Resource Sharing (CORS) configuration for the whole bucket.


  bucketSetCORS = async function (name, config) {
    var c, rules;

    if ((0, _pandaParchment.isArray)(config)) {
      rules = function () {
        var i, len, results;
        results = [];

        for (i = 0, len = config.length; i < len; i++) {
          c = config[i];
          results.push(buildCORSRule(c));
        }

        return results;
      }();
    } else {
      rules = [buildCORSRule(config)];
    }

    return await s3.putBucketCors({
      Bucket: name,
      CORSConfiguration: {
        CORSRules: rules
      },
      ContentMD5: ""
    });
  };

  bucketSetWebsite = async function (name, site, redirect) {
    var params, ref;
    params = {
      Bucket: name
    };

    if (site) {
      params.WebsiteConfiguration = {
        IndexDocument: {
          Suffix: site.index
        },
        ErrorDocument: {
          Key: site.error
        }
      };
    } else {
      params.WebsiteConfiguration = {
        RedirectAllRequestsTo: {
          HostName: redirect.host,
          Protocol: (ref = redirect.protocol) != null ? ref : "https"
        }
      };
    }

    return await s3.putBucketWebsite(params);
  };

  bucketDelete = async function (name) {
    var e;

    try {
      return await s3.deleteBucket({
        Bucket: name
      });
    } catch (error) {
      e = error;
      return (0, _privateUtils.notFound)(e);
    }
  }; // TODO: make this more efficient by throttling to X connections at once. AWS
  // only supports N requests per second from an account, and I don't want this
  // to violate that limit, but we can do better than one at a time.


  bucketEmpty = async function (name) {
    var batch, items, keys, ref, results;
    items = await fns.list(name);
    keys = (0, _pandaRiver.collect)((0, _pandaRiver.project)("Key", items));
    ref = (0, _pandaRiver.partition)(1000, keys);
    results = [];

    for (batch of ref) {
      results.push((await fns.deleteBatch(name, batch)));
    }

    return results;
  };

  return {
    bucketExists,
    bucketHead,
    bucketTouch,
    bucketCreate,
    bucketSetACL,
    bucketSetCORS,
    bucketSetWebsite,
    bucketDelete,
    bucketEmpty
  };
};

var _default = Section;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/repos/sundog/src/primitives/s3/bucket.coffee