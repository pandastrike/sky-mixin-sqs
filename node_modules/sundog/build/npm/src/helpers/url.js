"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.root = exports.regularlyQualify = exports.fullyQualify = exports.default = void 0;

var _pandaParchment = require("panda-parchment");

var fullyQualify,
    regularlyQualify,
    root,
    indexOf = [].indexOf;
exports.root = root;
exports.regularlyQualify = regularlyQualify;
exports.fullyQualify = fullyQualify;

// Enforces "fully qualified" form of hostnames and domains.  Idompotent.
exports.fullyQualify = fullyQualify = function (name) {
  if ((0, _pandaParchment.last)(name) === ".") {
    return name;
  } else {
    return name + ".";
  }
}; // Named somewhat sarcastically.  Enforces "regular" form of hostnames
// and domains that is more expected when navigating.  Idompotnent.


exports.regularlyQualify = regularlyQualify = function (name) {
  if ((0, _pandaParchment.last)(name) === ".") {
    return name.slice(0, -1);
  } else {
    return name;
  }
}; // Given an arbitrary URL, return the fully qualified root domain.
// https://awesome.example.com/test/42#?=What+is+the+answer  =>  example.com.


exports.root = root = function (url) {
  var domain, e, terms;

  try {
    // Remove protocol (http, ftp, etc.), if present, and get domain
    domain = url.split('/');
    domain = indexOf.call(url, "://") >= 0 ? domain[2] : domain[0]; // Remove port number, if present

    domain = domain.split(':')[0]; // Now grab the root: the top-level-domain, plus the term to the left.

    terms = regularlyQualify(domain).split(".");
    terms = terms.slice(terms.length - 2); // Return the fully qualified version of the root

    return fullyQualify(terms.join("."));
  } catch (error) {
    e = error;
    throw new Error(`Failed to parse root url: ${e}`);
  }
};

var _default = {
  fullyQualify,
  regularlyQualify,
  root
};
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC9yZXBvcy9zdW5kb2cvc3JjL2hlbHBlcnMvdXJsLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQUEsSUFBQSxZQUFBO0FBQUEsSUFBQSxnQkFBQTtBQUFBLElBQUEsSUFBQTtBQUFBLElBQUEsT0FBQSxHQUFBLEdBQUEsT0FBQTs7Ozs7O0FBR0EsdUJBQUEsWUFBQSxHQUFlLFVBQUEsSUFBQSxFQUFBO0FBQVUsTUFBRywwQkFBQSxJQUFBLE1BQUgsR0FBQSxFQUFBO1dBQUEsSTtBQUFBLEdBQUEsTUFBQTtXQUFvQyxJQUFBLEdBQXBDLEc7O0FBSHpCLENBR0EsQzs7OztBQUlBLDJCQUFBLGdCQUFBLEdBQW1CLFVBQUEsSUFBQSxFQUFBO0FBQVUsTUFBRywwQkFBQSxJQUFBLE1BQUgsR0FBQSxFQUFBO1dBQTBCLElBQUssQ0FBQSxLQUFMLENBQUssQ0FBTCxFQUFLLENBQS9CLENBQTBCLEM7QUFBMUIsR0FBQSxNQUFBO1dBQUEsSTs7QUFQN0IsQ0FPQSxDOzs7O0FBSUEsZUFBQSxJQUFBLEdBQU8sVUFBQSxHQUFBLEVBQUE7QUFDTCxNQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsS0FBQTs7QUFBQSxNQUFBOztBQUVFLElBQUEsTUFBQSxHQUFTLEdBQUcsQ0FBSCxLQUFBLENBQUEsR0FBQSxDQUFUO0FBQ0EsSUFBQSxNQUFBLEdBQVksT0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsS0FBQSxLQUFILENBQUcsR0FBa0IsTUFBTyxDQUE1QixDQUE0QixDQUF6QixHQUFpQyxNQUFPLENBRHBELENBQ29ELENBQXBELENBSEYsQzs7QUFNRSxJQUFBLE1BQUEsR0FBUyxNQUFNLENBQU4sS0FBQSxDQUFBLEdBQUEsRUFKVCxDQUlTLENBQVQsQ0FORixDOztBQVNFLElBQUEsS0FBQSxHQUFRLGdCQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBUjtBQUNBLElBQUEsS0FBQSxHQUFRLEtBQUssQ0FBTCxLQUFBLENBQVksS0FBSyxDQUFMLE1BQUEsR0FScEIsQ0FRUSxDQUFSLENBVkYsQzs7V0FhRSxZQUFBLENBQWEsS0FBSyxDQUFMLElBQUEsQ0FiZixHQWFlLENBQWIsQztBQWJGLEdBQUEsQ0FBQSxPQUFBLEtBQUEsRUFBQTtBQWNNLElBQUEsQ0FBQSxHQUFBLEtBQUE7QUFDSixVQUFNLElBQUEsS0FBQSxDQUFVLDZCQUFBLENBZmxCLEVBZVEsQ0FBTjs7QUFoQkcsQ0FBUDs7ZUFrQmU7QUFBQSxFQUFBLFlBQUE7QUFBQSxFQUFBLGdCQUFBO0FBQUEsRUFBQTtBQUFBLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2xhc3R9IGZyb20gXCJwYW5kYS1wYXJjaG1lbnRcIlxuXG4jIEVuZm9yY2VzIFwiZnVsbHkgcXVhbGlmaWVkXCIgZm9ybSBvZiBob3N0bmFtZXMgYW5kIGRvbWFpbnMuICBJZG9tcG90ZW50LlxuZnVsbHlRdWFsaWZ5ID0gKG5hbWUpIC0+IGlmIGxhc3QobmFtZSkgPT0gXCIuXCIgdGhlbiBuYW1lIGVsc2UgbmFtZSArIFwiLlwiXG5cbiMgTmFtZWQgc29tZXdoYXQgc2FyY2FzdGljYWxseS4gIEVuZm9yY2VzIFwicmVndWxhclwiIGZvcm0gb2YgaG9zdG5hbWVzXG4jIGFuZCBkb21haW5zIHRoYXQgaXMgbW9yZSBleHBlY3RlZCB3aGVuIG5hdmlnYXRpbmcuICBJZG9tcG90bmVudC5cbnJlZ3VsYXJseVF1YWxpZnkgPSAobmFtZSkgLT4gaWYgbGFzdChuYW1lKSA9PSBcIi5cIiB0aGVuIG5hbWVbLi4uLTFdIGVsc2UgbmFtZVxuXG4jIEdpdmVuIGFuIGFyYml0cmFyeSBVUkwsIHJldHVybiB0aGUgZnVsbHkgcXVhbGlmaWVkIHJvb3QgZG9tYWluLlxuIyBodHRwczovL2F3ZXNvbWUuZXhhbXBsZS5jb20vdGVzdC80MiM/PVdoYXQraXMrdGhlK2Fuc3dlciAgPT4gIGV4YW1wbGUuY29tLlxucm9vdCA9ICh1cmwpIC0+XG4gIHRyeVxuICAgICMgUmVtb3ZlIHByb3RvY29sIChodHRwLCBmdHAsIGV0Yy4pLCBpZiBwcmVzZW50LCBhbmQgZ2V0IGRvbWFpblxuICAgIGRvbWFpbiA9IHVybC5zcGxpdCgnLycpXG4gICAgZG9tYWluID0gaWYgXCI6Ly9cIiBpbiB1cmwgdGhlbiBkb21haW5bMl0gZWxzZSBkb21haW5bMF1cblxuICAgICMgUmVtb3ZlIHBvcnQgbnVtYmVyLCBpZiBwcmVzZW50XG4gICAgZG9tYWluID0gZG9tYWluLnNwbGl0KCc6JylbMF1cblxuICAgICMgTm93IGdyYWIgdGhlIHJvb3Q6IHRoZSB0b3AtbGV2ZWwtZG9tYWluLCBwbHVzIHRoZSB0ZXJtIHRvIHRoZSBsZWZ0LlxuICAgIHRlcm1zID0gcmVndWxhcmx5UXVhbGlmeShkb21haW4pLnNwbGl0KFwiLlwiKVxuICAgIHRlcm1zID0gdGVybXMuc2xpY2UodGVybXMubGVuZ3RoIC0gMilcblxuICAgICMgUmV0dXJuIHRoZSBmdWxseSBxdWFsaWZpZWQgdmVyc2lvbiBvZiB0aGUgcm9vdFxuICAgIGZ1bGx5UXVhbGlmeSB0ZXJtcy5qb2luKFwiLlwiKVxuICBjYXRjaCBlXG4gICAgdGhyb3cgbmV3IEVycm9yIFwiRmFpbGVkIHRvIHBhcnNlIHJvb3QgdXJsOiAje2V9XCJcblxuZXhwb3J0IGRlZmF1bHQge2Z1bGx5UXVhbGlmeSwgcmVndWxhcmx5UXVhbGlmeSwgcm9vdH1cbmV4cG9ydCB7ZnVsbHlRdWFsaWZ5LCByZWd1bGFybHlRdWFsaWZ5LCByb290fVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=/Users/david/repos/sundog/src/helpers/url.coffee