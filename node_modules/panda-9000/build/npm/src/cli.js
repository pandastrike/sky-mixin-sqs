"use strict";

var _vm = _interopRequireDefault(require("vm"));

var _module = _interopRequireDefault(require("module"));

var _coffeescript = _interopRequireDefault(require("coffeescript"));

var _path = require("path");

var _task = require("./task");

var _pandaQuill = require("panda-quill");

var _safe = require("colors/safe");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var path, tasks;
tasks = process.argv.slice(2); // TODO add checks for .js or .litcoffee

path = (0, _path.join)(process.cwd(), "tasks", "index.coffee");

(async function () {
  var error, i, len, name, results;

  try {
    if (await (0, _pandaQuill.isFile)(path)) {
      // import tasks
      _coffeescript.default.run((await (0, _pandaQuill.read)(path)), {
        filename: path,
        bare: true,
        inlineMap: true,
        transpile: {
          presets: [["@babel/preset-env", {
            targets: {
              node: "current"
            }
          }]]
        }
      });

      if (tasks.length === 0) {
        return (0, _task.run)("default");
      } else {
        results = [];

        for (i = 0, len = tasks.length; i < len; i++) {
          name = tasks[i]; // TODO: this is kind of redundant with the code
          // in runner to run dependent tasks

          results.push((await (0, _task.run)(name)));
        }

        return results;
      }
    } else {
      console.error((0, _safe.red)("Unable to find a tasks/index.{js,coffee} file"));
      return process.exit(-1);
    }
  } catch (error1) {
    error = error1;
    return console.error((0, _safe.red)(`p9k: ${error.stack}`));
  }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9keW9kZXIvcmVwb3MvcGFuZGEtOTAwMC9zcmMvY2xpLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBTkEsSUFBQSxJQUFBLEVBQUEsS0FBQTtBQVFBLEtBQUEsR0FBUSxPQUFPLENBQUMsSUFBUixDQUFhLEtBQWIsQ0FSUixDQVFRLENBQVIsQzs7QUFFQSxJQUFBLEdBQVEsZ0JBQUssT0FBTyxDQUFaLEdBQUssRUFBTCxFQUFBLE9BQUEsRUFBQSxjQUFBLENBQVI7O0FBRUcsQ0FBQSxrQkFBQTtBQUNELE1BQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUE7O0FBQUEsTUFBQTtBQUNFLFFBQUcsTUFBTSx3QkFBVCxJQUFTLENBQVQsRUFBQTs7QUFFRSw0QkFBQSxHQUFBLEVBQVksTUFBTSxzQkFBbEIsSUFBa0IsQ0FBbEIsR0FDRTtBQUFBLFFBQUEsUUFBQSxFQUFBLElBQUE7QUFDQSxRQUFBLElBQUEsRUFEQSxJQUFBO0FBRUEsUUFBQSxTQUFBLEVBRkEsSUFBQTtBQUdBLFFBQUEsU0FBQSxFQUNFO0FBQUEsVUFBQSxPQUFBLEVBQVMsQ0FBQyxDQUFBLG1CQUFBLEVBRVI7QUFBQSxZQUFBLE9BQUEsRUFBUztBQUFBLGNBQUEsSUFBQSxFQUFNO0FBQU47QUFBVCxXQUZRLENBQUQ7QUFBVDtBQUpGLE9BREY7O0FBVUEsVUFBRyxLQUFLLENBQUwsTUFBQSxLQUFILENBQUEsRUFBQTtlQUNFLGVBREYsU0FDRSxDO0FBREYsT0FBQSxNQUFBO0FBS21CLFFBQUEsT0FBQSxHQUFBLEVBQUE7O0FBQUEsYUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLEdBQUEsR0FBQSxLQUFBLENBQUEsTUFBQSxFQUFBLENBQUEsR0FBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUE7dUJBQUEsQyxFQUFBLEM7OztrQkFBaEIsSSxFQUFBLE1BQU0sZUFBTixJQUFNLEM7QUFBVTs7ZUFMbkIsTztBQVpGO0FBQUEsS0FBQSxNQUFBO0FBbUJFLE1BQUEsT0FBTyxDQUFQLEtBQUEsQ0FBYyxlQUFkLCtDQUFjLENBQWQ7YUFDQSxPQUFPLENBQVAsSUFBQSxDQUFhLENBcEJmLENBb0JFLEM7QUFyQko7QUFBQSxHQUFBLENBQUEsT0FBQSxNQUFBLEVBQUE7QUFzQk0sSUFBQSxLQUFBLEdBQUEsTUFBQTtXQUNKLE9BQU8sQ0FBUCxLQUFBLENBQWMsZUFBSSxRQUFRLEtBQUssQ0FBYixLQXZCcEIsRUF1QmdCLENBQWQsQzs7QUF4QkosQ0FBRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2bSBmcm9tIFwidm1cIlxuaW1wb3J0IE1vZHVsZSBmcm9tIFwibW9kdWxlXCJcbmltcG9ydCBjb2ZmZWUgZnJvbSBcImNvZmZlZXNjcmlwdFwiXG5pbXBvcnQge2pvaW59IGZyb20gXCJwYXRoXCJcbmltcG9ydCB7cnVufSBmcm9tIFwiLi90YXNrXCJcbmltcG9ydCB7aXNGaWxlLCByZWFkfSBmcm9tIFwicGFuZGEtcXVpbGxcIlxuaW1wb3J0IHtyZWR9IGZyb20gXCJjb2xvcnMvc2FmZVwiXG5cbnRhc2tzID0gcHJvY2Vzcy5hcmd2WzIuLl1cbiMgVE9ETyBhZGQgY2hlY2tzIGZvciAuanMgb3IgLmxpdGNvZmZlZVxucGF0aCA9IChqb2luIHByb2Nlc3MuY3dkKCksIFwidGFza3NcIiwgXCJpbmRleC5jb2ZmZWVcIilcblxuZG8gLT5cbiAgdHJ5XG4gICAgaWYgYXdhaXQgaXNGaWxlIHBhdGhcbiAgICAgICMgaW1wb3J0IHRhc2tzXG4gICAgICBjb2ZmZWUucnVuIChhd2FpdCByZWFkIHBhdGgpLFxuICAgICAgICBmaWxlbmFtZTogcGF0aFxuICAgICAgICBiYXJlOiB0cnVlXG4gICAgICAgIGlubGluZU1hcDogdHJ1ZVxuICAgICAgICB0cmFuc3BpbGU6XG4gICAgICAgICAgcHJlc2V0czogW1tcbiAgICAgICAgICAgIFwiQGJhYmVsL3ByZXNldC1lbnZcIlxuICAgICAgICAgICAgdGFyZ2V0czogbm9kZTogXCJjdXJyZW50XCJcbiAgICAgICAgICBdXVxuXG4gICAgICBpZiB0YXNrcy5sZW5ndGggPT0gMFxuICAgICAgICBydW4gXCJkZWZhdWx0XCJcbiAgICAgIGVsc2VcbiAgICAgICAgIyBUT0RPOiB0aGlzIGlzIGtpbmQgb2YgcmVkdW5kYW50IHdpdGggdGhlIGNvZGVcbiAgICAgICAgIyBpbiBydW5uZXIgdG8gcnVuIGRlcGVuZGVudCB0YXNrc1xuICAgICAgICAoYXdhaXQgcnVuIG5hbWUpIGZvciBuYW1lIGluIHRhc2tzXG4gICAgZWxzZVxuICAgICAgY29uc29sZS5lcnJvciByZWQgXCJVbmFibGUgdG8gZmluZCBhIHRhc2tzL2luZGV4Lntqcyxjb2ZmZWV9IGZpbGVcIlxuICAgICAgcHJvY2Vzcy5leGl0IC0xXG4gIGNhdGNoIGVycm9yXG4gICAgY29uc29sZS5lcnJvciByZWQgXCJwOWs6ICN7ZXJyb3Iuc3RhY2t9XCJcbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=/Users/dyoder/repos/panda-9000/src/cli.coffee