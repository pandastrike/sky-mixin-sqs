"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Method = void 0;
var Method,
    create,
    define,
    dispatch,
    lookup,
    splice = [].splice;
exports.Method = Method;

lookup = function (m, ax) {
  var f, i, j, len, match, ref, term, terms;
  ref = m.entries; // go through each definition in our lookup 'table'

  for (j = 0, len = ref.length; j < len; j++) {
    [terms, f] = ref[j];

    if (terms.length > ax.length) {
      // there must be at least one argument per term
      // (variadic terms can consume multiple arguments,
      // so the converse is not true)
      continue;
    } // we can't have a match if we don't match any terms


    match = false; // each argument must be consumed

    i = 0;

    while (i < ax.length) {
      if ((term = terms[i]) == null) {
        match = false;
        break;
      } // if the term may be variadic (indicated by taking 0 arguments)
      // try the term with the remaining arguments


      if (term.length === 0) {
        match = term(...ax.slice(i));
        break;
      }

      if (!(match = term(ax[i++]))) {
        // otherwise, we have the default case, where we try to match
        // the next argument with the next term
        break;
      }
    }

    if (match) {
      // if we ended up with a match, just return the corresponding fn
      return f;
    }
  } // if exit the loop without returning a match, return the default


  return m.default;
};

dispatch = function (method, ax) {
  var f;
  f = lookup(method, ax);
  return f(...ax);
};

create = function (options) {
  var k, m, v;

  m = function (...args) {
    return dispatch(m, args);
  };

  m.entries = [];

  for (k in options) {
    v = options[k];
    m[k] = v;
  }

  if (m.default == null) {
    m.default = function () {
      throw new TypeError("No method matches arguments.");
    };
  }

  return m;
};

define = function (m, ...terms) {
  var f, ref;
  ref = terms, [...terms] = ref, [f] = splice.call(terms, -1);
  return m.entries.unshift([terms, f]);
};

exports.Method = Method = {
  create,
  define,
  lookup
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9keW9kZXIvcmVwb3MvcGFuZGEtZ2VuZXJpY3Mvc3JjL2luZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBLE1BQUE7QUFBQSxJQUFBLE1BQUE7QUFBQSxJQUFBLE1BQUE7QUFBQSxJQUFBLFFBQUE7QUFBQSxJQUFBLE1BQUE7QUFBQSxJQUFBLE1BQUEsR0FBQSxHQUFBLE1BQUE7OztBQUFBLE1BQUEsR0FBUyxVQUFBLENBQUEsRUFBQSxFQUFBLEVBQUE7QUFHUCxNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBO0FBQUEsRUFBQSxHQUFBLEdBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FITyxDOztBQUdQLE9BQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxHQUFBLEdBQUEsR0FBQSxDQUFBLE1BQUEsRUFBQSxDQUFBLEdBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBO0FBQUksS0FBQSxLQUFBLEVBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUE7O0FBS0YsUUFBWSxLQUFLLENBQUwsTUFBQSxHQUFlLEVBQUUsQ0FBN0IsTUFBQSxFQUFBOzs7O0FBQUE7QUFBQSxLQUxGLEM7OztBQVFFLElBQUEsS0FBQSxHQUhBLEtBR0EsQ0FSRixDOztBQVdFLElBQUEsQ0FBQSxHQUFJLENBQUo7O0FBQ0EsV0FBTSxDQUFBLEdBQUksRUFBRSxDQUFaLE1BQUEsRUFBQTtBQUlFLFVBQUksQ0FBQSxJQUFBLEdBQUEsS0FBQSxDQUFBLENBQUEsQ0FBQSxLQUFKLElBQUEsRUFBQTtBQUNFLFFBQUEsS0FBQSxHQUFRLEtBQVI7QUFERjtBQUFBLE9BSkYsQzs7OztBQVVFLFVBQUcsSUFBSSxDQUFKLE1BQUEsS0FBSCxDQUFBLEVBQUE7QUFDRSxRQUFBLEtBQUEsR0FBUSxJQUFBLENBQUssR0FBQSxFQUFHLENBQUEsS0FBSCxDQUFMLENBQUssQ0FBTCxDQUFSO0FBREY7OztBQU1BLFVBQVMsRUFBRSxLQUFBLEdBQVEsSUFBQSxDQUFLLEVBQUcsQ0FBQSxDQUEzQixFQUEyQixDQUFSLENBQVYsQ0FBVCxFQUFBOzs7QUFBQTs7QUFoQkY7O0FBbUJBLFFBQUEsS0FBQSxFQUFBOztBQUFBLGFBQUEsQ0FBQTs7QUEvQkYsR0FITyxDOzs7U0FxQ1AsQ0FBQyxDQUFDLE87QUFyQ0ssQ0FBVDs7QUF1Q0EsUUFBQSxHQUFXLFVBQUEsTUFBQSxFQUFBLEVBQUEsRUFBQTtBQUNULE1BQUEsQ0FBQTtBQUFBLEVBQUEsQ0FBQSxHQUFJLE1BQUEsQ0FBQSxNQUFBLEVBQUEsRUFBQSxDQUFKO1NBQ0EsQ0FBQSxDQUFFLEdBQUYsRUFBQSxDO0FBRlMsQ0FBWDs7QUFJQSxNQUFBLEdBQVMsVUFBQSxPQUFBLEVBQUE7QUFDUCxNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQTs7QUFBQSxFQUFBLENBQUEsR0FBSSxVQUFBLEdBQUEsSUFBQSxFQUFBO1dBQWEsUUFBQSxDQUFBLENBQUEsRUFBQSxJQUFBLEM7QUFBYixHQUFKOztBQUNBLEVBQUEsQ0FBQyxDQUFELE9BQUEsR0FBWSxFQUFaOztBQUNTLE9BQUEsQ0FBQSxJQUFBLE9BQUEsRUFBQTs7QUFBVCxJQUFBLENBQUUsQ0FBRixDQUFFLENBQUYsR0FBTyxDQUFQO0FBQVM7OztBQUNULElBQUEsQ0FBQyxDQUFDLE9BQUYsR0FBYSxZQUFBO0FBQUcsWUFBTSxJQUFBLFNBQUEsQ0FBQSw4QkFBQSxDQUFOO0FBQUgsS0FBYjs7O1NBQ0EsQztBQUxPLENBQVQ7O0FBT0EsTUFBQSxHQUFTLFVBQUEsQ0FBQSxFQUFBLEdBQUEsS0FBQSxFQUFBO0FBQ1AsTUFBQSxDQUFBLEVBQUEsR0FBQTtrQ0FEcUIsQyxJQUFBLE1BQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxFQUFBLENBQUEsQ0FBQSxDO1NBQ3JCLENBQUMsQ0FBQyxPQUFGLENBQUEsT0FBQSxDQUFrQixDQUFBLEtBQUEsRUFBbEIsQ0FBa0IsQ0FBbEIsQztBQURPLENBQVQ7O0FBR0EsaUJBQUEsTUFBQSxHQUFTO0FBQUEsRUFBQSxNQUFBO0FBQUEsRUFBQSxNQUFBO0FBQUEsRUFBQTtBQUFBLENBQVQiLCJzb3VyY2VzQ29udGVudCI6WyJsb29rdXAgPSAobSwgYXgpIC0+XG5cbiAgIyBnbyB0aHJvdWdoIGVhY2ggZGVmaW5pdGlvbiBpbiBvdXIgbG9va3VwICd0YWJsZSdcbiAgZm9yIFt0ZXJtcywgZl0gaW4gbS5lbnRyaWVzXG5cbiAgICAjIHRoZXJlIG11c3QgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IHBlciB0ZXJtXG4gICAgIyAodmFyaWFkaWMgdGVybXMgY2FuIGNvbnN1bWUgbXVsdGlwbGUgYXJndW1lbnRzLFxuICAgICMgc28gdGhlIGNvbnZlcnNlIGlzIG5vdCB0cnVlKVxuICAgIGNvbnRpbnVlIGlmIHRlcm1zLmxlbmd0aCA+IGF4Lmxlbmd0aFxuXG4gICAgIyB3ZSBjYW4ndCBoYXZlIGEgbWF0Y2ggaWYgd2UgZG9uJ3QgbWF0Y2ggYW55IHRlcm1zXG4gICAgbWF0Y2ggPSBmYWxzZVxuXG4gICAgIyBlYWNoIGFyZ3VtZW50IG11c3QgYmUgY29uc3VtZWRcbiAgICBpID0gMFxuICAgIHdoaWxlIGkgPCBheC5sZW5ndGhcblxuICAgICAgIyBpZiB0aGVyZSdzIG5vIGNvcnJlc3BvbmRpbmcgdGVybSwgd2UgaGF2ZSBsZWZ0b3ZlclxuICAgICAgIyBhcmd1bWVudHMgd2l0aCBubyB0ZXJtIHRvIGNvbnN1bWUgdGhlbSwgc28gbW92ZSBvblxuICAgICAgaWYgISh0ZXJtID0gdGVybXNbaV0pP1xuICAgICAgICBtYXRjaCA9IGZhbHNlXG4gICAgICAgIGJyZWFrXG5cbiAgICAgICMgaWYgdGhlIHRlcm0gbWF5IGJlIHZhcmlhZGljIChpbmRpY2F0ZWQgYnkgdGFraW5nIDAgYXJndW1lbnRzKVxuICAgICAgIyB0cnkgdGhlIHRlcm0gd2l0aCB0aGUgcmVtYWluaW5nIGFyZ3VtZW50c1xuICAgICAgaWYgdGVybS5sZW5ndGggPT0gMFxuICAgICAgICBtYXRjaCA9IHRlcm0gYXhbaS4uXS4uLlxuICAgICAgICBicmVha1xuXG4gICAgICAjIG90aGVyd2lzZSwgd2UgaGF2ZSB0aGUgZGVmYXVsdCBjYXNlLCB3aGVyZSB3ZSB0cnkgdG8gbWF0Y2hcbiAgICAgICMgdGhlIG5leHQgYXJndW1lbnQgd2l0aCB0aGUgbmV4dCB0ZXJtXG4gICAgICBicmVhayBpZiAhKG1hdGNoID0gdGVybSBheFtpKytdKVxuXG4gICAgIyBpZiB3ZSBlbmRlZCB1cCB3aXRoIGEgbWF0Y2gsIGp1c3QgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIGZuXG4gICAgcmV0dXJuIGYgaWYgbWF0Y2hcblxuICAjIGlmIGV4aXQgdGhlIGxvb3Agd2l0aG91dCByZXR1cm5pbmcgYSBtYXRjaCwgcmV0dXJuIHRoZSBkZWZhdWx0XG4gIG0uZGVmYXVsdFxuXG5kaXNwYXRjaCA9IChtZXRob2QsIGF4KSAtPlxuICBmID0gbG9va3VwIG1ldGhvZCwgYXhcbiAgZiBheC4uLlxuXG5jcmVhdGUgPSAob3B0aW9ucykgLT5cbiAgbSA9IChhcmdzLi4uKSAtPiBkaXNwYXRjaCBtLCBhcmdzXG4gIG0uZW50cmllcyA9IFtdXG4gIG1ba10gPSB2IGZvciBrLCB2IG9mIG9wdGlvbnNcbiAgbS5kZWZhdWx0ID89IC0+IHRocm93IG5ldyBUeXBlRXJyb3IgXCJObyBtZXRob2QgbWF0Y2hlcyBhcmd1bWVudHMuXCJcbiAgbVxuXG5kZWZpbmUgPSAobSwgdGVybXMuLi4sIGYpIC0+XG4gIG0uZW50cmllcy51bnNoaWZ0IFt0ZXJtcywgZl1cblxuTWV0aG9kID0ge2NyZWF0ZSwgZGVmaW5lLCBsb29rdXB9XG5leHBvcnQge01ldGhvZH1cbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=/Users/dyoder/repos/panda-generics/src/index.coffee