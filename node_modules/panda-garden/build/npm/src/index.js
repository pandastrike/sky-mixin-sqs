"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.memoize = exports.given = exports.tee = exports.once = exports.negate = exports.apply = exports.ternary = exports.binary = exports.unary = exports.spread = exports.pipe = exports.compose = exports.flip = exports.partial = exports.substitute = exports._ = exports.curry = exports.wrap = exports.identity = exports.noOp = void 0;

var _,
    apply,
    binary,
    compose,
    curry,
    flip,
    given,
    identity,
    memoize,
    negate,
    noOp,
    once,
    partial,
    pipe,
    spread,
    substitute,
    tee,
    ternary,
    unary,
    wrap,
    splice = [].splice;

exports.wrap = wrap;
exports.unary = unary;
exports.ternary = ternary;
exports.tee = tee;
exports.substitute = substitute;
exports.spread = spread;
exports.pipe = pipe;
exports.partial = partial;
exports.once = once;
exports.noOp = noOp;
exports.negate = negate;
exports.memoize = memoize;
exports.identity = identity;
exports.given = given;
exports.flip = flip;
exports.curry = curry;
exports.compose = compose;
exports.binary = binary;
exports.apply = apply;
exports._ = _;

exports.noOp = noOp = function () {};

exports.identity = identity = function (x) {
  return x;
};

exports.wrap = wrap = function (x) {
  return function () {
    return x;
  };
};

exports.curry = curry = function (f) {
  var g;
  return g = function (...ax) {
    if (ax.length >= f.length) {
      return f(...ax);
    } else {
      switch (f.length - ax.length) {
        case 1:
          return function (x) {
            return f(...ax, x);
          };

        case 2:
          return binary(curry(function (x, y) {
            return f(...ax, x, y);
          }));

        case 3:
          return ternary(curry(function (x, y, z) {
            return f(...ax, x, y, z);
          }));

        default:
          return function (...bx) {
            return g(...ax, ...bx);
          };
      }
    }
  };
};

exports._ = _ = {};
exports.substitute = substitute = curry(function (ax, bx) {
  var a, i, j, len, results;
  i = 0;
  results = [];

  for (j = 0, len = ax.length; j < len; j++) {
    a = ax[j];

    if (a === _) {
      results.push(bx[i++]);
    } else {
      results.push(a);
    }
  }

  return results;
});

exports.partial = partial = function (f, ...ax) {
  return function (...bx) {
    return f(...substitute(ax, bx));
  };
};

exports.flip = flip = function (f) {
  switch (f.length) {
    case 1:
      return f;

    case 2:
      return function (y, x) {
        return f(x, y);
      };

    case 3:
      return function (z, y, x) {
        return f(x, y, z);
      };

    default:
      return function (...ax) {
        return f(...ax.reverse());
      };
  }
};

exports.compose = compose = function (...fx) {
  var f, g, ref;
  ref = fx, [...fx] = ref, [f] = splice.call(fx, -1);

  if (fx.length === 0) {
    return f;
  } else {
    g = compose(...fx);
    return function (...ax) {
      var fax, ref1;

      if (((ref1 = fax = f(...ax)) != null ? ref1.then : void 0) != null) {
        return fax.then(g);
      } else {
        return g(fax);
      }
    };
  }
};

exports.pipe = pipe = flip(compose);

exports.spread = spread = function (f) {
  return function (ax) {
    return f(...ax);
  };
};

exports.unary = unary = function (f) {
  return function (x) {
    return f(x);
  };
};

exports.binary = binary = function (f) {
  return function (x, y) {
    return f(...arguments);
  };
};

exports.ternary = ternary = function (f) {
  return function (x, y, z) {
    return f(...arguments);
  };
};

exports.apply = apply = function (f, ...args) {
  return f(...args);
};

exports.negate = negate = function (f) {
  return function () {
    return !f(...arguments);
  };
};

exports.given = given = function (...args) {
  var f, ref;
  ref = args, [...args] = ref, [f] = splice.call(args, -1);
  return f(...args);
};

exports.tee = tee = function (f) {
  return function (a, ...bx) {
    var k, ref;

    if (((ref = k = f(a, ...bx)) != null ? ref.then : void 0) != null) {
      return k.then(function () {
        return a;
      });
    } else {
      return a;
    }
  };
};

exports.once = once = function (f) {
  return function (k) {
    return function () {
      if (k != null) {
        return k;
      } else {
        return k = f();
      }
    };
  }(void 0);
};

exports.memoize = memoize = function (f) {
  return function (cache) {
    return function (...args) {
      return cache[args] != null ? cache[args] : cache[args] = f(...args);
    };
  }({});
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9keW9kZXIvcmVwb3MvcGFuZGEtZ2FyZGVuL3NyYy9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUEsQ0FBQTtBQUFBLElBQUEsS0FBQTtBQUFBLElBQUEsTUFBQTtBQUFBLElBQUEsT0FBQTtBQUFBLElBQUEsS0FBQTtBQUFBLElBQUEsSUFBQTtBQUFBLElBQUEsS0FBQTtBQUFBLElBQUEsUUFBQTtBQUFBLElBQUEsT0FBQTtBQUFBLElBQUEsTUFBQTtBQUFBLElBQUEsSUFBQTtBQUFBLElBQUEsSUFBQTtBQUFBLElBQUEsT0FBQTtBQUFBLElBQUEsSUFBQTtBQUFBLElBQUEsTUFBQTtBQUFBLElBQUEsVUFBQTtBQUFBLElBQUEsR0FBQTtBQUFBLElBQUEsT0FBQTtBQUFBLElBQUEsS0FBQTtBQUFBLElBQUEsSUFBQTtBQUFBLElBQUEsTUFBQSxHQUFBLEdBQUEsTUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxlQUFBLElBQUEsR0FBTyxZQUFBLENBQUEsQ0FBUDs7QUFFQSxtQkFBQSxRQUFBLEdBQVcsVUFBQSxDQUFBLEVBQUE7U0FBTyxDO0FBQVAsQ0FBWDs7QUFFQSxlQUFBLElBQUEsR0FBTyxVQUFBLENBQUEsRUFBQTtTQUFPLFlBQUE7V0FBRyxDO0FBQUgsRztBQUFQLENBQVA7O0FBRUEsZ0JBQUEsS0FBQSxHQUFRLFVBQUEsQ0FBQSxFQUFBO0FBQ04sTUFBQSxDQUFBO1NBQUEsQ0FBQSxHQUFJLFVBQUEsR0FBQSxFQUFBLEVBQUE7QUFDRixRQUFHLEVBQUUsQ0FBRixNQUFBLElBQWEsQ0FBQyxDQUFqQixNQUFBLEVBQUE7YUFDRSxDQUFBLENBQUUsR0FESixFQUNFLEM7QUFERixLQUFBLE1BQUE7QUFHRSxjQUFPLENBQUMsQ0FBRCxNQUFBLEdBQVcsRUFBRSxDQUFwQixNQUFBO0FBQUEsYUFBQSxDQUFBO2lCQUNjLFVBQUEsQ0FBQSxFQUFBO21CQUFPLENBQUEsQ0FBRSxHQUFG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QUEsRUFBQSxHQUFBLEVBQUEsRUFBQTtBQUNFLFFBQUEsQ0FBQSxFQUFBLEdBQUE7O0FBQUEsUUFBRyxDQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEtBQUEsSUFBQSxHQUFBLEdBQUEsQ0FBQSxJQUFBLEdBQUEsS0FBQSxDQUFBLEtBQUgsSUFBQSxFQUFBO2FBQW1DLENBQUMsQ0FBRCxJQUFBLENBQU8sWUFBQTtlQUFHLEM7QUFBN0MsT0FBbUMsQztBQUFuQyxLQUFBLE1BQUE7YUFBQSxDOztBQURGLEc7QUFESSxDQUFOOztBQUlBLGVBQUEsSUFBQSxHQUFPLFVBQUEsQ0FBQSxFQUFBO1NBQ0YsVUFBQSxDQUFBLEVBQUE7V0FDRCxZQUFBO0FBQUcsVUFBRyxDQUFBLElBQUgsSUFBQSxFQUFBO2VBQUEsQztBQUFBLE9BQUEsTUFBQTtlQUFtQixDQUFBLEdBQUksQ0FBdkIsRTs7QUFBSCxLO0FBREYsR0FBRyxDQUFHLEtBQU4sQ0FBRyxDO0FBREUsQ0FBUDs7QUFJQSxrQkFBQSxPQUFBLEdBQVUsVUFBQSxDQUFBLEVBQUE7U0FDTCxVQUFBLEtBQUEsRUFBQTtXQUFjLFVBQUEsR0FBQSxJQUFBLEVBQUE7bUNBQWEsS0FBTSxDQUFBLElBQUEsQyxHQUFOLEtBQU0sQ0FBQSxJQUFBLENBQU4sR0FBZSxDQUFBLENBQUUsR0FBRixJQUFBLEM7QUFBNUIsSztBQUFqQixHQUFHLENBQUgsRUFBRyxDO0FBREssQ0FBViIsInNvdXJjZXNDb250ZW50IjpbIm5vT3AgPSAtPlxuXG5pZGVudGl0eSA9ICh4KSAtPiB4XG5cbndyYXAgPSAoeCkgLT4gLT4geFxuXG5jdXJyeSA9IChmKSAtPlxuICBnID0gKGF4Li4uKSAtPlxuICAgIGlmIGF4Lmxlbmd0aCA+PSBmLmxlbmd0aFxuICAgICAgZiBheC4uLlxuICAgIGVsc2VcbiAgICAgIHN3aXRjaCBmLmxlbmd0aCAtIGF4Lmxlbmd0aFxuICAgICAgICB3aGVuIDEgdGhlbiAoeCkgLT4gZiBheC4uLiwgeFxuICAgICAgICB3aGVuIDIgdGhlbiBiaW5hcnkgY3VycnkgKHgseSkgLT4gZiBheC4uLiwgeCwgeVxuICAgICAgICB3aGVuIDMgdGhlbiB0ZXJuYXJ5IGN1cnJ5ICh4LHkseikgLT4gZiBheC4uLiwgeCwgeSwgelxuICAgICAgICBlbHNlIChieC4uLikgLT4gZyBheC4uLiwgYnguLi5cblxuXyA9IHt9XG5cbnN1YnN0aXR1dGUgPSBjdXJyeSAoYXgsIGJ4KSAtPlxuICBpID0gMFxuICBmb3IgYSBpbiBheFxuICAgIGlmIGEgPT0gX1xuICAgICAgYnhbaSsrXVxuICAgIGVsc2VcbiAgICAgIGFcblxucGFydGlhbCA9IChmLCBheC4uLikgLT5cbiAgKGJ4Li4uKSAtPiBmIChzdWJzdGl0dXRlIGF4LCBieCkuLi5cblxuZmxpcCA9IChmKSAtPlxuICBzd2l0Y2ggZi5sZW5ndGhcbiAgICB3aGVuIDEgdGhlbiBmXG4gICAgd2hlbiAyIHRoZW4gKHksIHgpIC0+IGYoeCwgeSlcbiAgICB3aGVuIDMgdGhlbiAoeiwgeSwgeCkgLT4gZih4LCB5LCB6KVxuICAgIGVsc2UgKGF4Li4uKSAtPiBmKGF4LnJldmVyc2UoKS4uLilcblxuY29tcG9zZSA9IChmeC4uLiwgZikgLT5cbiAgaWYgZngubGVuZ3RoID09IDBcbiAgICBmXG4gIGVsc2VcbiAgICBnID0gY29tcG9zZSBmeC4uLlxuICAgIChheC4uLikgLT5cbiAgICAgIGlmIChmYXggPSBmIGF4Li4uKT8udGhlbj8gdGhlbiAoZmF4LnRoZW4gZykgZWxzZSAoZyBmYXgpXG5cbnBpcGUgPSBmbGlwIGNvbXBvc2Vcblxuc3ByZWFkID0gKGYpIC0+IChheCkgLT4gZiBheC4uLlxuXG51bmFyeSA9IChmKSAtPiAoeCkgLT4gZih4KVxuXG5iaW5hcnkgPSAoZikgLT4gKHgseSkgLT4gZiBhcmd1bWVudHMuLi5cblxudGVybmFyeSA9IChmKSAtPiAoeCx5LHopIC0+IGYgYXJndW1lbnRzLi4uXG5cbmFwcGx5ID0gKGYsIGFyZ3MuLi4pIC0+IChmIGFyZ3MuLi4pXG5cbm5lZ2F0ZSA9IChmKSAtPiAtPiAhKGYgYXJndW1lbnRzLi4uKVxuXG5naXZlbiA9IChhcmdzLi4uLCBmKSAtPiBmIGFyZ3MuLi5cblxudGVlID0gKGYpIC0+XG4gIChhLCBieC4uLikgLT5cbiAgICBpZiAoayA9IChmIGEsIGJ4Li4uKSk/LnRoZW4/IHRoZW4gKGsudGhlbiAtPiBhKSBlbHNlIGFcblxub25jZSA9IChmKSAtPlxuICBkbyAoaz11bmRlZmluZWQpIC0+XG4gICAgLT4gaWYgaz8gdGhlbiBrIGVsc2UgKGsgPSBmKCkpXG5cbm1lbW9pemUgPSAoZikgLT5cbiAgZG8gKGNhY2hlPXt9KSAtPiAoYXJncy4uLikgLT4gY2FjaGVbYXJnc10gPz0gZiBhcmdzLi4uXG5cbmV4cG9ydCB7bm9PcCwgaWRlbnRpdHksIHdyYXAsIGN1cnJ5LCBfLCBzdWJzdGl0dXRlLFxuICBwYXJ0aWFsLCBmbGlwLCBjb21wb3NlLCBwaXBlLCBzcHJlYWQsIHVuYXJ5LCBiaW5hcnksIHRlcm5hcnksXG4gIGFwcGx5LCBuZWdhdGUsIG9uY2UsIHRlZSwgZ2l2ZW4sIG1lbW9pemV9XG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=/Users/dyoder/repos/panda-garden/src/index.coffee