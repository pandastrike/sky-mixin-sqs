"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _fs = require("fs");

var _events = _interopRequireDefault(require("events"));

var _amen = require("amen");

var _pandaParchment = require("panda-parchment");

var _iterator5 = require("../src/iterator");

var _reactor = require("../src/reactor");

var _filters = require("../src/filters");

var _adapters = require("../src/adapters");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncIterator(iterable) { var method; if (typeof Symbol === "function") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

var _default = [(0, _amen.test)("producer", function () {
  (0, _assert.default)((0, _iterator5.isIterator)((0, _adapters.producer)([])));
  return (0, _assert.default)((0, _reactor.isReactor)((0, _adapters.producer)(
  /*#__PURE__*/
  _wrapAsyncGenerator(function* () {
    return yield null;
  }))));
}), (0, _amen.test)("repeat", function () {
  var i, ref, results1, x;
  x = 0;
  ref = (0, _adapters.repeat)(0);
  results1 = [];

  for (i of ref) {
    if (x++ > 5) {
      break;
    }

    results1.push(_assert.default.equal(0, i));
  }

  return results1;
}), (0, _amen.test)("events", async function () {
  var i, j, ref, results1, source;
  source = new _events.default();

  (async function () {
    var i, k, results1;
    results1 = [];

    for (i = k = 1; k <= 5; i = ++k) {
      await (0, _pandaParchment.follow)(1);
      results1.push(source.emit("test", i));
    }

    return results1;
  })();

  j = 1;
  ref = (0, _adapters.events)("test", source);
  results1 = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;

  var _iteratorError;

  try {
    for (var _iterator = _asyncIterator(ref), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
      i = _value;

      _assert.default.equal(j++, i);

      if (i === 5) {
        break;
      } else {
        results1.push(void 0);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        await _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return results1;
}), (0, _amen.test)("read", async function () {
  var content, data, ref;
  content = "";
  ref = (0, _adapters.read)((0, _fs.createReadStream)("test/data/lines.txt"));
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;

  var _iteratorError2;

  try {
    for (var _iterator2 = _asyncIterator(ref), _step2, _value2; _step2 = await _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = await _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
      data = _value2;
      content += data.toString();
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        await _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return _assert.default.equal("one\ntwo\nthree\n", content);
}), (0, _amen.test)("union", async function () {
  var x;
  return _assert.default.deepEqual([1, 1, 2, 2, 3, 3, 4, 4, 5, 5], (await async function () {
    var ref, results1;
    ref = (0, _adapters.union)([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]);
    results1 = [];
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;

    var _iteratorError3;

    try {
      for (var _iterator3 = _asyncIterator(ref), _step3, _value3; _step3 = await _iterator3.next(), _iteratorNormalCompletion3 = _step3.done, _value3 = await _step3.value, !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
        x = _value3;
        results1.push(x);
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          await _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return results1;
  }()));
}), (0, _amen.test)("flow", async function () {
  var r, x;
  r = (0, _adapters.flow)([[1, 2, 3, 4, 5], (0, _filters.map)(function (x) {
    return x * 2;
  })]);
  return _assert.default.deepEqual([2, 4, 6, 8, 10], (await async function () {
    var results1;
    results1 = [];
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;

    var _iteratorError4;

    try {
      for (var _iterator4 = _asyncIterator(r), _step4, _value4; _step4 = await _iterator4.next(), _iteratorNormalCompletion4 = _step4.done, _value4 = await _step4.value, !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {
        x = _value4;
        results1.push(x);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          await _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    return results1;
  }()));
}), (0, _amen.test)("go", [(0, _amen.test)("with producer", async function () {
  var results;
  results = [];
  await (0, _adapters.go)([[1, 2, 3, 4, 5], (0, _filters.map)(function (x) {
    return x * 2;
  }), (0, _filters.map)(function (x) {
    return results.push(x);
  })]);
  return _assert.default.deepEqual([2, 4, 6, 8, 10], results);
}), (0, _amen.test)("with promise", async function () {
  var results;
  results = [];
  await (0, _adapters.go)([(0, _pandaParchment.follow)([1, 2, 3, 4, 5]), (0, _filters.map)(function (x) {
    return x * 2;
  }), (0, _filters.map)(function (x) {
    return results.push(x);
  })]);
  return _assert.default.deepEqual([2, 4, 6, 8, 10], results);
})]), (0, _amen.test)("into", async function () {
  var results;
  results = [];
  await (0, _adapters.go)([[1, 2, 3, 4, 5], (0, _filters.map)(function (n) {
    return function () {
      var results1 = [];

      for (var k = 1; 1 <= n ? k <= n : k >= n; 1 <= n ? k++ : k--) {
        results1.push(k);
      }

      return results1;
    }.apply(this);
  }), (0, _filters.map)((0, _adapters.into)([(0, _filters.map)(function (n) {
    return results.push(n);
  })]))]);
  return _assert.default.deepEqual([1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], results);
}), (0, _amen.test)("wait", async function () {
  var results;
  results = [];
  await (0, _adapters.go)([[1, 2, 3, 4, 5], (0, _adapters.wait)((0, _filters.map)(function (x) {
    return (0, _pandaParchment.follow)(x * 2);
  })), (0, _filters.map)(function (x) {
    return results.push(x);
  })]);
  return _assert.default.deepEqual([2, 4, 6, 8, 10], results);
}), (0, _amen.test)("pool", async function () {
  var results;
  results = [];
  await (0, _adapters.go)([[1, 2, 3, 4, 5], (0, _adapters.pool)((0, _filters.map)(function (x) {
    // prove that we don't append to the array until
    // all the results are in ...
    return (0, _pandaParchment.follow)(results.length === 0 ? x * 2 : void 0);
  })), (0, _filters.map)(function (x) {
    return results.push(x);
  })]);
  return _assert.default.deepEqual([2, 4, 6, 8, 10], results);
})];
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/dyoder/repos/panda-river/test/adapters.coffee