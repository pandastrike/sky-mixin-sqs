"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.delimit = exports.average = exports.sum = exports.all = exports.any = exports.start = exports.each = exports.collect = exports.reduceRight = exports.foldr = exports.fold = exports.reduce = void 0;

var _pandaGarden = require("panda-garden");

var _pandaParchment = require("panda-parchment");

var _pandaGenerics = require("panda-generics");

var _iterator5 = require("./iterator");

var _reactor = require("./reactor");

var _adapters = require("./adapters");

function _asyncIterator(iterable) { var method; if (typeof Symbol === "function") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var all,
    any,
    average,
    collect,
    define,
    delimit,
    each,
    fold,
    foldr,
    isAny,
    reduce,
    reduceRight,
    start,
    sum,
    splice = [].splice;
exports.sum = sum;
exports.start = start;
exports.reduceRight = reduceRight;
exports.reduce = reduce;
exports.foldr = foldr;
exports.fold = fold;
exports.each = each;
exports.delimit = delimit;
exports.collect = collect;
exports.average = average;
exports.any = any;
exports.all = all;

isAny = function (x) {
  return true;
};

define = function ({
  name,
  description,
  terms,
  iterator,
  reactor
}) {
  var f;
  f = _pandaGenerics.Method.create({
    description: description,
    default: function () {
      throw `${name}: invalid arguments`;
    }
  });

  _pandaGenerics.Method.define(f, ...terms, _pandaParchment.isDefined, function (...args) {
    var last, ref;
    ref = args, [...args] = ref, [last] = splice.call(args, -1);

    if (args.length === terms.length) {
      return f(...args, (0, _adapters.producer)(last));
    } else {
      throw `${name}: wrong number of arguments`;
    }
  });

  _pandaGenerics.Method.define(f, ...terms, _iterator5.isIterator, iterator);

  _pandaGenerics.Method.define(f, ...terms, _reactor.isReactor, reactor);

  return f;
};

exports.start = start = define({
  name: "start",
  description: "Obtain products but do nothing with them.",
  terms: [],
  iterator: function (i) {
    var x;

    for (x of i) {
      void 0;
    }

    return void 0;
  },
  reactor: async function (r) {
    var x;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;

    var _iteratorError;

    try {
      for (var _iterator = _asyncIterator(r), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
        x = _value;
        void 0;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          await _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return void 0;
  }
}); // The point here is to avoid using memory.

exports.each = each = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "each",
  description: "Apply a function to each product, returning undefined.",
  terms: [_pandaParchment.isFunction],
  iterator: function (f, i) {
    var x;

    for (x of i) {
      f(x);
    }

    return void 0;
  },
  reactor: async function (f, r) {
    var x;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;

    var _iteratorError2;

    try {
      for (var _iterator2 = _asyncIterator(r), _step2, _value2; _step2 = await _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = await _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
        x = _value2;
        f(x);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          await _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return void 0;
  }
})));
exports.reduce = reduce = exports.fold = fold = (0, _pandaGarden.curry)((0, _pandaGarden.ternary)(define({
  name: "fold/reduce",
  description: "Fold or reduce a producer into a value.",
  terms: [_pandaParchment.isFunction, isAny],
  iterator: function (f, k, i) {
    var x;

    for (x of i) {
      k = f(k, x);
    }

    return k;
  },
  reactor: async function (f, k, r) {
    var x;
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;

    var _iteratorError3;

    try {
      for (var _iterator3 = _asyncIterator(r), _step3, _value3; _step3 = await _iterator3.next(), _iteratorNormalCompletion3 = _step3.done, _value3 = await _step3.value, !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
        x = _value3;
        k = f(k, x);
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          await _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return k;
  }
})));

exports.collect = collect = function (p) {
  return reduce(_pandaParchment.push, [], p);
};

exports.reduceRight = reduceRight = exports.foldr = foldr = (0, _pandaGarden.curry)((0, _pandaGarden.ternary)(define({
  name: "foldr/reduceRight",
  description: "Fold or reduce a producer into a value.",
  terms: [_pandaParchment.isFunction, isAny],
  iterator: function (f, k, i) {
    return collect(i).reduceRight(f, k);
  },
  reactor: async function (f, k, r) {
    return (await collect(r)).reduceRight(f, k);
  }
})));
exports.any = any = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "any",
  description: "Return true if any product satisfies the predicate.",
  terms: [_pandaParchment.isFunction],
  iterator: function (f, i) {
    var x;

    for (x of i) {
      if (f(x)) {
        return true;
      }
    }

    return false;
  },
  reactor: async function (f, r) {
    var x;
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;

    var _iteratorError4;

    try {
      for (var _iterator4 = _asyncIterator(r), _step4, _value4; _step4 = await _iterator4.next(), _iteratorNormalCompletion4 = _step4.done, _value4 = await _step4.value, !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {
        x = _value4;

        if (f(x)) {
          return true;
        }
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          await _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    return false;
  }
})));
exports.all = all = (0, _pandaGarden.curry)(function (f, p) {
  return !any((0, _pandaGarden.negate)(f), p);
});

exports.sum = sum = function (ax) {
  return fold(_pandaParchment.add, 0, ax);
};

exports.average = average = function (i) {
  var f, j;
  j = 0; // current count

  f = function (r, n) {
    return r += (n - r) / ++j;
  };

  return fold(f, 0, i);
};

exports.delimit = delimit = (0, _pandaGarden.curry)(function (d, i) {
  var f;

  f = function (r, s) {
    if (r === "") {
      return r += s;
    } else {
      return r += d + s;
    }
  };

  return fold(f, "", i);
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/dyoder/repos/panda-river/src/reducers.coffee