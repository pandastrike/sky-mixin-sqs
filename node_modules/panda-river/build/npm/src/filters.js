"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throttle = exports.lines = exports.limit = exports.take = exports.partition = exports.tee = exports.compact = exports.reject = exports.filter = exports.select = exports.accumulate = exports.project = exports.map = void 0;

var _pandaParchment = require("panda-parchment");

var _pandaGarden = require("panda-garden");

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

function _asyncIterator(iterable) { var method; if (typeof Symbol === "function") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var Method,
    accumulate,
    compact,
    debounce,
    define,
    filter,
    isAny,
    isIterator,
    isReactor,
    limit,
    lines,
    map,
    partition,
    pour,
    producer,
    project,
    reject,
    select,
    take,
    tee,
    throttle,
    splice = [].splice;
exports.throttle = throttle;
exports.tee = tee;
exports.take = take;
exports.select = select;
exports.reject = reject;
exports.project = project;
exports.partition = partition;
exports.map = map;
exports.lines = lines;
exports.limit = limit;
exports.filter = filter;
exports.compact = compact;
exports.accumulate = accumulate;
({
  Method
} = require("panda-generics"));
({
  isIterator
} = require("./iterator"));
({
  isReactor
} = require("./reactor"));
({
  producer
} = require("./adapters"));

isAny = function (x) {
  return true;
};

define = function ({
  name,
  description,
  terms,
  iterator,
  reactor
}) {
  var f;
  f = Method.create({
    description: description,
    default: function (...args) {
      var last, ref;
      ref = args, [...args] = ref, [last] = splice.call(args, -1);

      if (args.length === terms.length) {
        return f(...args, producer(last));
      } else {
        throw `${name}: wrong number of arguments`;
      }
    }
  });
  Method.define(f, ...terms, isIterator, iterator);
  Method.define(f, ...terms, isReactor, reactor);
  return f;
}; // map


exports.map = map = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "map",
  description: "Apply a transformation function to an iterator's products.",
  terms: [_pandaParchment.isFunction],
  iterator: function* (f, i) {
    var results, x;
    results = [];

    for (x of i) {
      results.push((yield f(x)));
    }

    return results;
  },
  reactor: function () {
    var _ref = _wrapAsyncGenerator(function* (f, r) {
      var results, x;
      results = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;

      var _iteratorError;

      try {
        for (var _iterator = _asyncIterator(r), _step, _value; _step = yield _awaitAsyncGenerator(_iterator.next()), _iteratorNormalCompletion = _step.done, _value = yield _awaitAsyncGenerator(_step.value), !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
          x = _value;
          results.push((yield f(x)));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            yield _awaitAsyncGenerator(_iterator.return());
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return results;
    });

    return function reactor(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }()
}))); // project

exports.project = project = (0, _pandaGarden.curry)(function (p, i) {
  return map((0, _pandaParchment.property)(p), i);
}); // accumulate

exports.accumulate = accumulate = (0, _pandaGarden.curry)((0, _pandaGarden.ternary)(define({
  name: "accumulate",
  description: "Apply a transformation function to an iterator's products, producing an accumulated result.",
  terms: [_pandaParchment.isFunction, isAny],
  iterator: function* (f, k, i) {
    var results, x;
    results = [];

    for (x of i) {
      results.push((yield k = f(k, x)));
    }

    return results;
  },
  reactor: function () {
    var _ref2 = _wrapAsyncGenerator(function* (f, k, r) {
      var results, x;
      results = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;

      var _iteratorError2;

      try {
        for (var _iterator2 = _asyncIterator(r), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
          x = _value2;
          results.push((yield k = f(k, x)));
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            yield _awaitAsyncGenerator(_iterator2.return());
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return results;
    });

    return function reactor(_x3, _x4, _x5) {
      return _ref2.apply(this, arguments);
    };
  }()
}))); // select

exports.select = select = exports.filter = filter = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "select",
  description: "Apply a filtering function to products of an iterator.",
  terms: [_pandaParchment.isFunction],
  iterator: function* (f, i) {
    var results, x;
    results = [];

    for (x of i) {
      if (f(x)) {
        results.push((yield x));
      }
    }

    return results;
  },
  reactor: function () {
    var _ref3 = _wrapAsyncGenerator(function* (f, r) {
      var results, x;
      results = [];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;

      var _iteratorError3;

      try {
        for (var _iterator3 = _asyncIterator(r), _step3, _value3; _step3 = yield _awaitAsyncGenerator(_iterator3.next()), _iteratorNormalCompletion3 = _step3.done, _value3 = yield _awaitAsyncGenerator(_step3.value), !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {
          x = _value3;

          if (f(x)) {
            results.push((yield x));
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            yield _awaitAsyncGenerator(_iterator3.return());
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return results;
    });

    return function reactor(_x6, _x7) {
      return _ref3.apply(this, arguments);
    };
  }()
}))); // reject

exports.reject = reject = (0, _pandaGarden.curry)(function (f, i) {
  return select((0, _pandaGarden.negate)(f), i);
}); // compact

exports.compact = compact = select(_pandaParchment.isDefined); // tee

exports.tee = tee = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "tee",
  description: "Apply a function to an iterator's products, returning them.",
  terms: [_pandaParchment.isFunction],
  iterator: function* (f, i) {
    var results, x;
    results = [];

    for (x of i) {
      results.push((yield (0, _pandaGarden.tee)(f)(x)));
    }

    return results;
  },
  reactor: function () {
    var _ref4 = _wrapAsyncGenerator(function* (f, r) {
      var results, x;
      results = [];
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;

      var _iteratorError4;

      try {
        for (var _iterator4 = _asyncIterator(r), _step4, _value4; _step4 = yield _awaitAsyncGenerator(_iterator4.next()), _iteratorNormalCompletion4 = _step4.done, _value4 = yield _awaitAsyncGenerator(_step4.value), !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {
          x = _value4;
          results.push((yield (0, _pandaGarden.tee)(f)(x)));
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            yield _awaitAsyncGenerator(_iterator4.return());
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      return results;
    });

    return function reactor(_x8, _x9) {
      return _ref4.apply(this, arguments);
    };
  }()
}))); // partition

exports.partition = partition = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "partition",
  description: "Batches an interator's products in groups of N.",
  terms: [_pandaParchment.isNumber],
  iterator: function* (n, i) {
    var batch, x;
    batch = [];

    for (x of i) {
      batch.push(x);

      if (batch.length === n) {
        yield batch;
        batch = [];
      }
    }

    if (batch.length > 0) {
      return yield batch;
    }
  },
  reactor: function () {
    var _ref5 = _wrapAsyncGenerator(function* (n, r) {
      var batch, x;
      batch = [];
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;

      var _iteratorError5;

      try {
        for (var _iterator5 = _asyncIterator(r), _step5, _value5; _step5 = yield _awaitAsyncGenerator(_iterator5.next()), _iteratorNormalCompletion5 = _step5.done, _value5 = yield _awaitAsyncGenerator(_step5.value), !_iteratorNormalCompletion5; _iteratorNormalCompletion5 = true) {
          x = _value5;
          batch.push(x);

          if (batch.length === n) {
            yield batch;
            batch = [];
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
            yield _awaitAsyncGenerator(_iterator5.return());
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      if (batch.length > 0) {
        return yield batch;
      }
    });

    return function reactor(_x10, _x11) {
      return _ref5.apply(this, arguments);
    };
  }()
}))); // take

exports.take = take = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "take",
  description: "Apply a function to each product until it returns false.",
  terms: [_pandaParchment.isFunction],
  iterator: function* (f, i) {
    var results, x;
    results = [];

    for (x of i) {
      if (f(x)) {
        results.push((yield x));
      } else {
        break;
      }
    }

    return results;
  },
  reactor: function () {
    var _ref6 = _wrapAsyncGenerator(function* (f, r) {
      var results, x;
      results = [];
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;

      var _iteratorError6;

      try {
        for (var _iterator6 = _asyncIterator(r), _step6, _value6; _step6 = yield _awaitAsyncGenerator(_iterator6.next()), _iteratorNormalCompletion6 = _step6.done, _value6 = yield _awaitAsyncGenerator(_step6.value), !_iteratorNormalCompletion6; _iteratorNormalCompletion6 = true) {
          x = _value6;

          if (f(x)) {
            results.push((yield x));
          } else {
            break;
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
            yield _awaitAsyncGenerator(_iterator6.return());
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      return results;
    });

    return function reactor(_x12, _x13) {
      return _ref6.apply(this, arguments);
    };
  }()
}))); // limit

exports.limit = limit = function () {
  var f;

  f = function (n, i = 0) {
    return function () {
      return i++ < n;
    };
  };

  return function (n, i) {
    return take(f(n), i);
  };
}(); // pour
// TODO: generalize beyond strings
// possibly with a 2nd “combine” function?


pour = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(define({
  name: "pour",
  description: "Transforms the unit of iteration, ex: from blocks to lines.",
  terms: [_pandaParchment.isFunction],
  iterator: function* (f, i) {
    var first, j, last, len, line, lines, ref, remainder, x;
    remainder = "";

    for (x of i) {
      ref = f(x), [first, ...lines] = ref, [last] = splice.call(lines, -1);
      yield remainder + first;
      remainder = last;

      for (j = 0, len = lines.length; j < len; j++) {
        line = lines[j];
        yield line;
      }
    }

    if (remainder !== "") {
      return yield remainder;
    }
  },
  reactor: function () {
    var _ref7 = _wrapAsyncGenerator(function* (f, r) {
      var first, j, last, len, line, lines, ref, remainder, x;
      remainder = "";
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;

      var _iteratorError7;

      try {
        for (var _iterator7 = _asyncIterator(r), _step7, _value7; _step7 = yield _awaitAsyncGenerator(_iterator7.next()), _iteratorNormalCompletion7 = _step7.done, _value7 = yield _awaitAsyncGenerator(_step7.value), !_iteratorNormalCompletion7; _iteratorNormalCompletion7 = true) {
          x = _value7;
          ref = f(x), [first, ...lines] = ref, [last] = splice.call(lines, -1);
          yield remainder + first;
          remainder = last;

          for (j = 0, len = lines.length; j < len; j++) {
            line = lines[j];
            yield line;
          }
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
            yield _awaitAsyncGenerator(_iterator7.return());
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }

      if (remainder !== "") {
        return yield remainder;
      }
    });

    return function reactor(_x14, _x15) {
      return _ref7.apply(this, arguments);
    };
  }()
}))); // lines

exports.lines = lines = pour(function (s) {
  return s.toString().split("\n");
}); // throttle

exports.throttle = throttle = debounce = (0, _pandaGarden.curry)(
/*#__PURE__*/
function () {
  var _ref8 = _wrapAsyncGenerator(function* (interval, r) {
    var last, results, x;
    last = 0;
    results = [];
    var _iteratorNormalCompletion8 = true;
    var _didIteratorError8 = false;

    var _iteratorError8;

    try {
      for (var _iterator8 = _asyncIterator(r), _step8, _value8; _step8 = yield _awaitAsyncGenerator(_iterator8.next()), _iteratorNormalCompletion8 = _step8.done, _value8 = yield _awaitAsyncGenerator(_step8.value), !_iteratorNormalCompletion8; _iteratorNormalCompletion8 = true) {
        x = _value8;

        if (Date.now() - last >= interval) {
          results.push((yield x));
        } else {
          results.push(void 0);
        }
      }
    } catch (err) {
      _didIteratorError8 = true;
      _iteratorError8 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
          yield _awaitAsyncGenerator(_iterator8.return());
        }
      } finally {
        if (_didIteratorError8) {
          throw _iteratorError8;
        }
      }
    }

    return results;
  });

  return function (_x16, _x17) {
    return _ref8.apply(this, arguments);
  };
}());
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/dyoder/repos/panda-river/src/filters.coffee