"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pool = exports.wait = exports.into = exports.go = exports.flow = exports.union = exports.read = exports.events = exports.repeat = exports.producer = exports.isProducer = void 0;

var _pandaGenerics = require("panda-generics");

var _pandaGarden = require("panda-garden");

var _pandaParchment = require("panda-parchment");

var _iterator3 = require("./iterator");

var _reactor = require("./reactor");

var _reducers = require("./reducers");

function _asyncIterator(iterable) { var method; if (typeof Symbol === "function") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume("next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

if (typeof Symbol === "function" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

var events, flow, go, into, isFunctionList, isProducer, pool, producer, queue, read, repeat, union, wait;
exports.wait = wait;
exports.union = union;
exports.repeat = repeat;
exports.read = read;
exports.producer = producer;
exports.pool = pool;
exports.isProducer = isProducer;
exports.into = into;
exports.go = go;
exports.flow = flow;
exports.events = events;

// isProducer
exports.isProducer = isProducer = function (x) {
  return (0, _iterator3.isIterator)(x) || (0, _reactor.isReactor)(x);
}; // producer


exports.producer = producer = _pandaGenerics.Method.create({
  description: "Attempts to turn its argument into an iterator or reactor."
});

_pandaGenerics.Method.define(producer, _iterator3.isIterable, function (x) {
  return (0, _iterator3.iterator)(x);
});

_pandaGenerics.Method.define(producer, _reactor.isReagent, function (x) {
  return (0, _reactor.reactor)(x);
});

_pandaGenerics.Method.define(producer, isProducer, _pandaGarden.identity); // repeat


exports.repeat = repeat = function* (x) {
  while (true) {
    yield x;
  }
}; // queue


queue = function () {
  var dq, p, q;
  q = [];
  p = [];
  return {
    enqueue: function (value) {
      var resolve;

      if (p.length > 0) {
        resolve = p.shift();
        return resolve(value);
      } else {
        return q.push(value);
      }
    },
    dequeue: dq = function () {
      if (q.length > 0) {
        return (0, _pandaParchment.follow)(q.shift());
      } else {
        return (0, _pandaParchment.promise)(function (resolve) {
          return p.push(resolve);
        });
      }
    },
    idle: function () {
      return p.length === 0 && q.length === 0;
    }
  };
}; // events


exports.events = events = (0, _pandaGarden.curry)(
/*#__PURE__*/
function () {
  var _ref = _wrapAsyncGenerator(function* (name, source) {
    var q, results;
    q = queue();

    if (source.on != null) {
      source.on(name, function (event) {
        return q.enqueue(event);
      });
    } else if (source.addEventListener != null) {
      source.addEventListener(name, function (event) {
        return q.enqueue(event);
      });
    } else {
      throw new TypeError("events: source must support `on` or `addEventListener` method");
    }

    results = [];

    while (true) {
      results.push((yield q.dequeue()));
    }

    return results;
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}()); // read

exports.read = read =
/*#__PURE__*/
function () {
  var _ref2 = _wrapAsyncGenerator(function* (s) {
    var data, end, q, results;
    q = queue();
    end = false;
    s.on("data", function (data) {
      return q.enqueue(data);
    });
    s.on("error", function (error) {
      return q.enqueue((0, _pandaParchment.reject)(error));
    });
    s.on("end", function () {
      end = true;
      return q.enqueue(void 0);
    });
    results = [];

    while (true) {
      data = yield _awaitAsyncGenerator(q.dequeue());

      if (end) {
        break;
      } else {
        results.push((yield data));
      }
    }

    return results;
  });

  return function read(_x3) {
    return _ref2.apply(this, arguments);
  };
}(); // union


exports.union = union =
/*#__PURE__*/
function () {
  var _ref3 = _wrapAsyncGenerator(function* (...px) {
    var done, i, len, p, q, results;
    q = queue();
    done = 0;

    for (i = 0, len = px.length; i < len; i++) {
      p = px[i];

      (async function (p) {
        var x;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;

        var _iteratorError;

        try {
          for (var _iterator = _asyncIterator(p), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {
            x = _value;
            q.enqueue(x);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              await _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return done++;
      })(p);
    }

    while (true) {
      yield q.dequeue();

      if (done === px.length) {
        break;
      }
    }

    results = [];

    while (!q.idle()) {
      results.push((yield q.dequeue()));
    }

    return results;
  });

  return function union() {
    return _ref3.apply(this, arguments);
  };
}(); // flow


isFunctionList = function (...fx) {
  var f, i, len;

  for (i = 0, len = fx.length; i < len; i++) {
    f = fx[i];

    if (!(0, _pandaParchment.isFunction)(f)) {
      return false;
    }
  }

  return true;
};

exports.flow = flow = _pandaGenerics.Method.create({
  description: "Compose functions and a producer."
}); // check for promise

_pandaGenerics.Method.define(flow, _pandaParchment.isDefined, _pandaParchment.isArray, function (x, ax) {
  return flow(x, ...ax);
});

_pandaGenerics.Method.define(flow, _pandaParchment.isDefined, isFunctionList, function (x, ...fx) {
  return flow(x, (0, _pandaGarden.pipe)(...fx));
});

_pandaGenerics.Method.define(flow, _pandaParchment.isDefined, _pandaParchment.isFunction, function (x, f) {
  return flow(producer(x), f);
});

_pandaGenerics.Method.define(flow, _pandaParchment.isPromise, _pandaParchment.isFunction, async function (x, f) {
  return flow((await x), f);
});

_pandaGenerics.Method.define(flow, isProducer, _pandaParchment.isFunction, function (p, f) {
  return f(p);
});

_pandaGenerics.Method.define(flow, _pandaParchment.isArray, function (ax) {
  return flow(...ax);
});

exports.go = go = (0, _pandaGarden.compose)(_reducers.start, flow);
exports.into = into = (0, _pandaGarden.curry)((0, _pandaGarden.binary)((0, _pandaGarden.flip)(go)));
exports.wait = wait = (0, _pandaGarden.curry)(
/*#__PURE__*/
function () {
  var _ref4 = _wrapAsyncGenerator(function* (filter, producer) {
    var ref, results, x;
    ref = filter(producer);
    results = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;

    var _iteratorError2;

    try {
      for (var _iterator2 = _asyncIterator(ref), _step2, _value2; _step2 = yield _awaitAsyncGenerator(_iterator2.next()), _iteratorNormalCompletion2 = _step2.done, _value2 = yield _awaitAsyncGenerator(_step2.value), !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {
        x = _value2;
        results.push((yield x));
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          yield _awaitAsyncGenerator(_iterator2.return());
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return results;
  });

  return function (_x4, _x5) {
    return _ref4.apply(this, arguments);
  };
}());
exports.pool = pool = (0, _pandaGarden.curry)(
/*#__PURE__*/
function () {
  var _ref5 = _wrapAsyncGenerator(function* (filter, producer) {
    var i, len, ref, results, x;
    ref = yield _awaitAsyncGenerator((0, _pandaParchment.all)((0, _reducers.collect)(filter(producer))));
    results = [];

    for (i = 0, len = ref.length; i < len; i++) {
      x = ref[i];
      results.push((yield x));
    }

    return results;
  });

  return function (_x6, _x7) {
    return _ref5.apply(this, arguments);
  };
}());
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/dyoder/repos/panda-river/src/adapters.coffee