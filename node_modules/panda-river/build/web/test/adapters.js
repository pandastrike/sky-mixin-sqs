import assert from "assert";
import { createReadStream } from "fs";
import EventEmitter from "events";
import { test } from "amen";
import { follow } from "panda-parchment";
import { isIterator } from "../src/iterator";
import { isReactor } from "../src/reactor";
import { map } from "../src/filters";
import { isProducer, producer, repeat, events, read, union, flow, go, into, wait, pool } from "../src/adapters";
export default [test("producer", function () {
  assert(isIterator(producer([])));
  return assert(isReactor(producer(async function* () {
    return yield await null;
  })));
}), test("repeat", function () {
  var i, ref, results1, x;
  x = 0;
  ref = repeat(0);
  results1 = [];

  for (i of ref) {
    if (x++ > 5) {
      break;
    }

    results1.push(assert.equal(0, i));
  }

  return results1;
}), test("events", async function () {
  var i, j, ref, results1, source;
  source = new EventEmitter();

  (async function () {
    var i, k, results1;
    results1 = [];

    for (i = k = 1; k <= 5; i = ++k) {
      await follow(1);
      results1.push(source.emit("test", i));
    }

    return results1;
  })();

  j = 1;
  ref = events("test", source);
  results1 = [];

  for await (i of ref) {
    assert.equal(j++, i);

    if (i === 5) {
      break;
    } else {
      results1.push(void 0);
    }
  }

  return results1;
}), test("read", async function () {
  var content, data, ref;
  content = "";
  ref = read(createReadStream("test/data/lines.txt"));

  for await (data of ref) {
    content += data.toString();
  }

  return assert.equal("one\ntwo\nthree\n", content);
}), test("union", async function () {
  var x;
  return assert.deepEqual([1, 1, 2, 2, 3, 3, 4, 4, 5, 5], (await async function () {
    var ref, results1;
    ref = union([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]);
    results1 = [];

    for await (x of ref) {
      results1.push(x);
    }

    return results1;
  }()));
}), test("flow", async function () {
  var r, x;
  r = flow([[1, 2, 3, 4, 5], map(function (x) {
    return x * 2;
  })]);
  return assert.deepEqual([2, 4, 6, 8, 10], (await async function () {
    var results1;
    results1 = [];

    for await (x of r) {
      results1.push(x);
    }

    return results1;
  }()));
}), test("go", [test("with producer", async function () {
  var results;
  results = [];
  await go([[1, 2, 3, 4, 5], map(function (x) {
    return x * 2;
  }), map(function (x) {
    return results.push(x);
  })]);
  return assert.deepEqual([2, 4, 6, 8, 10], results);
}), test("with promise", async function () {
  var results;
  results = [];
  await go([follow([1, 2, 3, 4, 5]), map(function (x) {
    return x * 2;
  }), map(function (x) {
    return results.push(x);
  })]);
  return assert.deepEqual([2, 4, 6, 8, 10], results);
})]), test("into", async function () {
  var results;
  results = [];
  await go([[1, 2, 3, 4, 5], map(function (n) {
    return function () {
      var results1 = [];

      for (var k = 1; 1 <= n ? k <= n : k >= n; 1 <= n ? k++ : k--) {
        results1.push(k);
      }

      return results1;
    }.apply(this);
  }), map(into([map(function (n) {
    return results.push(n);
  })]))]);
  return assert.deepEqual([1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5], results);
}), test("wait", async function () {
  var results;
  results = [];
  await go([[1, 2, 3, 4, 5], wait(map(function (x) {
    return follow(x * 2);
  })), map(function (x) {
    return results.push(x);
  })]);
  return assert.deepEqual([2, 4, 6, 8, 10], results);
}), test("pool", async function () {
  var results;
  results = [];
  await go([[1, 2, 3, 4, 5], pool(map(function (x) {
    // prove that we don't append to the array until
    // all the results are in ...
    return follow(results.length === 0 ? x * 2 : void 0);
  })), map(function (x) {
    return results.push(x);
  })]);
  return assert.deepEqual([2, 4, 6, 8, 10], results);
})];
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/dyoder/repos/panda-river/test/adapters.coffee