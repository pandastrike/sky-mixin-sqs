var add, assert, follow, merge, odd, spec, square;
import { test } from "amen";
assert = require("assert");
import { map, project, accumulate, select, filter, reject, compact, tee, partition, take, limit, lines, throttle } from "../src/filters";
({
  odd,
  merge,
  follow
} = require("panda-parchment")); // we need to do things with the values

square = function (x) {
  return x * x;
};

add = function (x, y) {
  return x + y;
};

spec = function (name, {
  expected,
  filter,
  iterable
}) {
  return test(name, [test("iterator", function () {
    var x;
    return assert.deepEqual(expected, function () {
      var ref, results;
      ref = filter(iterable);
      results = [];

      for (x of ref) {
        results.push(x);
      }

      return results;
    }());
  }), test("reactor", async function () {
    var r, x;

    r = async function* () {
      var results, x;
      results = [];

      for await (x of iterable) {
        results.push((yield x));
      }

      return results;
    };

    return assert.deepEqual(expected, (await async function () {
      var ref, results;
      ref = filter(r);
      results = [];

      for await (x of ref) {
        results.push(x);
      }

      return results;
    }()));
  })]);
};

export default [spec("map", {
  expected: [1, 4, 9, 16],
  filter: map(square),
  iterable: [1, 2, 3, 4]
}), spec("accumulate", {
  expected: [1, 3, 6, 10],
  filter: accumulate(add, 0),
  iterable: [1, 2, 3, 4]
}), spec("select", {
  expected: [1, 3, 5],
  filter: select(odd),
  iterable: [1, 2, 3, 4, 5]
}), spec("tee", {
  expected: [1, 2, 3, 4],
  filter: tee(square),
  iterable: [1, 2, 3, 4]
}), spec("partition", {
  expected: [[1, 2], [3, 4]],
  filter: partition(2),
  iterable: [1, 2, 3, 4]
}), spec("take", {
  expected: [1, 2, 3],
  filter: take(function (x) {
    return x <= 3;
  }),
  iterable: [1, 2, 3, 4]
}), test("throttle"), spec("lines", {
  expected: ["one", "two", "three"],
  filter: lines,
  iterable: ["one\ntwo", "\nthree"]
})];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9keW9kZXIvcmVwb3MvcGFuZGEtcml2ZXIvdGVzdC9maWx0ZXJzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEdBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUE7QUFBQSxTQUFBLElBQUEsUUFBQSxNQUFBO0FBQ0EsTUFBQSxHQUFTLE9BQUEsQ0FBQSxRQUFBLENBQVQ7QUFFQSxTQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsVUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLFFBQUEsUUFBQSxnQkFBQTtBQUdBLENBQUE7QUFBQSxFQUFBLEdBQUE7QUFBQSxFQUFBLEtBQUE7QUFBQSxFQUFBO0FBQUEsSUFBdUIsT0FBQSxDQU52QixpQkFNdUIsQ0FBdkIsRTs7QUFHQSxNQUFBLEdBQVMsVUFBQSxDQUFBLEVBQUE7U0FBTyxDQUFBLEdBQUksQztBQUFYLENBQVQ7O0FBQ0EsR0FBQSxHQUFNLFVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQTtTQUFVLENBQUEsR0FBSSxDO0FBQWQsQ0FBTjs7QUFFQSxJQUFBLEdBQU8sVUFBQSxJQUFBLEVBQU87QUFBQSxFQUFBLFFBQUE7QUFBQSxFQUFBLE1BQUE7QUFBUCxFQUFBO0FBQU8sQ0FBUCxFQUFBO1NBRUwsSUFBQSxDQUFBLElBQUEsRUFBVyxDQUNULElBQUEsQ0FBQSxVQUFBLEVBQWlCLFlBQUE7QUFDZixRQUFBLENBQUE7V0FBQSxNQUFNLENBQU4sU0FBQSxDQUFBLFFBQUEsRTs7QUFDSyxNQUFBLEdBQUEsR0FBQSxNQUFBLENBQUEsUUFBQSxDQUFBO0FBQUEsTUFBQSxPQUFBLEdBQUEsRUFBQTs7QUFBQSxXQUFBLENBQUEsSUFBQSxHQUFBLEVBQUE7cUJBQUYsQztBQUFFOzs7QUFE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QUFBQSxFQUFBLFFBQUEsRUFBVSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQVYsT0FBVSxDQUFWO0FBQ0EsRUFBQSxNQUFBLEVBREEsS0FBQTtBQUVBLEVBQUEsUUFBQSxFQUFVLENBQUEsVUFBQSxFQUFBLFNBQUE7QUFGVixDQURGLENBbENhLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3Rlc3R9IGZyb20gXCJhbWVuXCJcbmFzc2VydCA9IHJlcXVpcmUgXCJhc3NlcnRcIlxuXG5pbXBvcnQge21hcCwgcHJvamVjdCwgYWNjdW11bGF0ZSwgc2VsZWN0LCBmaWx0ZXIsIHJlamVjdCwgY29tcGFjdCxcbiAgdGVlLCBwYXJ0aXRpb24sIHRha2UsIGxpbWl0LCBsaW5lcywgdGhyb3R0bGV9IGZyb20gXCIuLi9zcmMvZmlsdGVyc1wiXG5cbntvZGQsIG1lcmdlLCBmb2xsb3d9ID0gcmVxdWlyZSBcInBhbmRhLXBhcmNobWVudFwiXG5cbiMgd2UgbmVlZCB0byBkbyB0aGluZ3Mgd2l0aCB0aGUgdmFsdWVzXG5zcXVhcmUgPSAoeCkgLT4geCAqIHhcbmFkZCA9ICh4LCB5KSAtPiB4ICsgeVxuXG5zcGVjID0gKG5hbWUsIHtleHBlY3RlZCwgZmlsdGVyLCBpdGVyYWJsZX0pIC0+XG5cbiAgdGVzdCBuYW1lLCBbXG4gICAgdGVzdCBcIml0ZXJhdG9yXCIsIC0+XG4gICAgICBhc3NlcnQuZGVlcEVxdWFsIGV4cGVjdGVkLFxuICAgICAgICAoeCBmb3IgeCBmcm9tIGZpbHRlciBpdGVyYWJsZSlcblxuICAgIHRlc3QgXCJyZWFjdG9yXCIsIC0+XG4gICAgICByID0gLT4geWllbGQgeCBmb3IgYXdhaXQgeCBmcm9tIGl0ZXJhYmxlXG4gICAgICBhc3NlcnQuZGVlcEVxdWFsIGV4cGVjdGVkLFxuICAgICAgICAoeCBmb3IgYXdhaXQgeCBmcm9tIGZpbHRlciByKVxuICBdXG5cbmV4cG9ydCBkZWZhdWx0IFtcblxuICBzcGVjIFwibWFwXCIsXG4gICAgZXhwZWN0ZWQ6IFsxLCA0LCA5LCAxNl1cbiAgICBmaWx0ZXI6IG1hcCBzcXVhcmVcbiAgICBpdGVyYWJsZTogWzEuLjRdXG5cbiAgc3BlYyBcImFjY3VtdWxhdGVcIixcbiAgICBleHBlY3RlZDogWzEsIDMsIDYsIDEwXVxuICAgIGZpbHRlcjogYWNjdW11bGF0ZSBhZGQsIDBcbiAgICBpdGVyYWJsZTogWzEuLjRdXG5cbiAgc3BlYyBcInNlbGVjdFwiLFxuICAgIGV4cGVjdGVkOiBbMSwgMywgNV1cbiAgICBmaWx0ZXI6IHNlbGVjdCBvZGRcbiAgICBpdGVyYWJsZTogWzEuLjVdXG5cbiAgc3BlYyBcInRlZVwiLFxuICAgIGV4cGVjdGVkOiBbMS4uNF1cbiAgICBmaWx0ZXI6IHRlZSBzcXVhcmVcbiAgICBpdGVyYWJsZTogWzEuLjRdXG5cbiAgc3BlYyBcInBhcnRpdGlvblwiLFxuICAgIGV4cGVjdGVkOiBbWzEsIDJdLCBbMywgNF1dXG4gICAgZmlsdGVyOiBwYXJ0aXRpb24gMlxuICAgIGl0ZXJhYmxlOiBbMS4uNF1cblxuICBzcGVjIFwidGFrZVwiLFxuICAgIGV4cGVjdGVkOiBbMS4uM11cbiAgICBmaWx0ZXI6IHRha2UgKHgpIC0+IHggPD0gM1xuICAgIGl0ZXJhYmxlOiBbMS4uNF1cblxuICB0ZXN0IFwidGhyb3R0bGVcIlxuXG4gIHNwZWMgXCJsaW5lc1wiLFxuICAgIGV4cGVjdGVkOiBbIFwib25lXCIsIFwidHdvXCIsIFwidGhyZWVcIiBdXG4gICAgZmlsdGVyOiBsaW5lc1xuICAgIGl0ZXJhYmxlOiBbIFwib25lXFxudHdvXCIsIFwiXFxudGhyZWVcIiBdXG5cbl1cbiJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=/Users/dyoder/repos/panda-river/test/filters.coffee