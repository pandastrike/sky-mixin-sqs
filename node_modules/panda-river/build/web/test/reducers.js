var spec;
import assert from "assert";
import { test } from "amen";
import { identity } from "panda-garden";
import { first, add, odd, push, w } from "panda-parchment";
import { reduce, fold, foldr, collect, each, start, any, all, sum, average, delimit } from "../src/reducers";

spec = function (name, {
  expected,
  reducer,
  iterable
}) {
  return test(name, [test("iterator", function () {
    return assert.deepEqual(expected, reducer(iterable));
  }), test("reactor", async function () {
    var r;

    r = async function* () {
      var results, x;
      results = [];

      for await (x of iterable) {
        results.push((yield x));
      }

      return results;
    };

    return assert.deepEqual(expected, (await reducer(r)));
  })]);
};

export default [spec("collect", {
  iterable: [1, 2, 3, 4, 5],
  expected: [1, 2, 3, 4, 5],
  reducer: collect
}), spec("each", {
  iterable: [1, 2, 3, 4, 5],
  expected: void 0,
  reducer: each(function (y) {
    return function (x) {
      assert(x === y);
      return y = y % 5 + 1;
    };
  }(1))
}), spec("fold/reduce", {
  iterable: [1, 2, 3, 4, 5],
  expected: 15,
  reducer: fold(add, 0)
}), spec("foldr/reduceRight", {
  iterable: "panama",
  expected: "amanap",
  reducer: foldr(add, "")
}), spec("any", {
  iterable: [1, 2, 3, 4, 5],
  expected: true,
  reducer: any(odd)
}), spec("all", {
  iterable: [1, 2, 3, 4, 5],
  expected: false,
  reducer: all(odd)
}), spec("sum", {
  iterable: [1, 2, 3, 4, 5],
  expected: 15,
  reducer: sum
}), spec("average", {
  iterable: [1, 2, 3, 4, 5],
  expected: 3,
  reducer: average
}), spec("delimit", {
  iterable: ["one", "two", "three"],
  expected: "one, two, three",
  reducer: delimit(", ")
})];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9keW9kZXIvcmVwb3MvcGFuZGEtcml2ZXIvdGVzdC9yZWR1Y2Vycy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxJQUFBO0FBQUEsT0FBQSxNQUFBLE1BQUEsUUFBQTtBQUNBLFNBQUEsSUFBQSxRQUFBLE1BQUE7QUFFQSxTQUFBLFFBQUEsUUFBQSxjQUFBO0FBQ0EsU0FBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxRQUFBLGlCQUFBO0FBRUEsU0FBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxRQUFBLGlCQUFBOztBQUdBLElBQUEsR0FBTyxVQUFBLElBQUEsRUFBTztBQUFBLEVBQUEsUUFBQTtBQUFBLEVBQUEsT0FBQTtBQUFQLEVBQUE7QUFBTyxDQUFQLEVBQUE7U0FFTCxJQUFBLENBQUEsSUFBQSxFQUFXLENBQ1QsSUFBQSxDQUFBLFVBQUEsRUFBaUIsWUFBQTtXQUNmLE1BQU0sQ0FBTixTQUFBLENBQUEsUUFBQSxFQUEyQixPQUFBLENBQTNCLFFBQTJCLENBQTNCLEM7QUFGTyxHQUNULENBRFMsRUFJVCxJQUFBLENBQUEsU0FBQSxFQUFnQixrQkFBQTtBQUNkLFFBQUEsQ0FBQTs7QUFBQSxJQUFBLENBQUEsR0FBSSxtQkFBQTtBQUFHLFVBQUEsT0FBQSxFQUFBLENBQUE7QUFBUSxNQUFBLE9BQUEsR0FBQSxFQUFBOztBQUFBLGlCQUFBLENBQUEsSUFBQSxRQUFBLEVBQUE7Z0JBQVIsSSxFQUFBLE1BQUEsQztBQUFROzs7QUFBWCxLQUFKOztXQUNBLE1BQU0sQ0FBTixTQUFBLENBQUEsUUFBQSxHQUEyQixNQUFNLE9BQUEsQ0FBakMsQ0FBaUMsQ0FBakMsRTtBQU5PLEdBSVQsQ0FKUyxDQUFYLEM7QUFGSyxDQUFQOztBQVdBLGVBQWUsQ0FFYixJQUFBLENBQUEsU0FBQSxFQUNFO0FBQUEsRUFBQSxRQUFBLEVBQVUsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQVYsQ0FBVSxDQUFWO0FBQ0EsRUFBQSxRQUFBLEVBQVUsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBRFYsQ0FDVSxDQURWO0FBRUEsRUFBQSxPQUFBLEVBQVM7QUFGVCxDQURGLENBRmEsRUFPYixJQUFBLENBQUEsTUFBQSxFQUNFO0FBQUEsRUFBQSxRQUFBLEVBQVUsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQVYsQ0FBVSxDQUFWO0FBQ0EsRUFBQSxRQUFBLEVBQVUsS0FEVixDQUFBO0FBRUEsRUFBQSxPQUFBLEVBQVMsSUFBQSxDQUFRLFVBQUEsQ0FBQSxFQUFBO1dBQ2YsVUFBQSxDQUFBLEVBQUE7QUFDRSxNQUFBLE1BQUEsQ0FBTyxDQUFBLEtBQVAsQ0FBQSxDQUFBO2FBQ0EsQ0FBQSxHQUFLLENBQUEsR0FBRCxDQUFBLEdBQVUsQztBQUZoQixLO0FBRFksR0FBRyxDQUFSLENBQVEsQ0FBUjtBQUZULENBREYsQ0FQYSxFQWViLElBQUEsQ0FBQSxhQUFBLEVBQ0U7QUFBQSxFQUFBLFFBQUEsRUFBVSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBVixDQUFVLENBQVY7QUFDQSxFQUFBLFFBQUEsRUFEQSxFQUFBO0FBRUEsRUFBQSxPQUFBLEVBQVMsSUFBQSxDQUFBLEdBQUEsRUFBQSxDQUFBO0FBRlQsQ0FERixDQWZhLEVBb0JiLElBQUEsQ0FBQSxtQkFBQSxFQUNFO0FBQUEsRUFBQSxRQUFBLEVBQUEsUUFBQTtBQUNBLEVBQUEsUUFBQSxFQURBLFFBQUE7QUFFQSxFQUFBLE9BQUEsRUFBUyxLQUFBLENBQUEsR0FBQSxFQUFBLEVBQUE7QUFGVCxDQURGLENBcEJhLEVBeUJiLElBQUEsQ0FBQSxLQUFBLEVBQ0U7QUFBQSxFQUFBLFFBQUEsRUFBVSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBVixDQUFVLENBQVY7QUFDQSxFQUFBLFFBQUEsRUFEQSxJQUFBO0FBRUEsRUFBQSxPQUFBLEVBQVMsR0FBQSxDQUFBLEdBQUE7QUFGVCxDQURGLENBekJhLEVBOEJiLElBQUEsQ0FBQSxLQUFBLEVBQ0U7QUFBQSxFQUFBLFFBQUEsRUFBVSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBVixDQUFVLENBQVY7QUFDQSxFQUFBLFFBQUEsRUFEQSxLQUFBO0FBRUEsRUFBQSxPQUFBLEVBQVMsR0FBQSxDQUFBLEdBQUE7QUFGVCxDQURGLENBOUJhLEVBbUNiLElBQUEsQ0FBQSxLQUFBLEVBQ0U7QUFBQSxFQUFBLFFBQUEsRUFBVSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBVixDQUFVLENBQVY7QUFDQSxFQUFBLFFBQUEsRUFEQSxFQUFBO0FBRUEsRUFBQSxPQUFBLEVBQVM7QUFGVCxDQURGLENBbkNhLEVBd0NiLElBQUEsQ0FBQSxTQUFBLEVBQ0U7QUFBQSxFQUFBLFFBQUEsRUFBVSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBVixDQUFVLENBQVY7QUFDQSxFQUFBLFFBQUEsRUFEQSxDQUFBO0FBRUEsRUFBQSxPQUFBLEVBQVM7QUFGVCxDQURGLENBeENhLEVBNkNiLElBQUEsQ0FBQSxTQUFBLEVBQ0U7QUFBQSxFQUFBLFFBQUEsRUFBVSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQVYsT0FBVSxDQUFWO0FBQ0EsRUFBQSxRQUFBLEVBREEsaUJBQUE7QUFFQSxFQUFBLE9BQUEsRUFBUyxPQUFBLENBQUEsSUFBQTtBQUZULENBREYsQ0E3Q2EsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiXG5pbXBvcnQge3Rlc3R9IGZyb20gXCJhbWVuXCJcblxuaW1wb3J0IHtpZGVudGl0eX0gZnJvbSBcInBhbmRhLWdhcmRlblwiXG5pbXBvcnQge2ZpcnN0LCBhZGQsIG9kZCwgcHVzaCwgd30gZnJvbSBcInBhbmRhLXBhcmNobWVudFwiXG5cbmltcG9ydCB7cmVkdWNlLCBmb2xkLCBmb2xkciwgY29sbGVjdCwgZWFjaCwgc3RhcnQsIGFueSwgYWxsLFxuICBzdW0sIGF2ZXJhZ2UsIGRlbGltaXR9IGZyb20gXCIuLi9zcmMvcmVkdWNlcnNcIlxuXG5zcGVjID0gKG5hbWUsIHtleHBlY3RlZCwgcmVkdWNlciwgaXRlcmFibGV9KSAtPlxuXG4gIHRlc3QgbmFtZSwgW1xuICAgIHRlc3QgXCJpdGVyYXRvclwiLCAtPlxuICAgICAgYXNzZXJ0LmRlZXBFcXVhbCBleHBlY3RlZCwgcmVkdWNlciBpdGVyYWJsZVxuXG4gICAgdGVzdCBcInJlYWN0b3JcIiwgLT5cbiAgICAgIHIgPSAtPiB5aWVsZCB4IGZvciBhd2FpdCB4IGZyb20gaXRlcmFibGVcbiAgICAgIGFzc2VydC5kZWVwRXF1YWwgZXhwZWN0ZWQsIGF3YWl0IHJlZHVjZXIgclxuICBdXG5cbmV4cG9ydCBkZWZhdWx0IFtcblxuICBzcGVjIFwiY29sbGVjdFwiLFxuICAgIGl0ZXJhYmxlOiBbMS4uNV1cbiAgICBleHBlY3RlZDogWzEuLjVdXG4gICAgcmVkdWNlcjogY29sbGVjdFxuXG4gIHNwZWMgXCJlYWNoXCIsXG4gICAgaXRlcmFibGU6IFsxLi41XVxuICAgIGV4cGVjdGVkOiB1bmRlZmluZWRcbiAgICByZWR1Y2VyOiBlYWNoIGRvICh5PTEpIC0+XG4gICAgICAoeCkgLT5cbiAgICAgICAgYXNzZXJ0IHggPT0geVxuICAgICAgICB5ID0gKHkgJSA1KSArIDFcblxuICBzcGVjIFwiZm9sZC9yZWR1Y2VcIixcbiAgICBpdGVyYWJsZTogWzEuLjVdXG4gICAgZXhwZWN0ZWQ6IDE1XG4gICAgcmVkdWNlcjogZm9sZCBhZGQsIDBcblxuICBzcGVjIFwiZm9sZHIvcmVkdWNlUmlnaHRcIixcbiAgICBpdGVyYWJsZTogXCJwYW5hbWFcIlxuICAgIGV4cGVjdGVkOiBcImFtYW5hcFwiXG4gICAgcmVkdWNlcjogZm9sZHIgYWRkLCBcIlwiXG5cbiAgc3BlYyBcImFueVwiLFxuICAgIGl0ZXJhYmxlOiBbMS4uNV1cbiAgICBleHBlY3RlZDogdHJ1ZVxuICAgIHJlZHVjZXI6IGFueSBvZGRcblxuICBzcGVjIFwiYWxsXCIsXG4gICAgaXRlcmFibGU6IFsxLi41XVxuICAgIGV4cGVjdGVkOiBmYWxzZVxuICAgIHJlZHVjZXI6IGFsbCBvZGRcblxuICBzcGVjIFwic3VtXCIsXG4gICAgaXRlcmFibGU6IFsxLi41XVxuICAgIGV4cGVjdGVkOiAxNVxuICAgIHJlZHVjZXI6IHN1bVxuXG4gIHNwZWMgXCJhdmVyYWdlXCIsXG4gICAgaXRlcmFibGU6IFsxLi41XVxuICAgIGV4cGVjdGVkOiAzXG4gICAgcmVkdWNlcjogYXZlcmFnZVxuXG4gIHNwZWMgXCJkZWxpbWl0XCIsXG4gICAgaXRlcmFibGU6IFsgXCJvbmVcIiwgXCJ0d29cIiwgXCJ0aHJlZVwiIF1cbiAgICBleHBlY3RlZDogXCJvbmUsIHR3bywgdGhyZWVcIlxuICAgIHJlZHVjZXI6IGRlbGltaXQgXCIsIFwiXG5dXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=/Users/dyoder/repos/panda-river/test/reducers.coffee