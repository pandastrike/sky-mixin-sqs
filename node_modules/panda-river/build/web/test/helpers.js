var Amen, EventEmitter, accumulate, assert, combine, createReadStream, events, flow, go, lines, map, next, stream;
({
  createReadStream
} = require("fs"));
({
  EventEmitter
} = require("events"));
assert = require("assert");
Amen = require("amen");
({
  next
} = require("../src/iterator"));
({
  go
} = require("../src/helpers"));
({
  map,
  accumulate,
  lines
} = require("../src/filters"));
({
  flow,
  events,
  stream,
  combine
} = require("../src/adapters"));
Amen.describe("Helpers", function (context) {
  context.test("go", function* () {
    var _lines;

    _lines = [];
    yield go([stream(createReadStream("./test/data/lines.txt")), lines, map(function (line) {
      return _lines.push(line);
    })]);
    assert(_lines.length === 3);
    assert(_lines[0] === "one");
    assert(_lines[1] === "two");
    return assert(_lines[2] === "three");
  });
  return context.test("combine/accumulate example", function* () {
    var click, i, j, k;
    click = {
      increment: new EventEmitter(),
      decrement: new EventEmitter()
    };
    i = flow([events("change", click.increment), map(function () {
      return 1;
    })]);
    j = flow([events("change", click.decrement), map(function () {
      return -1;
    })]);
    k = flow([combine(i, j), accumulate(function (a, b) {
      return a + b;
    }, 0)]); // inc, dec

    click.increment.emit("change");
    assert((yield next(k)).value === 1);
    click.decrement.emit("change");
    assert((yield next(k)).value === 0);
    click.increment.emit("change");
    assert((yield next(k)).value === 1);
    click.increment.emit("change");
    assert((yield next(k)).value === 2);
    click.decrement.emit("change");
    return assert((yield next(k)).value === 1);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9keW9kZXIvcmVwb3MvcGFuZGEtcml2ZXIvdGVzdC9oZWxwZXJzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLElBQUEsRUFBQSxZQUFBLEVBQUEsVUFBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsZ0JBQUEsRUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxNQUFBO0FBQUEsQ0FBQTtBQUFBLEVBQUE7QUFBQSxJQUFxQixPQUFBLENBQXJCLElBQXFCLENBQXJCO0FBQ0EsQ0FBQTtBQUFBLEVBQUE7QUFBQSxJQUFpQixPQUFBLENBQWpCLFFBQWlCLENBQWpCO0FBRUEsTUFBQSxHQUFTLE9BQUEsQ0FBQSxRQUFBLENBQVQ7QUFDQSxJQUFBLEdBQU8sT0FBQSxDQUFBLE1BQUEsQ0FBUDtBQUVBLENBQUE7QUFBQSxFQUFBO0FBQUEsSUFBUyxPQUFBLENBQVQsaUJBQVMsQ0FBVDtBQUNBLENBQUE7QUFBQSxFQUFBO0FBQUEsSUFBTyxPQUFBLENBQVAsZ0JBQU8sQ0FBUDtBQUNBLENBQUE7QUFBQSxFQUFBLEdBQUE7QUFBQSxFQUFBLFVBQUE7QUFBQSxFQUFBO0FBQUEsSUFBMkIsT0FBQSxDQUEzQixnQkFBMkIsQ0FBM0I7QUFDQSxDQUFBO0FBQUEsRUFBQSxJQUFBO0FBQUEsRUFBQSxNQUFBO0FBQUEsRUFBQSxNQUFBO0FBQUEsRUFBQTtBQUFBLElBQWtDLE9BQUEsQ0FBbEMsaUJBQWtDLENBQWxDO0FBRUEsSUFBSSxDQUFKLFFBQUEsQ0FBQSxTQUFBLEVBQXlCLFVBQUEsT0FBQSxFQUFBO0FBRXZCLEVBQUEsT0FBTyxDQUFQLElBQUEsQ0FBQSxJQUFBLEVBQW1CLGFBQUE7QUFFakIsUUFBQSxNQUFBOztBQUFBLElBQUEsTUFBQSxHQUFTLEVBQVQ7QUFFQSxVQUFNLEVBQUEsQ0FBRyxDQUNQLE1BQUEsQ0FBTyxnQkFBQSxDQURBLHVCQUNBLENBQVAsQ0FETyxFQUFBLEtBQUEsRUFHUCxHQUFBLENBQUksVUFBQSxJQUFBLEVBQUE7YUFBVSxNQUFNLENBQU4sSUFBQSxDQUFBLElBQUEsQztBQUhQLEtBR1AsQ0FITyxDQUFILENBQU47QUFNQSxJQUFBLE1BQUEsQ0FBTyxNQUFNLENBQU4sTUFBQSxLQUFQLENBQUEsQ0FBQTtBQUNBLElBQUEsTUFBQSxDQUFPLE1BQU8sQ0FBUCxDQUFPLENBQVAsS0FBUCxLQUFBLENBQUE7QUFDQSxJQUFBLE1BQUEsQ0FBTyxNQUFPLENBQVAsQ0FBTyxDQUFQLEtBQVAsS0FBQSxDQUFBO1dBQ0EsTUFBQSxDQUFPLE1BQU8sQ0FBUCxDQUFPLENBQVAsS0FBUCxPQUFBLEM7QUFiRixHQUFBO1NBZUEsT0FBTyxDQUFQLElBQUEsQ0FBQSw0QkFBQSxFQUEyQyxhQUFBO0FBQ3pDLFFBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQTtBQUFBLElBQUEsS0FBQSxHQUNFO0FBQUEsTUFBQSxTQUFBLEVBQVcsSUFBWCxZQUFXLEVBQVg7QUFDQSxNQUFBLFNBQUEsRUFBVyxJQUFJLFlBQUo7QUFEWCxLQURGO0FBSUEsSUFBQSxDQUFBLEdBQUksSUFBQSxDQUFLLENBQ1AsTUFBQSxDQUFBLFFBQUEsRUFBaUIsS0FBSyxDQURmLFNBQ1AsQ0FETyxFQUVQLEdBQUEsQ0FBSSxZQUFBO2FBQUcsQztBQUZBLEtBRVAsQ0FGTyxDQUFMLENBQUo7QUFLQSxJQUFBLENBQUEsR0FBSSxJQUFBLENBQUssQ0FDUCxNQUFBLENBQUEsUUFBQSxFQUFpQixLQUFLLENBRGYsU0FDUCxDQURPLEVBRVAsR0FBQSxDQUFJLFlBQUE7YUFBRyxDQUFDLEM7QUFGRCxLQUVQLENBRk8sQ0FBTCxDQUFKO0FBS0EsSUFBQSxDQUFBLEdBQUksSUFBQSxDQUFLLENBQ1AsT0FBQSxDQUFBLENBQUEsRUFETyxDQUNQLENBRE8sRUFFUCxVQUFBLENBQVksVUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBO2FBQVUsQ0FBQSxHQUFJLEM7QUFBMUIsS0FBQSxFQUZPLENBRVAsQ0FGTyxDQUFMLENBQUosQ0FmeUMsQzs7QUFxQnpDLElBQUEsS0FBSyxDQUFDLFNBQU4sQ0FBQSxJQUFBLENBQUEsUUFBQTtBQUNBLElBQUEsTUFBQSxDQUFPLENBQUMsTUFBTSxJQUFBLENBQVAsQ0FBTyxDQUFQLEVBQUEsS0FBQSxLQUFQLENBQUEsQ0FBQTtBQUNBLElBQUEsS0FBSyxDQUFDLFNBQU4sQ0FBQSxJQUFBLENBQUEsUUFBQTtBQUNBLElBQUEsTUFBQSxDQUFPLENBQUMsTUFBTSxJQUFBLENBQVAsQ0FBTyxDQUFQLEVBQUEsS0FBQSxLQUFQLENBQUEsQ0FBQTtBQUNBLElBQUEsS0FBSyxDQUFDLFNBQU4sQ0FBQSxJQUFBLENBQUEsUUFBQTtBQUNBLElBQUEsTUFBQSxDQUFPLENBQUMsTUFBTSxJQUFBLENBQVAsQ0FBTyxDQUFQLEVBQUEsS0FBQSxLQUFQLENBQUEsQ0FBQTtBQUNBLElBQUEsS0FBSyxDQUFDLFNBQU4sQ0FBQSxJQUFBLENBQUEsUUFBQTtBQUNBLElBQUEsTUFBQSxDQUFPLENBQUMsTUFBTSxJQUFBLENBQVAsQ0FBTyxDQUFQLEVBQUEsS0FBQSxLQUFQLENBQUEsQ0FBQTtBQUNBLElBQUEsS0FBSyxDQUFDLFNBQU4sQ0FBQSxJQUFBLENBQUEsUUFBQTtXQUNBLE1BQUEsQ0FBTyxDQUFDLE1BQU0sSUFBQSxDQUFQLENBQU8sQ0FBUCxFQUFBLEtBQUEsS0FBUCxDQUFBLEM7QUE5QkYsR0FBQSxDO0FBakJGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJ7Y3JlYXRlUmVhZFN0cmVhbX0gPSByZXF1aXJlIFwiZnNcIlxue0V2ZW50RW1pdHRlcn0gPSByZXF1aXJlIFwiZXZlbnRzXCJcblxuYXNzZXJ0ID0gcmVxdWlyZSBcImFzc2VydFwiXG5BbWVuID0gcmVxdWlyZSBcImFtZW5cIlxuXG57bmV4dH0gPSByZXF1aXJlIFwiLi4vc3JjL2l0ZXJhdG9yXCJcbntnb30gPSByZXF1aXJlIFwiLi4vc3JjL2hlbHBlcnNcIlxue21hcCwgYWNjdW11bGF0ZSwgbGluZXN9ID0gcmVxdWlyZSBcIi4uL3NyYy9maWx0ZXJzXCJcbntmbG93LCBldmVudHMsIHN0cmVhbSwgY29tYmluZX0gPSByZXF1aXJlIFwiLi4vc3JjL2FkYXB0ZXJzXCJcblxuQW1lbi5kZXNjcmliZSBcIkhlbHBlcnNcIiwgKGNvbnRleHQpIC0+XG5cbiAgY29udGV4dC50ZXN0IFwiZ29cIiwgLT5cblxuICAgIF9saW5lcyA9IFtdXG5cbiAgICB5aWVsZCBnbyBbXG4gICAgICBzdHJlYW0gY3JlYXRlUmVhZFN0cmVhbSBcIi4vdGVzdC9kYXRhL2xpbmVzLnR4dFwiXG4gICAgICBsaW5lc1xuICAgICAgbWFwIChsaW5lKSAtPiBfbGluZXMucHVzaCBsaW5lXG4gICAgXVxuXG4gICAgYXNzZXJ0IF9saW5lcy5sZW5ndGggPT0gM1xuICAgIGFzc2VydCBfbGluZXNbMF0gPT0gXCJvbmVcIlxuICAgIGFzc2VydCBfbGluZXNbMV0gPT0gXCJ0d29cIlxuICAgIGFzc2VydCBfbGluZXNbMl0gPT0gXCJ0aHJlZVwiXG5cbiAgY29udGV4dC50ZXN0IFwiY29tYmluZS9hY2N1bXVsYXRlIGV4YW1wbGVcIiwgLT5cbiAgICBjbGljayA9XG4gICAgICBpbmNyZW1lbnQ6IG5ldyBFdmVudEVtaXR0ZXJcbiAgICAgIGRlY3JlbWVudDogbmV3IEV2ZW50RW1pdHRlclxuXG4gICAgaSA9IGZsb3cgW1xuICAgICAgZXZlbnRzIFwiY2hhbmdlXCIsIGNsaWNrLmluY3JlbWVudFxuICAgICAgbWFwIC0+IDFcbiAgICBdXG5cbiAgICBqID0gZmxvdyBbXG4gICAgICBldmVudHMgXCJjaGFuZ2VcIiwgY2xpY2suZGVjcmVtZW50XG4gICAgICBtYXAgLT4gLTFcbiAgICBdXG5cbiAgICBrID0gZmxvdyBbXG4gICAgICBjb21iaW5lIGksIGpcbiAgICAgIGFjY3VtdWxhdGUgKChhLCBiKSAtPiBhICsgYiksIDBcbiAgICBdXG5cbiAgICAjIGluYywgZGVjXG4gICAgY2xpY2suaW5jcmVtZW50LmVtaXQgXCJjaGFuZ2VcIlxuICAgIGFzc2VydCAoeWllbGQgbmV4dCBrKS52YWx1ZSA9PSAxXG4gICAgY2xpY2suZGVjcmVtZW50LmVtaXQgXCJjaGFuZ2VcIlxuICAgIGFzc2VydCAoeWllbGQgbmV4dCBrKS52YWx1ZSA9PSAwXG4gICAgY2xpY2suaW5jcmVtZW50LmVtaXQgXCJjaGFuZ2VcIlxuICAgIGFzc2VydCAoeWllbGQgbmV4dCBrKS52YWx1ZSA9PSAxXG4gICAgY2xpY2suaW5jcmVtZW50LmVtaXQgXCJjaGFuZ2VcIlxuICAgIGFzc2VydCAoeWllbGQgbmV4dCBrKS52YWx1ZSA9PSAyXG4gICAgY2xpY2suZGVjcmVtZW50LmVtaXQgXCJjaGFuZ2VcIlxuICAgIGFzc2VydCAoeWllbGQgbmV4dCBrKS52YWx1ZSA9PSAxXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=/Users/dyoder/repos/panda-river/test/helpers.coffee