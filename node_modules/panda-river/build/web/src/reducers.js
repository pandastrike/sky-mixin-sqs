var all,
    any,
    average,
    collect,
    define,
    delimit,
    each,
    fold,
    foldr,
    isAny,
    reduce,
    reduceRight,
    start,
    sum,
    splice = [].splice;
import { curry, binary, ternary, noOp, negate } from "panda-garden";
import { isFunction, isDefined, isArray, push, add } from "panda-parchment";
import { Method } from "panda-generics";
import { isIterable, isIterator, iterator } from "./iterator";
import { isReagent, isReactor, reactor } from "./reactor";
import { producer } from "./adapters";

isAny = function (x) {
  return true;
};

define = function ({
  name,
  description,
  terms,
  iterator,
  reactor
}) {
  var f;
  f = Method.create({
    description: description,
    default: function () {
      throw `${name}: invalid arguments`;
    }
  });
  Method.define(f, ...terms, isDefined, function (...args) {
    var last, ref;
    ref = args, [...args] = ref, [last] = splice.call(args, -1);

    if (args.length === terms.length) {
      return f(...args, producer(last));
    } else {
      throw `${name}: wrong number of arguments`;
    }
  });
  Method.define(f, ...terms, isIterator, iterator);
  Method.define(f, ...terms, isReactor, reactor);
  return f;
};

start = define({
  name: "start",
  description: "Obtain products but do nothing with them.",
  terms: [],
  iterator: function (i) {
    var x;

    for (x of i) {
      void 0;
    }

    return void 0;
  },
  reactor: async function (r) {
    var x;

    for await (x of r) {
      void 0;
    }

    return void 0;
  }
}); // The point here is to avoid using memory.

each = curry(binary(define({
  name: "each",
  description: "Apply a function to each product, returning undefined.",
  terms: [isFunction],
  iterator: function (f, i) {
    var x;

    for (x of i) {
      f(x);
    }

    return void 0;
  },
  reactor: async function (f, r) {
    var x;

    for await (x of r) {
      f(x);
    }

    return void 0;
  }
})));
reduce = fold = curry(ternary(define({
  name: "fold/reduce",
  description: "Fold or reduce a producer into a value.",
  terms: [isFunction, isAny],
  iterator: function (f, k, i) {
    var x;

    for (x of i) {
      k = f(k, x);
    }

    return k;
  },
  reactor: async function (f, k, r) {
    var x;

    for await (x of r) {
      k = f(k, x);
    }

    return k;
  }
})));

collect = function (p) {
  return reduce(push, [], p);
};

reduceRight = foldr = curry(ternary(define({
  name: "foldr/reduceRight",
  description: "Fold or reduce a producer into a value.",
  terms: [isFunction, isAny],
  iterator: function (f, k, i) {
    return collect(i).reduceRight(f, k);
  },
  reactor: async function (f, k, r) {
    return (await collect(r)).reduceRight(f, k);
  }
})));
any = curry(binary(define({
  name: "any",
  description: "Return true if any product satisfies the predicate.",
  terms: [isFunction],
  iterator: function (f, i) {
    var x;

    for (x of i) {
      if (f(x)) {
        return true;
      }
    }

    return false;
  },
  reactor: async function (f, r) {
    var x;

    for await (x of r) {
      if (f(x)) {
        return true;
      }
    }

    return false;
  }
})));
all = curry(function (f, p) {
  return !any(negate(f), p);
});

sum = function (ax) {
  return fold(add, 0, ax);
};

average = function (i) {
  var f, j;
  j = 0; // current count

  f = function (r, n) {
    return r += (n - r) / ++j;
  };

  return fold(f, 0, i);
};

delimit = curry(function (d, i) {
  var f;

  f = function (r, s) {
    if (r === "") {
      return r += s;
    } else {
      return r += d + s;
    }
  };

  return fold(f, "", i);
});
export { reduce, fold, foldr, reduceRight, collect, each, start, any, all, sum, average, delimit };
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/dyoder/repos/panda-river/src/reducers.coffee