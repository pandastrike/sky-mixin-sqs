var events, flow, go, into, isFunctionList, isProducer, pool, producer, queue, read, repeat, union, wait;
import { Method } from "panda-generics";
import { identity, curry, binary, compose, pipe, flip } from "panda-garden";
import { promise, follow, reject, all, isDefined, isArray, isFunction, isPromise } from "panda-parchment";
import { isIterable, isIterator, iterator } from "./iterator";
import { isReagent, isReactor, reactor } from "./reactor";
import { start, collect } from "./reducers"; // isProducer

isProducer = function (x) {
  return isIterator(x) || isReactor(x);
}; // producer


producer = Method.create({
  description: "Attempts to turn its argument into an iterator or reactor."
});
Method.define(producer, isIterable, function (x) {
  return iterator(x);
});
Method.define(producer, isReagent, function (x) {
  return reactor(x);
});
Method.define(producer, isProducer, identity); // repeat

repeat = function* (x) {
  while (true) {
    yield x;
  }
}; // queue


queue = function () {
  var dq, p, q;
  q = [];
  p = [];
  return {
    enqueue: function (value) {
      var resolve;

      if (p.length > 0) {
        resolve = p.shift();
        return resolve(value);
      } else {
        return q.push(value);
      }
    },
    dequeue: dq = function () {
      if (q.length > 0) {
        return follow(q.shift());
      } else {
        return promise(function (resolve) {
          return p.push(resolve);
        });
      }
    },
    idle: function () {
      return p.length === 0 && q.length === 0;
    }
  };
}; // events


events = curry(async function* (name, source) {
  var q, results;
  q = queue();

  if (source.on != null) {
    source.on(name, function (event) {
      return q.enqueue(event);
    });
  } else if (source.addEventListener != null) {
    source.addEventListener(name, function (event) {
      return q.enqueue(event);
    });
  } else {
    throw new TypeError("events: source must support `on` or `addEventListener` method");
  }

  results = [];

  while (true) {
    results.push((yield await q.dequeue()));
  }

  return results;
}); // read

read = async function* (s) {
  var data, end, q, results;
  q = queue();
  end = false;
  s.on("data", function (data) {
    return q.enqueue(data);
  });
  s.on("error", function (error) {
    return q.enqueue(reject(error));
  });
  s.on("end", function () {
    end = true;
    return q.enqueue(void 0);
  });
  results = [];

  while (true) {
    data = await q.dequeue();

    if (end) {
      break;
    } else {
      results.push((yield data));
    }
  }

  return results;
}; // union


union = async function* (...px) {
  var done, i, len, p, q, results;
  q = queue();
  done = 0;

  for (i = 0, len = px.length; i < len; i++) {
    p = px[i];

    (async function (p) {
      var x;

      for await (x of p) {
        q.enqueue(x);
      }

      return done++;
    })(p);
  }

  while (true) {
    yield await q.dequeue();

    if (done === px.length) {
      break;
    }
  }

  results = [];

  while (!q.idle()) {
    results.push((yield await q.dequeue()));
  }

  return results;
}; // flow


isFunctionList = function (...fx) {
  var f, i, len;

  for (i = 0, len = fx.length; i < len; i++) {
    f = fx[i];

    if (!isFunction(f)) {
      return false;
    }
  }

  return true;
};

flow = Method.create({
  description: "Compose functions and a producer."
}); // check for promise

Method.define(flow, isDefined, isArray, function (x, ax) {
  return flow(x, ...ax);
});
Method.define(flow, isDefined, isFunctionList, function (x, ...fx) {
  return flow(x, pipe(...fx));
});
Method.define(flow, isDefined, isFunction, function (x, f) {
  return flow(producer(x), f);
});
Method.define(flow, isPromise, isFunction, async function (x, f) {
  return flow((await x), f);
});
Method.define(flow, isProducer, isFunction, function (p, f) {
  return f(p);
});
Method.define(flow, isArray, function (ax) {
  return flow(...ax);
});
go = compose(start, flow);
into = curry(binary(flip(go)));
wait = curry(async function* (filter, producer) {
  var ref, results, x;
  ref = filter(producer);
  results = [];

  for await (x of ref) {
    results.push((yield await x));
  }

  return results;
});
pool = curry(async function* (filter, producer) {
  var i, len, ref, results, x;
  ref = await all(collect(filter(producer)));
  results = [];

  for (i = 0, len = ref.length; i < len; i++) {
    x = ref[i];
    results.push((yield x));
  }

  return results;
});
export { isProducer, producer, repeat, events, read, union, flow, go, into, wait, pool };
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/dyoder/repos/panda-river/src/adapters.coffee