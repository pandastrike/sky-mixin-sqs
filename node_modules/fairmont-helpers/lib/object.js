// Generated by CoffeeScript 1.12.4
(function() {
  var bind, clone, curry, deepEqual, delegate, detach, extend, fromJSON, has, include, isFunction, isObject, keys, merge, negate, omit, pairs, pick, properties, property, query, ref, ref1, toJSON, values,
    slice = [].slice;

  ref = require("fairmont-core"), curry = ref.curry, negate = ref.negate;

  ref1 = require("./type"), isObject = ref1.isObject, isFunction = ref1.isFunction;

  deepEqual = require("./util").deepEqual;

  include = extend = function() {
    var i, key, len, mixin, mixins, object, value;
    object = arguments[0], mixins = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    for (i = 0, len = mixins.length; i < len; i++) {
      mixin = mixins[i];
      for (key in mixin) {
        value = mixin[key];
        object[key] = value;
      }
    }
    return object;
  };

  merge = function() {
    var destination, i, k, len, object, objects, v;
    objects = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    destination = {};
    for (i = 0, len = objects.length; i < len; i++) {
      object = objects[i];
      for (k in object) {
        v = object[k];
        destination[k] = v;
      }
    }
    return destination;
  };

  clone = function(object) {
    var _clone, flags, key;
    if ((object == null) || typeof object !== 'object') {
      return object;
    }
    if (object instanceof Date) {
      return new Date(object.getTime());
    }
    if (object instanceof RegExp) {
      flags = '';
      if (object.global != null) {
        flags += 'g';
      }
      if (object.ignoreCase != null) {
        flags += 'i';
      }
      if (object.multiline != null) {
        flags += 'm';
      }
      if (object.sticky != null) {
        flags += 'y';
      }
      return new RegExp(object.source, flags);
    }
    _clone = new object.constructor();
    for (key in object) {
      _clone[key] = clone(object[key]);
    }
    return _clone;
  };

  property = curry(function(key, object) {
    return object[key];
  });

  delegate = function(from, to) {
    var name, results, value;
    results = [];
    for (name in to) {
      value = to[name];
      if (isFunction(value)) {
        results.push((function(value) {
          return from[name] = function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return value.call.apply(value, [to].concat(slice.call(args)));
          };
        })(value));
      }
    }
    return results;
  };

  bind = curry(function(f, x) {
    return f.bind(x);
  });

  detach = function(f) {
    return curry(function() {
      var args, x;
      x = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return f.apply(x, args);
    });
  };

  properties = (function() {
    var defaults;
    defaults = {
      enumerable: true,
      configurable: true
    };
    return function(object, properties) {
      var key, results, value;
      results = [];
      for (key in properties) {
        value = properties[key];
        include(value, defaults);
        results.push(Object.defineProperty(object, key, value));
      }
      return results;
    };
  })();

  has = curry(function(p, x) {
    return x[p] != null;
  });

  keys = Object.keys;

  values = function(x) {
    var k, results, v;
    results = [];
    for (k in x) {
      v = x[k];
      results.push(v);
    }
    return results;
  };

  pairs = function(x) {
    var k, results, v;
    results = [];
    for (k in x) {
      v = x[k];
      results.push([k, v]);
    }
    return results;
  };

  pick = curry(function(f, x) {
    var k, r, v;
    r = {};
    for (k in x) {
      v = x[k];
      if (f(k, v)) {
        r[k] = v;
      }
    }
    return r;
  });

  omit = curry(function(f, x) {
    return pick(negate(f), x);
  });

  query = curry(function(example, target) {
    var k, v;
    if ((isObject(example)) && (isObject(target))) {
      for (k in example) {
        v = example[k];
        if (!query(v, target[k])) {
          return false;
        }
      }
      return true;
    } else {
      return deepEqual(example, target);
    }
  });

  toJSON = function(x, pretty) {
    if (pretty == null) {
      pretty = false;
    }
    if (pretty) {
      return JSON.stringify(x, null, 2);
    } else {
      return JSON.stringify(x);
    }
  };

  fromJSON = JSON.parse;

  module.exports = {
    include: include,
    extend: extend,
    merge: merge,
    clone: clone,
    properties: properties,
    property: property,
    delegate: delegate,
    bind: bind,
    detach: detach,
    has: has,
    keys: keys,
    values: values,
    pairs: pairs,
    pick: pick,
    omit: omit,
    query: query,
    toJSON: toJSON,
    fromJSON: fromJSON
  };

}).call(this);
