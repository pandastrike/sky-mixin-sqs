// Generated by CoffeeScript 1.12.4
(function() {
  var GeneratorFunction, Type, curry, instanceOf, isArray, isBoolean, isBuffer, isDate, isDefined, isError, isFinite, isFloat, isFunction, isGeneratorFunction, isInteger, isKind, isNaN, isNumber, isObject, isPromise, isPrototype, isRegExp, isString, isTransitivePrototype, isType, isUndefined, prototype;

  curry = require("fairmont-core").curry;

  prototype = function(value) {
    if (value != null) {
      return Object.getPrototypeOf(value);
    }
  };

  isPrototype = curry(function(p, value) {
    return (p != null) && p === prototype(value);
  });

  isType = curry(function(type, value) {
    return isPrototype(type != null ? type.prototype : void 0, value);
  });

  isTransitivePrototype = curry(function(p, value) {
    var q;
    return (p != null) && (p === (q = prototype(value)) || (q && isTransitivePrototype(p, q)));
  });

  isKind = curry(function(type, value) {
    return isTransitivePrototype(type != null ? type.prototype : void 0, value);
  });

  isNumber = isType(Number);

  isNaN = function(n) {
    return Number.isNaN(n);
  };

  isFinite = function(n) {
    return Number.isFinite(n);
  };

  isInteger = function(n) {
    return Number.isInteger(n);
  };

  isFloat = function(n) {
    return n === +n && n !== (n | 0);
  };

  isBoolean = isType(Boolean);

  isDate = isType(Date);

  isRegExp = isType(RegExp);

  isString = isType(String);

  isBuffer = isType(Buffer);

  isFunction = isType(Function);

  isObject = isType(Object);

  isArray = isType(Array);

  isError = isType(Error);

  isDefined = function(x) {
    return x != null;
  };

  isUndefined = function(x) {
    return x == null;
  };

  GeneratorFunction = (function*() {
    return (yield null);
  }).constructor;

  isGeneratorFunction = isType(GeneratorFunction);

  isPromise = isType(Promise);

  instanceOf = curry(function(t, x) {
    return x instanceof t;
  });

  Type = {
    create: function(type) {
      return Object.create(type != null ? type.prototype : void 0);
    },
    define: function(parent) {
      if (parent == null) {
        parent = Object;
      }
      return {
        prototype: Type.create(parent)
      };
    }
  };

  module.exports = {
    prototype: prototype,
    isPrototype: isPrototype,
    isTransitivePrototype: isTransitivePrototype,
    isType: isType,
    isKind: isKind,
    Type: Type,
    instanceOf: instanceOf,
    isBoolean: isBoolean,
    isNumber: isNumber,
    isNaN: isNaN,
    isFinite: isFinite,
    isInteger: isInteger,
    isFloat: isFloat,
    isString: isString,
    isBuffer: isBuffer,
    isFunction: isFunction,
    isObject: isObject,
    isArray: isArray,
    isDefined: isDefined,
    isUndefined: isUndefined,
    isRegExp: isRegExp,
    isDate: isDate,
    isGeneratorFunction: isGeneratorFunction,
    isPromise: isPromise
  };

}).call(this);
