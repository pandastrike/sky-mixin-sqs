// Generated by CoffeeScript 1.12.4
(function() {
  var Amen, assert;

  assert = require("assert");

  Amen = require("amen");

  Amen.describe("Type functions", function(context) {
    var Type, deepEqual, instanceOf, isArray, isBoolean, isBuffer, isDate, isDefined, isFinite, isFloat, isFunction, isGeneratorFunction, isInteger, isKind, isNaN, isNumber, isObject, isPromise, isRegExp, isString, isType, prototype, ref;
    ref = require("../src/type"), deepEqual = ref.deepEqual, prototype = ref.prototype, isType = ref.isType, isKind = ref.isKind, isBoolean = ref.isBoolean, isNumber = ref.isNumber, isNaN = ref.isNaN, isFinite = ref.isFinite, isInteger = ref.isInteger, isFloat = ref.isFloat, isString = ref.isString, isBuffer = ref.isBuffer, isFunction = ref.isFunction, isObject = ref.isObject, isArray = ref.isArray, isRegExp = ref.isRegExp, isDate = ref.isDate, isDefined = ref.isDefined, isGeneratorFunction = ref.isGeneratorFunction, isPromise = ref.isPromise, Type = ref.Type, instanceOf = ref.instanceOf;
    context.test("prototype", function() {
      context.test("isKind", function() {
        var A, B, b;
        A = {
          prototype: {}
        };
        B = {
          prototype: Object.create(A.prototype)
        };
        b = Object.create(B.prototype);
        assert(isKind(B, b));
        assert(isKind(A, b));
        return assert(!(isKind(A, {})));
      });
      return context.test("isType", function() {
        context.test("isNumber", function() {
          assert(isNumber(7));
          assert(!isNumber("7"));
          assert(!isNumber(false));
          return assert(isNumber.length === 1);
        });
        context.test("isBoolean", function() {
          assert(isBoolean(true));
          return assert(!isBoolean(7));
        });
        context.test("isDate", function() {
          assert(isDate(new Date));
          return assert(!isDate(7));
        });
        context.test("isRegExp", function() {
          assert(isRegExp(/\s/));
          return assert(!isRegExp(7));
        });
        context.test("isString", function() {
          assert(isString("x"));
          return assert(!isString(7));
        });
        context.test("isBuffer", function() {
          return assert(isBuffer(new Buffer("hello")));
        });
        context.test("isFunction", function() {
          assert(isFunction(function() {}));
          assert(!isFunction(7));
          return assert(isFunction.length === 1);
        });
        context.test("isObject", function() {
          assert(isObject({}));
          return assert(!isObject(7));
        });
        return context.test("isArray", function() {
          assert(isArray([]));
          return assert(!isArray(7));
        });
      });
    });
    context.test("isNaN");
    context.test("isFinite");
    context.test("isInteger", function() {
      assert(isInteger(5));
      assert(!isInteger(3.5));
      assert(!isInteger("5"));
      return assert(!isInteger(0/0));
    });
    context.test("isFloat", function() {
      assert(isFloat(3.5));
      assert(!isFloat(5));
      assert(!isFloat("3.5"));
      return assert(!isFloat(0/0));
    });
    isDefined = function(x) {
      return x != null;
    };
    context.test("isDefined", function() {
      assert(isDefined({}));
      return assert(!isDefined(void 0));
    });
    context.test("isGeneratorFunction", function() {
      var f;
      f = function*() {
        return (yield true);
      };
      return assert(isGeneratorFunction(f));
    });
    return context.test("Type", function() {
      var A, B, b;
      A = Type.define();
      B = Type.define(A);
      b = Type.create(B);
      context.test("isType", function() {
        return assert(isType(B, b));
      });
      return context.test("isKind", function() {
        return assert(isKind(A, b));
      });
    });
  });

}).call(this);
