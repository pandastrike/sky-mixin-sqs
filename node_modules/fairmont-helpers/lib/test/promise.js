// Generated by CoffeeScript 1.12.4
(function() {
  var Amen, FS, assert, async, call, join, lift, promise, ref, reject, resolve,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  assert = require("assert");

  assert.rejects = function(f) {
    return f().then(function() {
      return assert.fail("Missing expected promise rejection.");
    })["catch"](function() {});
  };

  assert.resolves = function(f) {
    return f()["catch"](function() {
      return assert.fail("Missing expected promise resolution.");
    });
  };

  Amen = require("amen");

  FS = require("fs");

  join = require("path").join;

  ref = require("../src/promise"), promise = ref.promise, async = ref.async, call = ref.call, lift = ref.lift, resolve = ref.resolve, reject = ref.reject;

  Amen.describe("Promise helpers", function(context) {
    context.test("lift", function() {
      var readdir;
      readdir = lift(FS.readdir);
      return context.test("async", function*() {
        var ls;
        ls = async(function*(root) {
          var i, len, path, ref1, results;
          ref1 = (yield readdir(root));
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            path = ref1[i];
            results.push(join(root, path));
          }
          return results;
        });
        assert(indexOf.call((yield ls(__dirname)), __filename) >= 0);
        assert.resolves(async(function*() {
          return (yield resolve(true));
        }));
        return assert.rejects(async(function*() {
          return (yield reject(new Error("this is a test error")));
        }));
      });
    });
    return context.test("unhandled rejection");
  });

}).call(this);
