// Generated by CoffeeScript 1.12.4
(function() {
  var Amen, assert;

  assert = require("assert");

  Amen = require("amen");

  Amen.describe("String functions", function(context) {
    var blank, camelCase, capitalize, dashed, htmlEscape, isMatch, match, plainText, ref, replace, titleCase, toLower, toString, toUpper, underscored, w;
    ref = require("../src/string"), toString = ref.toString, toUpper = ref.toUpper, toLower = ref.toLower, capitalize = ref.capitalize, titleCase = ref.titleCase, camelCase = ref.camelCase, underscored = ref.underscored, dashed = ref.dashed, plainText = ref.plainText, htmlEscape = ref.htmlEscape, w = ref.w, blank = ref.blank, match = ref.match, isMatch = ref.isMatch, replace = ref.replace;
    context.test("toString");
    context.test("toUpper");
    context.test("toLower");
    context.test("plainText", function() {
      assert(plainText("hello-world") === "hello world");
      return assert(plainText("Hello World") === "hello world");
    });
    context.test("capitalize", function() {
      return assert(capitalize("hello world") === "Hello world");
    });
    context.test("titleCase", function() {
      return assert(titleCase("hello woRld") === "Hello World");
    });
    context.test("camelCase", function() {
      return assert(camelCase("Hello World") === "helloWorld");
    });
    context.test("underscored", function() {
      return assert(underscored("Hello World") === "hello_world");
    });
    context.test("dashed", function() {
      return assert(dashed("Hello World") === "hello-world");
    });
    context.test("htmlEscape", function() {
      return assert(htmlEscape("<a href='foo'>bar & baz</a>") === "&lt;a href=&#39;foo&#39;&gt;bar &amp; baz&lt;&#x2F;a&gt;");
    });
    context.test("trim");
    context.test("split");
    context.test("w", function() {
      return assert((w("one two three")).length === 3);
    });
    context.test("blank", function() {
      assert(blank(""));
      return assert(!blank("x"));
    });
    context.test("isMatch", function() {
      return assert(isMatch(/foo/, "foobar"));
    });
    context.test("match", function() {
      return assert((isMatch(/foo/, "foobar"))[0] = "foo");
    });
    return context.test("replace", function() {
      return assert((replace(/bar/, "baz", "foobar")) === "foobaz");
    });
  });

}).call(this);
