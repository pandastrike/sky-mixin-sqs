// Generated by CoffeeScript 1.12.4
(function() {
  var Amen, assert;

  assert = require("assert");

  Amen = require("amen");

  Amen.describe("Object functions", function(context) {
    var bind, clone, compose, deepEqual, delegate, detach, extend, fromJSON, has, include, keys, merge, omit, pairs, pick, properties, property, query, ref, toJSON, values;
    ref = require("../src/object"), include = ref.include, extend = ref.extend, merge = ref.merge, clone = ref.clone, properties = ref.properties, property = ref.property, delegate = ref.delegate, bind = ref.bind, detach = ref.detach, has = ref.has, keys = ref.keys, values = ref.values, pairs = ref.pairs, pick = ref.pick, omit = ref.omit, query = ref.query, toJSON = ref.toJSON, fromJSON = ref.fromJSON;
    compose = require("fairmont-core").compose;
    deepEqual = require("../src/util").deepEqual;
    context.test("include && extend", function() {
      var stats;
      stats = {
        hp: 50,
        mp: 100
      };
      include(stats, {
        stamina: 10,
        strength: 10
      }, {
        intelligence: 50,
        agility: 20
      });
      assert.deepEqual(Object.keys(stats), ["hp", "mp", "stamina", "strength", "intelligence", "agility"]);
      include(stats, {
        stamina: 50
      });
      assert(stats.stamina === 50);
      stats = {
        hp: 50,
        mp: 25
      };
      extend(stats, {
        stamina: 10,
        strength: 10
      }, {
        intelligence: 50,
        agility: 20
      });
      assert.deepEqual(Object.keys(stats), ["hp", "mp", "stamina", "strength", "intelligence", "agility"]);
      return assert.deepEqual(Object.keys(stats), ["hp", "mp", "stamina", "strength", "intelligence", "agility"]);
    });
    context.test("merge", function() {
      var stats;
      stats = merge({
        hp: 50,
        mp: 100
      }, {
        stamina: 10,
        strength: 10
      }, {
        intelligence: 50,
        agility: 20
      });
      return assert.deepEqual(Object.keys(stats), ["hp", "mp", "stamina", "strength", "intelligence", "agility"]);
    });
    context.test("clone", function() {
      var person;
      person = {
        name: "Steve Jobs",
        address: {
          street: "1 Infinite Loop",
          city: "Cupertino, CA",
          zip: 95014
        },
        birthdate: new Date('Feb 24, 1955'),
        regex: /foo.*/igm
      };
      assert.notEqual(clone(person), person);
      assert.deepEqual(clone(person), person);
      return assert((clone(1)) === 1);
    });
    context.test("property", function() {
      var a, bazFoo;
      a = {
        foo: 1,
        bar: 2,
        baz: {
          foo: 2
        }
      };
      assert((property("foo", a)) === 1);
      bazFoo = compose(property("foo"), property("baz"));
      return assert((bazFoo(a)) === 2);
    });
    context.test("delegate", function() {
      var a, b;
      a = {
        foo: function() {
          return this.bar();
        },
        bar: function() {
          return "This is a";
        }
      };
      b = {
        bar: function() {
          return "This is b";
        }
      };
      assert(a.foo() === "This is a");
      delegate(a, b);
      assert(a.foo() === "This is b");
      return assert(a.bar() === "This is b");
    });
    context.test("bind", function() {
      var boundGetX, foo, getX;
      this.x = 9;
      foo = {
        x: 81,
        getX: function() {
          return this.x;
        }
      };
      assert(foo.getX() === 81);
      getX = foo.getX;
      assert(getX() === 9);
      boundGetX = bind(getX, foo);
      assert(boundGetX() === 81);
      foo.x = 11;
      return assert(boundGetX() === 11);
    });
    context.test("detach", function() {
      var bar, foo, g, trim;
      foo = function() {};
      foo.prototype.x = 81;
      foo.prototype.f = function(y) {
        return this.x / y;
      };
      this.x = 9;
      bar = {
        x: 36
      };
      g = detach(foo.prototype.f);
      assert((g(this, 3)) === 3);
      assert((g(bar, 3)) === 12);
      trim = detach(String.prototype.trim);
      return assert((trim("  panda    ")) === "panda");
    });
    context.test("properties", function() {
      var A, a;
      A = (function() {
        function A() {}

        properties(A.prototype, {
          foo: {
            get: function() {
              return this._foo;
            },
            set: function(v) {
              return this._foo = v;
            }
          }
        });

        return A;

      })();
      a = new A;
      a.foo = "bar";
      return assert(a._foo === "bar");
    });
    context.test("has", function() {
      var car, fish, panda, wheelCheck;
      panda = {
        color: "black and white",
        limbs: 4
      };
      fish = {
        color: "silver",
        limbs: 0
      };
      car = {
        color: "red",
        wheels: 4
      };
      assert((has("limbs", panda)) === true);
      assert((has("limbs", fish)) === true);
      assert((has("limbs", car)) === false);
      wheelCheck = has("wheels");
      assert((wheelCheck(panda)) === false);
      assert((wheelCheck(fish)) === false);
      return assert((wheelCheck(car)) === true);
    });
    context.test("keys", function() {
      var panda;
      panda = {
        c: 3,
        v: 1,
        q: 12,
        t: 10
      };
      return assert.deepEqual(keys(panda), ["c", "v", "q", "t"]);
    });
    context.test("values", function() {
      var panda;
      panda = {
        c: 3,
        v: 1,
        q: 12,
        t: 10
      };
      return assert.deepEqual(values(panda), [3, 1, 12, 10]);
    });
    context.test("pairs", function() {
      var obj;
      assert(deepEqual(pairs({
        a: 1,
        b: 2,
        c: 3
      }), [["a", 1], ["b", 2], ["c", 3]]));
      obj = {
        a: {
          foo: 100,
          bar: 200
        },
        b: 2,
        c: 3
      };
      return assert.deepEqual(pairs(obj), [
        [
          'a', {
            foo: 100,
            bar: 200
          }
        ], ['b', 2], ['c', 3]
      ]);
    });
    context.test("pick", function() {
      var f, fruits, g, h;
      fruits = {
        apples: 3,
        oranges: null,
        mangos: 12
      };
      f = function(key, value) {
        return value != null;
      };
      g = function(key, value) {
        return value % 2 === 1;
      };
      h = function(key, value) {
        return key === "mangos";
      };
      assert.deepEqual(pick(f, fruits), {
        apples: 3,
        mangos: 12
      });
      assert.deepEqual(pick(g, fruits), {
        apples: 3
      });
      return assert.deepEqual(pick(h, fruits), {
        mangos: 12
      });
    });
    context.test("omit", function() {
      var f, fruits, g, h;
      fruits = {
        apples: 3,
        oranges: null,
        mangos: 12
      };
      f = function(key, value) {
        return value != null;
      };
      g = function(key, value) {
        return value % 2 === 0;
      };
      h = function(key, value) {
        return key === "mangos";
      };
      assert.deepEqual(omit(f, fruits), {
        oranges: null
      });
      assert.deepEqual(omit(g, fruits), {
        apples: 3
      });
      return assert.deepEqual(omit(h, fruits), {
        apples: 3,
        oranges: null
      });
    });
    context.test("query", function() {
      var findBeauty, princess, princesses;
      princess = {
        name: "Aurora",
        alias: {
          name: "Sleeping Beauty"
        },
        dwarves: 7,
        enemy: "Maleficent"
      };
      assert(query({
        name: "Aurora"
      }, princess) === true);
      assert(query({
        name: "Belle"
      }, princess) === false);
      findBeauty = query({
        name: "Sleeping Beauty"
      });
      assert(findBeauty(princess) === false);
      assert(findBeauty(princess.alias) === true);
      princesses = ["Ariel", "Aurora", "Belle", "Cinderella", "Jasmine", "Merida", "Mulan", "Pocahontas", "Rapunzel", "Tiana", "Snow White"];
      assert(query({
        name: "Aurora"
      }, princesses) === false);
      assert(query("Aurora", princesses) === false);
      return assert(query(11, princesses.length) === true);
    });
    context.test("toJSON", function() {
      var mage, pretty, string;
      mage = {
        vitals: {
          hp: 50,
          mp: 100
        },
        attributes: {
          stamina: 10,
          strength: 10,
          intelligence: 50,
          agility: 20
        }
      };
      string = toJSON(mage);
      pretty = toJSON(mage, true);
      assert(string === '{"vitals":{"hp":50,"mp":100},"attributes":{"stamina":10,"strength":10,"intelligence":50,"agility":20}}');
      return assert(pretty, '{ "vitals": { "hp": 50, "mp": 100 }, "attributes": { "stamina": 10, "strength": 10, "intelligence": 50, "agility": 20 } }');
    });
    return context.test("fromJSON", function() {
      var mage;
      mage = fromJSON('{"vitals":{"hp":50,"mp":100},"attributes":{"stamina":10,"strength":10,"intelligence":50,"agility":20}}');
      return assert(mage, {
        vitals: {
          hp: 50,
          mp: 100
        },
        attributes: {
          stamina: 10,
          strength: 10,
          intelligence: 50,
          agility: 20
        }
      });
    });
  });

}).call(this);
