// Generated by CoffeeScript 1.12.4
(function() {
  var Amen, assert, sinon;

  assert = require("assert");

  Amen = require("amen");

  sinon = require("sinon");

  Amen.describe("Array functions", function(context) {
    var ax, cat, complement, dequeue, difference, dupes, empty, enqueue, fifth, fill, findIndexOf, findLastIndexOf, first, fourth, includes, insert, intersection, join, last, length, nth, pair, pluck, pop, push, range, ref, remove, rest, second, shift, shuffle, slice, splice, third, union, uniq, unique, uniqueBy, unshift;
    ref = require("../src/array"), first = ref.first, second = ref.second, third = ref.third, fourth = ref.fourth, fifth = ref.fifth, nth = ref.nth, last = ref.last, rest = ref.rest, empty = ref.empty, includes = ref.includes, findIndexOf = ref.findIndexOf, findLastIndexOf = ref.findLastIndexOf, uniqueBy = ref.uniqueBy, unique = ref.unique, uniq = ref.uniq, dupes = ref.dupes, union = ref.union, intersection = ref.intersection, difference = ref.difference, complement = ref.complement, push = ref.push, pop = ref.pop, shift = ref.shift, unshift = ref.unshift, enqueue = ref.enqueue, dequeue = ref.dequeue, splice = ref.splice, insert = ref.insert, remove = ref.remove, cat = ref.cat, slice = ref.slice, join = ref.join, fill = ref.fill, shuffle = ref.shuffle, range = ref.range, pluck = ref.pluck, pair = ref.pair;
    length = function(ax) {
      return ax.length;
    };
    empty = function(ax) {
      return (length(ax)) === 0;
    };
    ax = [1, 2, 3, 4, 5];
    context.test("first", function() {
      return assert((first(ax)) === 1);
    });
    context.test("second", function() {
      return assert((second(ax)) === 2);
    });
    context.test("third", function() {
      return assert((third(ax)) === 3);
    });
    context.test("fourth", function() {
      return assert((fourth(ax)) === 4);
    });
    context.test("fifth", function() {
      return assert((fifth(ax)) === 5);
    });
    context.test("nth", function() {
      return assert((nth(3, ax)) === 3);
    });
    context.test("last", function() {
      return assert((last(ax)) === 5);
    });
    context.test("rest", function() {
      return assert((first(rest(ax))) === 2);
    });
    context.test("includes", function() {
      return assert((includes(3, ax)) && !(includes(6, ax)));
    });
    context.test("push");
    context.test("pop");
    context.test("cat", function() {
      return assert.deepEqual(cat([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    });
    context.test("slice", function() {
      assert.deepEqual(slice(1, 2, ax), [2]);
      assert.deepEqual(slice(2, 5, ax), [3, 4, 5]);
      assert.deepEqual(slice(1, -2, ax), [2, 3]);
      assert.deepEqual(slice(-3, -1, ax), [3, 4]);
      return assert.deepEqual(slice(-3, -1, "0123456789"), "78");
    });
    context.test("uniqueBy", function() {
      var mod3;
      mod3 = function(x) {
        return x % 3;
      };
      return assert.deepEqual(uniqueBy(mod3, ax), [1, 2, 0]);
    });
    context.test("unique", function() {
      return assert.deepEqual(unique([1, 2, 1, 2]), [1, 2]);
    });
    context.test("dupes", function() {
      return assert.deepEqual(dupes([1, 2, 1, 3, 2]), [1, 2]);
    });
    context.test("union", function() {
      var bx, rx;
      bx = [3, 4, 5, 6];
      rx = union(ax, bx);
      assert(empty(dupes(rx)));
      return assert((length(unique(rx))) === (length(rx)));
    });
    context.test("intersection", function() {
      assert(empty(intersection([1, 2], [3, 4])));
      assert(empty(intersection([1, 1], [2, 2])));
      assert(empty(intersection([], [1, 2, 3])));
      assert(empty(intersection([1, 2, 3], [])));
      assert(empty(intersection([1, 2], [2, 3], [3, 4])));
      assert((first(intersection([1, 2], [2, 3]))) === 2);
      return assert((first(intersection([1, 2], [2, 3], [3, 2]))) === 2);
    });
    context.test("difference", function() {
      var bx;
      bx = [3, 4, 5, 6];
      return assert.deepEqual(difference(ax, bx), [1, 2, 6]);
    });
    context.test("complement", function() {
      var bx;
      bx = [3, 4, 5, 6];
      return assert.deepEqual(complement(ax, bx), [1, 2]);
    });
    context.test("insert", function() {
      assert.deepEqual(insert([4, 2, 1], 3, 1), [4, 3, 2, 1]);
      assert.deepEqual(insert([1, 2, 4], 3, -1), [1, 2, 3, 4]);
      return assert.deepEqual(insert([2, 3, 4], 1, 0), [1, 2, 3, 4]);
    });
    context.test("remove", function() {
      var bx;
      bx = [1, 2, 3, 4, 5];
      assert.deepEqual(remove(bx, 3), [1, 2, 4, 5]);
      assert.deepEqual(remove(bx, 1), [2, 4, 5]);
      assert.deepEqual(remove(bx, 5), [2, 4]);
      return assert.deepEqual(remove(bx, 3), [2, 4]);
    });
    context.test("shuffle", function() {
      return sinon.test(function() {
        var fisher_yates;
        sinon.stub(Math, "random").returns(0.8);
        fisher_yates = [1, 2, 3, 4, 10, 5, 6, 7, 8, 9];
        return assert.deepEqual(shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), fisher_yates);
      });
    });
    context.test("range", function() {
      assert.deepEqual(range(1, 5), [1, 2, 3, 4, 5]);
      return assert.deepEqual(range(5, 1), [5, 4, 3, 2, 1]);
    });
    context.test("join");
    return context.test("fill");
  });

}).call(this);
