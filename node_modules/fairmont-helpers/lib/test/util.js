// Generated by CoffeeScript 1.12.4
(function() {
  var Amen, assert, async, call, ref;

  assert = require("assert");

  Amen = require("amen");

  ref = require("../src/promise"), async = ref.async, call = ref.call;

  Amen.describe("Utility functions", function(context) {
    var benchmark, deepEqual, empty, length, memoize, ref1, sleep, timer, times;
    ref1 = require("../src/util"), times = ref1.times, sleep = ref1.sleep, timer = ref1.timer, memoize = ref1.memoize, deepEqual = ref1.deepEqual, times = ref1.times, benchmark = ref1.benchmark, empty = ref1.empty, length = ref1.length;
    context.test("memoize", function() {
      var double, f, triple;
      double = memoize(function(x) {
        return 2 * x;
      });
      assert(double(5) === 10);
      f = function(x) {
        return 2 * x;
      };
      double = memoize(f, null, {
        "5": 25
      });
      assert(double(5) === 25);
      triple = memoize(async(function*(x) {
        yield sleep(100);
        return 3 * x;
      }));
      return call(function*() {
        var duration, result, startTime;
        startTime = Date.now();
        result = (yield triple(5));
        duration = Date.now() - startTime;
        assert(result === 15);
        assert(duration >= 100);
        startTime = Date.now();
        result = (yield triple(5));
        duration = Date.now() - startTime;
        assert(result === 15);
        return assert(duration <= 100);
      });
    });
    context.test("timer", function() {
      var cancel, tooLong, x;
      x = 5;
      tooLong = function() {
        return x = x * 2;
      };
      cancel = timer(10000, tooLong);
      cancel();
      return assert(x === 5);
    });
    context.test("sleep", function() {
      return call(function*() {
        var duration, startTime;
        startTime = Date.now();
        yield sleep(100);
        duration = Date.now() - startTime;
        return assert(duration > 50);
      });
    });
    context.test("times", function() {
      var n, result, square, x;
      n = 0;
      assert((times((function() {
        return ++n;
      }), 3)).length === 3);
      x = 2;
      square = function() {
        return x = Math.pow(x, 2);
      };
      result = times(square, 5);
      return assert.deepEqual(result, [4, 16, 256, 65536, 4294967296]);
    });
    context.test("benchmark", function() {
      var multiple, single, useless;
      useless = function() {
        var i, j, results, y;
        results = [];
        for (i = j = 0; j < 1000000; i = ++j) {
          results.push(y = 1 + i);
        }
        return results;
      };
      single = benchmark(useless);
      multiple = benchmark(function() {
        return times(useless, 5);
      });
      return assert((0 < single && single < multiple));
    });
    context.test("empty", function() {
      assert.equal(empty([]), true);
      assert.equal(empty(""), true);
      assert.equal(empty([1]), false);
      return assert.equal(empty("abc"), false);
    });
    context.test("length", function() {
      assert(length([]) === 0);
      assert(length([1]) === 1);
      assert(length([1, 2]) === 2);
      assert(length([1, 2, 3]) === 3);
      assert(length("") === 0);
      assert(length("p") === 1);
      assert(length("pan") === 3);
      return assert(length("panda") === 5);
    });
    return context.test("deepEqual", function() {
      var a, b;
      a = [1, 2, 3, 4, 5];
      b = [1, 2, 3, 4, 5];
      assert((a === b) === false);
      assert(deepEqual(a, b));
      a = {
        foo: 1,
        bar: 2,
        baz: 3
      };
      b = {
        bar: 2,
        foo: 1,
        baz: 3
      };
      assert((a === b) === false);
      return assert(deepEqual(a, b));
    });
  });

}).call(this);
