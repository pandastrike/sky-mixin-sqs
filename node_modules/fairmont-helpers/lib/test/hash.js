// Generated by CoffeeScript 1.12.4
(function() {
  var Amen, assert, isString, ref, replace, split;

  assert = require("assert");

  Amen = require("amen");

  isString = require("../src/type").isString;

  ref = require("../src/string"), replace = ref.replace, split = ref.split;

  Amen.describe("Hashing/Encoding Functions", function(context) {
    var base64, base64URL, fromBase64Words, md5, randomBytes, randomKey, randomWord, randomWords, ref1, toBase64Words;
    ref1 = require("../src/hash"), md5 = ref1.md5, base64 = ref1.base64, base64URL = ref1.base64URL, toBase64Words = ref1.toBase64Words, fromBase64Words = ref1.fromBase64Words, randomBytes = ref1.randomBytes, randomKey = ref1.randomKey, randomWord = ref1.randomWord, randomWords = ref1.randomWords;
    context.test("md5", function() {
      return assert((md5("It was a dark and stormy night")) === "678b823bafa0461327d9a7de3902aaa8");
    });
    context.test("base64", function() {
      return assert((base64("It was a dark and stormy night")) === "SXQgd2FzIGEgZGFyayBhbmQgc3Rvcm15IG5pZ2h0");
    });
    context.test("base64URL", function() {
      return assert((base64URL("It was a dark and stormy night.")) === "SXQgd2FzIGEgZGFyayBhbmQgc3Rvcm15IG5pZ2h0Lg");
    });
    context.test("toBase64Words", function() {
      return assert((toBase64Words("1234566778")) === "ducky-apron-finer-tulip-genre-finite-groom");
    });
    context.test("fromBase64Words", function() {
      return assert.equal("1234566778", (fromBase64Words("ducky-apron-finer-tulip-genre-finite-groom")).toString("utf8"));
    });
    context.test("randomBytes", function*() {
      return assert.equal(16, ((yield randomBytes(16))).length);
    });
    context.test("randomKey", function*() {
      return assert(isString((yield randomKey(16))));
    });
    context.test("randomWord", function*() {
      assert(isString((yield randomWord())));
      return assert.notEqual("", (yield randomWord()));
    });
    return context.test("randomWords", function*() {
      assert(isString((yield randomWords(16))));
      assert.equal(10, (split("-", (yield randomWords(16)))).length);
      assert.notEqual("", replace(/-/g, "", (yield randomWords(16))));
      assert(isString((yield randomWords({
        bytes: 8
      }))));
      assert.equal(5, (split("-", (yield randomWords({
        bytes: 8
      })))).length);
      assert.notEqual("", replace(/-/g, "", (yield randomWords({
        bytes: 8
      }))));
      assert(isString((yield randomWords({
        words: 3
      }))));
      assert.equal(3, (split("-", (yield randomWords({
        words: 3
      })))).length);
      return assert.notEqual("", replace(/-/g, "", (yield randomWords({
        words: 3
      }))));
    });
  });

}).call(this);
