// Generated by CoffeeScript 1.12.4
(function() {
  var Method, assert, async, benchmark, blank, curry, deepEqual, empty, isArray, isFunction, isGenerator, isObject, isString, length, memoize, promise, ref, ref1, ref2, sleep, timer, times;

  curry = require("fairmont-core").curry;

  Method = require("fairmont-multimethods").Method;

  ref = require("./type"), isFunction = ref.isFunction, isGenerator = ref.isGenerator;

  ref1 = require("./promise"), promise = ref1.promise, async = ref1.async;

  ref2 = require("./type"), isArray = ref2.isArray, isString = ref2.isString, isObject = ref2.isObject;

  blank = require("./string").blank;

  memoize = (function(_hash) {
    _hash = function(x) {
      return x.toString();
    };
    return function(fn, hash, memo) {
      if (hash == null) {
        hash = _hash;
      }
      if (memo == null) {
        memo = {};
      }
      return function(x) {
        var name;
        return memo[name = hash(x)] != null ? memo[name] : memo[name] = fn(x);
      };
    };
  })(void 0);

  timer = function(wait, action) {
    var id;
    id = setTimeout(action, wait);
    return function() {
      return clearTimeout(id);
    };
  };

  sleep = function(interval) {
    return promise(function(resolve, reject) {
      return timer(interval, function() {
        return resolve();
      });
    });
  };

  times = curry(function(fn, n) {
    var results;
    results = [];
    while (n-- !== 0) {
      results.push(fn());
    }
    return results;
  });

  benchmark = Method.create();

  Method.define(benchmark, isFunction, function(fn) {
    var start;
    start = Date.now();
    fn();
    return Date.now() - start;
  });

  Method.define(benchmark, isGenerator, function*(fn) {
    var start;
    start = Date.now();
    yield fn();
    return Date.now() - start;
  });

  empty = function(x) {
    return x.length === 0;
  };

  length = function(x) {
    return x.length;
  };

  assert = require("assert");

  deepEqual = function(a, b) {
    try {
      assert.deepEqual(a, b);
      return true;
    } catch (error) {
      return false;
    }
  };

  module.exports = {
    times: times,
    sleep: sleep,
    timer: timer,
    memoize: memoize,
    times: times,
    benchmark: benchmark,
    empty: empty,
    length: length,
    deepEqual: deepEqual
  };

}).call(this);
