"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.abort = exports.print = exports.run = exports.rmr = exports.rmR = exports.rmDir = exports.rmdir = exports.rm = exports.mv = exports.cp = exports.chDir = exports.chdir = exports.mkDirP = exports.mkdirp = exports.mkDir = exports.mkdir = exports.glob = exports.lsr = exports.lsR = exports.ls = exports.readDir = exports.readdir = exports.isDirectory = exports.isFile = exports.isWritable = exports.isReadable = exports.exists = exports.exist = exports.stat = exports.write = exports.read = void 0;

var _util = require("util");

var _child_process = require("child_process");

var _path2 = require("path");

var _stream = _interopRequireDefault(require("stream"));

var _pandaGarden = require("panda-garden");

var _pandaParchment = require("panda-parchment");

var _pandaGenerics = require("panda-generics");

var _fs = _interopRequireDefault(require("fs"));

var _minimatch = _interopRequireDefault(require("minimatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FS,
    abort,
    chDir,
    chdir,
    cp,
    exist,
    exists,
    glob,
    isDirectory,
    isFile,
    isReadable,
    isWritable,
    ls,
    lsR,
    lsr,
    mkDir,
    mkDirP,
    mkdir,
    mkdirp,
    mv,
    print,
    read,
    readBinaryStream,
    readBuffer,
    readDir,
    readStream,
    readdir,
    rm,
    rmDir,
    rmR,
    rmdir,
    rmr,
    run,
    stat,
    write,
    indexOf = [].indexOf;
exports.write = write;
exports.stat = stat;
exports.run = run;
exports.rmr = rmr;
exports.rmdir = rmdir;
exports.rmR = rmR;
exports.rmDir = rmDir;
exports.rm = rm;
exports.readdir = readdir;
exports.readDir = readDir;
exports.read = read;
exports.print = print;
exports.mv = mv;
exports.mkdirp = mkdirp;
exports.mkdir = mkdir;
exports.mkDirP = mkDirP;
exports.mkDir = mkDir;
exports.lsr = lsr;
exports.lsR = lsR;
exports.ls = ls;
exports.isWritable = isWritable;
exports.isReadable = isReadable;
exports.isFile = isFile;
exports.isDirectory = isDirectory;
exports.glob = glob;
exports.exists = exists;
exports.exist = exist;
exports.cp = cp;
exports.chdir = chdir;
exports.chDir = chDir;
exports.abort = abort;

FS = function (result) {
  var key, value;

  for (key in _fs.default) {
    value = _fs.default[key];
    result[key] = (0, _pandaParchment.isFunction)(value) ? (0, _util.promisify)(value) : value;
  }

  return result;
}({}); // we're going to export this


({
  stat
} = FS);
exports.stat = stat;

exports.exists = exists = exports.exist = exist = async function (path) {
  try {
    return (await FS.stat(path)) != null;
  } catch (error1) {
    return false;
  }
};

exports.isDirectory = isDirectory = async function (path) {
  try {
    return (await FS.stat(path)).isDirectory();
  } catch (error1) {
    return false;
  }
};

exports.isFile = isFile = async function (path) {
  try {
    return (await FS.stat(path)).isFile();
  } catch (error1) {
    return false;
  }
};

exports.isReadable = isReadable = function (x) {
  var ref;
  return (x != null ? (ref = x.read) != null ? ref.call : void 0 : void 0) != null;
}; // socket-based streams are duplex streams
// and do not inherit from stream.writable


exports.isWritable = isWritable = function (x) {
  var ref;
  return (x != null ? (ref = x.write) != null ? ref.call : void 0 : void 0) != null;
};

exports.read = read = _pandaGenerics.Method.create();

_pandaGenerics.Method.define(read, _pandaParchment.isString, _pandaParchment.isString, function (path, encoding) {
  return FS.readFile(path, encoding);
});

_pandaGenerics.Method.define(read, _pandaParchment.isString, function (path) {
  return read(path, 'utf8');
});

readBuffer = function (path) {
  return FS.readFile(path);
};

_pandaGenerics.Method.define(read, _pandaParchment.isString, (0, _pandaParchment.eq)(void 0), readBuffer);

_pandaGenerics.Method.define(read, _pandaParchment.isString, (0, _pandaParchment.eq)("binary"), readBuffer);

_pandaGenerics.Method.define(read, _pandaParchment.isString, (0, _pandaParchment.eq)("buffer"), readBuffer); // Stringifies a stream's buffer according to the given encoding.


readStream = function (stream, encoding = "utf8") {
  var buffer;
  buffer = "";
  return (0, _pandaParchment.promise)(function (resolve, reject) {
    stream.on("data", function (data) {
      return buffer += data.toString(encoding);
    });
    stream.on("end", function () {
      return resolve(buffer);
    });
    return stream.on("error", function (error) {
      return reject(error);
    });
  });
}; // Extracts a stream's raw buffer.


readBinaryStream = function (stream) {
  var buffer;
  buffer = new Buffer(0);
  return (0, _pandaParchment.promise)(function (resolve, reject) {
    stream.on("data", function (data) {
      return buffer = Buffer.concat([buffer, data]);
    });
    stream.on("end", function () {
      return resolve(buffer);
    });
    return stream.on("error", function (error) {
      return reject(error);
    });
  });
};

_pandaGenerics.Method.define(read, isReadable, readStream);

_pandaGenerics.Method.define(read, isReadable, _pandaParchment.isString, readStream);

_pandaGenerics.Method.define(read, isReadable, (0, _pandaParchment.eq)(void 0), readBinaryStream);

_pandaGenerics.Method.define(read, isReadable, (0, _pandaParchment.eq)("binary"), readBinaryStream);

_pandaGenerics.Method.define(read, isReadable, (0, _pandaParchment.eq)("buffer"), readBinaryStream);

exports.write = write = _pandaGenerics.Method.create();

_pandaGenerics.Method.define(write, _pandaParchment.isString, _pandaParchment.isBuffer, function (path, buffer) {
  return FS.writeFile(path, buffer);
});

_pandaGenerics.Method.define(write, _pandaParchment.isString, _pandaParchment.isString, function (path, content) {
  return FS.writeFile(path, content);
});

_pandaGenerics.Method.define(write, _pandaParchment.isString, isReadable, function (path, stream) {
  return stream.pipe(_fs.default.createWriteStream(path));
});

_pandaGenerics.Method.define(write, isWritable, _pandaParchment.isString, function (stream, content) {
  return (0, _pandaParchment.promise)(function (resolve, reject) {
    return stream.write(content, "utf-8", function (error) {
      if (error == null) {
        return resolve();
      } else {
        return reject(error);
      }
    });
  });
});

exports.write = write = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(write));

exports.readdir = readdir = exports.readDir = readDir = function (path) {
  return FS.readdir(path);
};

exports.ls = ls = async function (path) {
  var file, i, len, ref, results;
  ref = await readdir(path);
  results = [];

  for (i = 0, len = ref.length; i < len; i++) {
    file = ref[i];
    results.push((0, _path2.join)(path, file));
  }

  return results;
};

exports.lsR = lsR = exports.lsr = lsr = async function (path, visited = []) {
  var child, children, i, len;
  children = await ls(path);

  for (i = 0, len = children.length; i < len; i++) {
    child = children[i];

    if (!(indexOf.call(visited, child) >= 0)) {
      if (await isDirectory(child)) {
        await lsR(child, visited);
      } else {
        visited.push(child);
      }
    }
  }

  return visited;
};

exports.rmR = rmR = exports.rmr = rmr = async function (path) {
  var _path, i, len, paths;

  if (await isDirectory(path)) {
    paths = await ls(path);

    for (i = 0, len = paths.length; i < len; i++) {
      _path = paths[i];
      await rmr(_path);
    }

    return await rmDir(path);
  } else if (await isFile(path)) {
    return await rm(path);
  }
};

exports.glob = glob = async function (pattern, path) {
  return _minimatch.default.match((await lsR(path)), (0, _path2.join)(path, pattern));
};

exports.chDir = chDir = exports.chdir = chdir = _pandaGenerics.Method.create();

_pandaGenerics.Method.define(chdir, _pandaParchment.isString, function (path) {
  var cwd;
  cwd = process.cwd();
  process.chdir(path);
  return function () {
    return process.chdir(cwd);
  };
});

_pandaGenerics.Method.define(chdir, _pandaParchment.isString, _pandaParchment.isFunction, function (path, f) {
  var restore;
  restore = chdir(path);
  f();
  return restore();
});

exports.rm = rm = function (path) {
  return FS.unlink(path);
};

exports.mv = mv = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(function (old, _new) {
  return FS.rename(old, _new);
}));
exports.cp = cp = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(function (old, _new) {
  return (0, _pandaParchment.promise)(function (resolve, reject) {
    return _fs.default.createReadStream(old).pipe(_fs.default.createWriteStream(_new)).on("error", function (error) {
      return reject(error);
    }).on("close", function () {
      return resolve();
    });
  });
}));

exports.rmDir = rmDir = exports.rmdir = rmdir = function (path) {
  return FS.rmdir(path);
};

exports.mkDir = mkDir = exports.mkdir = mkdir = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(function (mode, path) {
  return FS.mkdir(path, mode);
}));
exports.mkDirP = mkDirP = exports.mkdirp = mkdirp = (0, _pandaGarden.curry)((0, _pandaGarden.binary)(async function (mode, path) {
  var error, parent;

  if (!(await exists(path))) {
    parent = (0, _path2.dirname)(path);

    if (!(await exists(parent))) {
      await mkdirp(mode, parent);
    }

    try {
      return await mkdir(mode, path);
    } catch (error1) {
      error = error1;

      if (error.code !== "EEXIST") {
        throw error;
      }
    }
  }
}));

exports.abort = abort = function (message) {
  if (message != null) {
    console.error(message);
  }

  return process.exit(-1);
};

exports.run = run = function (command) {
  return (0, _pandaParchment.promise)(function (resolve, reject) {
    return (0, _child_process.exec)(command, function (error, stdout, stderr) {
      if (error) {
        return reject(error);
      } else {
        return resolve({
          stdout,
          stderr
        });
      }
    });
  });
};

exports.print = print = function ({
  stdout,
  stderr
}) {
  if (stdout.length > 0) {
    process.stdout.write(stdout);
  }

  if (stderr.length > 0) {
    return process.stderr.write(stderr);
  }
};
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/david/Repositories/panda-quill/src/index.coffee