"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tools = void 0;

var _pandaRiver = require("panda-river");

var _pandaParchment = require("panda-parchment");

var _pandaQuill = require("panda-quill");

var _helpers = require("./helpers");

var _plugins = require("./plugins");

var _sh = require("./sh");

var tools;
exports.tools = tools;

exports.tools = tools = function (p9k) {
  var compile, cwd, define, extension, glob, read, run, target, targets, tasks, write;
  ({
    define,
    run,
    glob,
    read,
    write,
    extension
  } = p9k);
  cwd = process.cwd(); // Compile helper, taking target configuration
  // (target in configuration refers to output path)

  compile = function ({
    source,
    target,
    settings
  }) {
    return function () {
      return (0, _pandaRiver.go)([glob(source, cwd), (0, _pandaRiver.wait)((0, _pandaRiver.map)(read)), (0, _pandaRiver.map)((0, _plugins.coffee)(settings)), (0, _pandaRiver.map)(extension(".js")), (0, _pandaRiver.wait)((0, _pandaRiver.map)(write(target)))]);
    };
  };

  targets = {
    active: [],
    preset: {
      npm: function () {
        var settings;
        define("npm:clean", function () {
          return (0, _pandaQuill.rmr)("build/npm");
        }); // override defaults to support AWS Lambda

        settings = {
          transpile: {
            presets: [[(0, _helpers.resolve)("@babel/preset-env"), {
              targets: {
                node: "8.10"
              }
            }]]
          }
        };
        define("npm:compile:source", compile({
          source: "src/**/*.coffee",
          target: "build/npm",
          settings: settings
        }));
        define("npm:compile:tests", compile({
          source: "test/**/*.coffee",
          target: "build/npm",
          settings: settings
        }));
        define("npm:build", "npm:clean npm:compile:source& npm:compile:tests&");
        define("npm:run:tests", async function () {
          return (0, _sh.print)((await (0, _sh.sh)("node build/npm/test/index.js")));
        });
        define("npm:test", "npm:build npm:run:tests");
        return define("npm:publish", async function () {
          return (0, _sh.print)((await (0, _sh.sh)("npm publish")));
        });
      },
      web: function () {
        var settings;
        define("web:clean", function () {
          return (0, _pandaQuill.rmr)("build/web");
        }); // get all the latest

        settings = {
          transpile: {
            presets: [[(0, _helpers.resolve)("@babel/preset-env"), {
              targets: "last 2 chrome versions",
              modules: false
            }]]
          }
        };
        define("web:compile:source", compile({
          source: "src/**/*.coffee",
          target: "build/web",
          settings: settings
        }));
        define("web:compile:tests", compile({
          source: "test/**/*.coffee",
          target: "build/web",
          settings: settings
        }));
        define("web:build", "web:clean web:compile:source& web:compile:tests&");
        define("web:run:tests", async function () {
          // TODO: probably should run in headless browser
          return (0, _sh.print)((await (0, _sh.sh)("node build/web/test/index.js")));
        });
        define("web:test", "web:build web:run:tests");
        return define("web:publish", async function () {
          (0, _pandaQuill.write)("build/web/package.json", (0, _helpers.replace)([[_helpers.module.name, _helpers.module.name + "-esm"], ["build/npm", "."]], (0, _helpers.json)(_helpers.module)));
          return (0, _sh.print)((await (0, _sh.sh)("cd build/web && npm publish")));
        });
      }
    }
  }; // Tag a release

  define("git:tag", async function () {
    var version;
    ({
      version
    } = _helpers.module);
    await (0, _sh.sh)(`git tag -am ${version} ${version}`);
    return await (0, _sh.sh)("git push --tags");
  });
  define("clean", function () {
    return (0, _pandaQuill.rmr)("build");
  }); // define dyamically because active targets isn't yet defined

  tasks = function (task) {
    return function () {
      var i, len, name, ref, results;
      ref = targets.active;
      results = [];

      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        results.push(run(`${name}:${task}`));
      }

      return results;
    };
  };

  define("build", tasks("build"));
  define("test", tasks("test"));
  define("publish", tasks("publish")); // if name references a preset, run the preset with
  // the definition as an arg. otw, the arg is a fn
  // defining the tasks under target name

  target = function (name, definition) {
    var f;
    targets.active.push(name);

    if ((f = targets.preset[name]) != null) {
      return f(definition);
    } else {
      return definition();
    }
  };

  return {
    target
  };
};
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/dyoder/repos/panda-builder/src/index.coffee