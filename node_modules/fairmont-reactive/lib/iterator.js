// Generated by CoffeeScript 1.12.2
(function() {
  var Method, async, curry, identity, isDefined, isDone, isFunction, isGeneratorFunction, isIterable, isIterator, isPromise, iterator, next, ref, ref1, value;

  ref = require("fairmont-core"), identity = ref.identity, curry = ref.curry;

  Method = require("fairmont-multimethods").Method;

  ref1 = require("fairmont-helpers"), isFunction = ref1.isFunction, isGeneratorFunction = ref1.isGeneratorFunction, isDefined = ref1.isDefined, isPromise = ref1.isPromise, async = ref1.async;

  isIterable = function(x) {
    return (x != null) && (isFunction(x[Symbol.iterator])) || (isGeneratorFunction(x));
  };

  isIterator = function(x) {
    return (x != null) && (isFunction(x.next)) && (isIterable(x));
  };

  iterator = Method.create();

  Method.define(iterator, isFunction, function(f) {
    f.next = f;
    f[Symbol.iterator] = function() {
      return f;
    };
    return f;
  });

  Method.define(iterator, isIterable, function(i) {
    return i[Symbol.iterator]();
  });

  Method.define(iterator, isGeneratorFunction, function(g) {
    return g();
  });

  next = function(i) {
    return i.next();
  };

  value = function(arg) {
    var value;
    value = arg.value;
    return value;
  };

  isDone = function(arg) {
    var done;
    done = arg.done;
    return done;
  };

  module.exports = {
    isIterable: isIterable,
    iterator: iterator,
    isIterator: isIterator,
    next: next,
    value: value,
    isDone: isDone
  };

}).call(this);
