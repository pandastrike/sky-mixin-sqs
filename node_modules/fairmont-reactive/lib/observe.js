// Generated by CoffeeScript 1.12.2
(function() {
  var isObject, isObservable, observe, proxy, queue,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  isObject = require("fairmont-helpers").isObject;

  queue = require("./adapters").queue;

  proxy = function(target, handlers) {
    return new Proxy(target, handlers);
  };

  isObservable = function(target) {
    return isObject(target || isArray(target));
  };

  observe = function(root) {
    var _observe, dequeue, enqueue, handlers, observed, ref;
    ref = queue(), enqueue = ref.enqueue, dequeue = ref.dequeue;
    handlers = {
      defineProperty: enqueue,
      deleteProperty: enqueue,
      set: function(target, key, value) {
        target[key] = value;
        return enqueue(root);
      }
    };
    observed = [];
    _observe = function(target) {
      var key, value;
      for (key in target) {
        value = target[key];
        if (isObservable(value)) {
          if (indexOf.call(observed, value) < 0) {
            observed.push(value);
            target[key] = _observe(value);
          }
        }
      }
      return proxy(target, handlers);
    };
    return {
      proxy: _observe(root),
      reactor: dequeue
    };
  };

  module.exports = {
    proxy: proxy,
    observe: observe
  };

}).call(this);
