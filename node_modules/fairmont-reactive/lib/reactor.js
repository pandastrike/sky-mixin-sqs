// Generated by CoffeeScript 1.12.2
(function() {
  var Method, async, asyncIterator, binary, curry, either, follow, has, identity, isDefined, isFunction, isGeneratorFunction, isPromise, isReactor, isReagent, negate, property, query, reactor, ref, ref1;

  ref = require("fairmont-core"), identity = ref.identity, curry = ref.curry, binary = ref.binary, negate = ref.negate;

  follow = require("fairmont-helpers").follow;

  either = curry(function(f, g) {
    return function() {
      return (f.apply(null, arguments)) || (g.apply(null, arguments));
    };
  });

  Method = require("fairmont-multimethods").Method;

  ref1 = require("fairmont-helpers"), property = ref1.property, query = ref1.query, has = ref1.has, isFunction = ref1.isFunction, isGeneratorFunction = ref1.isGeneratorFunction, isDefined = ref1.isDefined, isPromise = ref1.isPromise, async = ref1.async;

  isReagent = function(x) {
    return (x != null) && isFunction(x[Symbol.asyncIterator]);
  };

  isReactor = function(x) {
    return (x != null) && (isFunction(x.next)) && (isReagent(x));
  };

  reactor = asyncIterator = Method.create();

  Method.define(reactor, isFunction, function(f) {
    var g;
    g = function() {
      return follow(f.apply(null, arguments));
    };
    g.next = g;
    g[Symbol.asyncIterator] = function() {
      return g;
    };
    return g;
  });

  Method.define(reactor, isReagent, function(i) {
    return i[Symbol.asyncIterator]();
  });

  Method.define(reactor, isGeneratorFunction, function(g) {
    return g();
  });

  module.exports = {
    isReagent: isReagent,
    reactor: reactor,
    isReactor: isReactor
  };

}).call(this);
